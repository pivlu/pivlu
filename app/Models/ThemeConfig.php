<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class ThemeConfig extends Model
{
    protected $table = 'pivlu_theme_config';

    protected $fillable = ['theme_id', 'name', 'value'];

    public $timestamps = false;


    /**
     * Get configs from database
     *
     * @return object
     */
    public static function config($theme_id = null)
    {        
        if (!$theme_id ?? null) $theme_id = Theme::where('is_default', 1)->value('id');        
        $results = ThemeConfig::where('theme_id', $theme_id)->pluck('value', 'name')->toArray();

        return (object) $results;
    }


    /**
     * Update sys config
     *
     * @return null
     */
    public static function update_config($theme_id, $name, $value = null)
    {
        if (is_array($name)) {
            foreach ($name as $key => $value) {
                if ($key != '_token') ThemeConfig::updateOrCreate(['theme_id' => $theme_id, 'name' => $key], ['value' => $value]);
            }
        } else {
            ThemeConfig::updateOrCreate(['theme_id' => $theme_id, 'name' => $name], ['value' => $value]);
        }        

        return null;
    }


    /**
     * Get configs from database
     *
     * @return null
     */
    public static function generate_global_css($theme = null)
    {
        if (!$theme) $theme = 'builder';

        // 1. Add all variables in database first

        $styles = themeConfig::where('theme', $theme)->groupBy('style')->get();

        //dd($styles);
        $css_destination = 'custom/custom.css';

        $fonts_array = array();

        $css_file = fopen($css_destination, "w");

        $write = "";

        foreach ($styles as $style) {
            $items = ThemeConfig::where('theme', $theme)->where('style', $style->style)->pluck('value', 'name')->toArray();
            $items = (object)$items;

            //dd($style->style);
            // Font Family
            if ($items->font_family ?? null) {
                $font_family = $items->font_family; // Example: Alegreya+Sans:wght@400;700|'Alegreya Sans', sans-serif
                $font_family_array = explode('|', $font_family);
                $font_family_import = $font_family_array[0]; // Alegreya+Sans:wght@400;700
                $font_family_css = $font_family_array[1]; // 'Alegreya Sans', sans-serif            
            }

            // Global
            if ($style->style == 'global') {
                $write = ".style_global { background-color: $items->bg_color; color: $items->text_color; font-family: $font_family_css; font-size: $items->text_size; } ";
                fwrite($css_file, $write);

                $write = ".style_global a { color: $items->link_color; text-decoration: $items->link_decoration; font-weight: $items->font_weight; text-decoration-thickness: $items->link_underline_thickness !important; 
                    text-underline-offset: $items->link_underline_offset !important; } ";
                fwrite($css_file, $write);

                $write = ".style_global a:hover { color: $items->link_hover_color; text-decoration: $items->link_hover_decoration; } ";
                fwrite($css_file, $write);

                $write = ".style_global a:focus { color: $items->link_hover_color; text-decoration: $items->link_decoration!important; } ";
                fwrite($css_file, $write);

                // Do not overwrite Buttons style            
                //$write = ".style_global .btn a, .style_global a .btn, .style_global .btn { color: inherit !important; } ";
                //fwrite($css_file, $write);

                // add font family to array
                if ($items->font_family ?? null) array_push($fonts_array, $font_family_import);
            }


            // Navigation
            if ($style->style == 'nav') {
                $navbar_padding = $items->navbar_padding ?? '10px';
                $write = ".style_nav { background-color: $items->bg_color !important; font-family: $font_family_css !important; font-size: $items->text_size !important; padding: $navbar_padding !important; } ";
                fwrite($css_file, $write);

                $write = ".style_nav a { color: $items->link_color !important; text-decoration: $items->link_decoration !important; font-weight: $items->font_weight !important; text-decoration-thickness: $items->link_underline_thickness !important; 
                    text-underline-offset: $items->link_underline_offset !important; text-decoration-color: $items->link_underline_color !important;} ";
                fwrite($css_file, $write);

                $write = ".style_nav a:hover { color: $items->link_hover_color !important; text-decoration: $items->link_hover_decoration !important; font-weight: $items->font_weight; text-decoration-thickness: $items->link_underline_thickness !important; 
                    text-underline-offset: $items->link_underline_offset !important;  text-decoration-color: $items->link_underline_color_hover !important; } ";
                fwrite($css_file, $write);

                $write = ".style_nav a:focus { color: $items->link_hover_color !important; text-decoration: $items->link_decoration!important; } ";
                fwrite($css_file, $write);

                // navbar toggler icon
                $write = ".style_nav a:focus { color: $items->link_hover_color !important; text-decoration: $items->link_decoration!important; } ";
                fwrite($css_file, $write);

                $write = ".navbar-toggler { color: $items->link_color !important; }";
                fwrite($css_file, $write);

                // add font family to array
                if ($items->font_family ?? null) array_push($fonts_array, $font_family_import);
            }


            // Navigation Dropdown Menu
            if ($style->style == 'nav_dropdown') {

                $navbar_padding = ThemeConfig::get_theme_config($theme = 'builder', 'navbar_padding') ?? '10px';
                if ($navbar_padding == '10px') $dropdown_margin_top = '13px';
                elseif ($navbar_padding == '5px') $dropdown_margin_top = '9px';
                elseif ($navbar_padding == '20px') $dropdown_margin_top = '24px';
                else $dropdown_margin_top = '10px';

                $write = ".style_nav_dropdown { background-color: $items->bg_color !important; font-size: $items->text_size !important; margin-top: $dropdown_margin_top !important; } ";
                fwrite($css_file, $write);

                $write = ".style_nav_dropdown a { color: $items->link_color !important; text-decoration: $items->link_decoration; font-weight: $items->font_weight !important; text-decoration-thickness: $items->link_underline_thickness !important; 
                    text-underline-offset: $items->link_underline_offset !important; } ";
                fwrite($css_file, $write);

                $write = ".style_nav_dropdown li:hover { background-color: $items->bg_color_hover !important; } ";
                fwrite($css_file, $write);

                $write = ".style_nav_dropdown a:hover { color: $items->link_hover_color!important; text-decoration: $items->link_hover_decoration !important; } ";
                fwrite($css_file, $write);

                $write = ".style_nav_dropdown a:focus { color: $items->link_hover_color!important; text-decoration: $items->link_decoration!important; } ";
                fwrite($css_file, $write);

                // add font family to array
                if ($items->font_family ?? null) array_push($fonts_array, $font_family_import);
            }


            // Footer
            if ($style->style == 'footer') {
                $write = ".style_footer { background-color: $items->bg_color !important; color: $items->text_color !important; font-family: $font_family_css !important; font-size: $items->text_size !important; text-align: $items->text_align; font-weight: $items->text_weight; } ";
                fwrite($css_file, $write);

                $write = ".style_footer a { color: $items->link_color !important; text-decoration: $items->link_decoration !important; font-weight: $items->link_weight !important; text-decoration-thickness: $items->link_underline_thickness !important; 
                    text-underline-offset: $items->link_underline_offset !important; } ";
                fwrite($css_file, $write);

                $write = ".style_footer a:hover { color: $items->link_hover_color!important; text-decoration: $items->link_hover_decoration !important; } ";
                fwrite($css_file, $write);

                $write = ".style_footer a:focus { color: $items->link_hover_color!important; text-decoration: $items->link_decoration!important; } ";
                fwrite($css_file, $write);

                $write = ".style_footer .title { font-size: $items->title_size !important; font-weight: $items->title_weight !important; } ";
                fwrite($css_file, $write);

                // add font family to array
                if ($items->font_family ?? null) array_push($fonts_array, $font_family_import);
            }


            // Secondary Footer
            if ($style->style == 'footer2') {
                $write = ".style_footer2 { background-color: $items->bg_color; color: $items->text_color; font-family: $font_family_css; font-size: $items->text_size; text-align: $items->text_align; font-weight: $items->text_weight; } ";
                fwrite($css_file, $write);

                $write = ".style_footer2 a { color: $items->link_color !important; text-decoration: $items->link_decoration !important; font-weight: $items->link_weight !important; text-decoration-thickness: $items->link_underline_thickness !important; 
                    text-underline-offset: $items->link_underline_offset !important; } ";
                fwrite($css_file, $write);

                $write = ".style_footer2 a:hover { color: $items->link_hover_color!important; text-decoration: $items->link_hover_decoration; } ";
                fwrite($css_file, $write);

                $write = ".style_footer2 a:focus { color: $items->link_hover_color!important; text-decoration: $items->link_decoration!important; } ";
                fwrite($css_file, $write);

                $write = ".style_footer2 .title { font-size: $items->title_size; font-weight: $items->title_weight; } ";
                fwrite($css_file, $write);

                // add font family to array
                if ($items->font_family ?? null) array_push($fonts_array, $font_family_import);
            }

            // Posts
            if ($style->style == 'posts') {
                $write = ".style_posts { color: $items->text_color; font-family: $font_family_css; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .light { color: $items->light_color; } ";
                fwrite($css_file, $write);

                // Font Family Headings
                if ($items->font_family_headings ?? null) {
                    $font_family_headings = $items->font_family_headings; // Example: Alegreya+Sans:wght@400;700|'Alegreya Sans', sans-serif
                    $font_family_headings_array = explode('|', $font_family_headings);
                    $font_family_headings_import = $font_family_headings_array[0]; // Alegreya+Sans:wght@400;700
                    $font_family_headings_css = $font_family_headings_array[1]; // 'Alegreya Sans', sans-serif   

                    $write = ".style_posts .headings { font-family: $font_family_headings_css; } ";
                    fwrite($css_file, $write);

                    // add font family to array
                    array_push($fonts_array, $font_family_headings_import);
                }

                // Search bar
                $write = ".style_posts .search_bar { background-color: $items->search_bar_bg_color; } ";
                fwrite($css_file, $write);

                // Listings:
                $write = ".style_posts .listing a { color: $items->link_color; text-decoration: $items->listing_link_decoration; text-decoration-thickness: $items->listing_link_underline_thickness !important; 
                    text-underline-offset: $items->listing_link_underline_offset !important; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .listing a:hover { color: $items->link_hover_color!important; text-decoration: $items->listing_link_hover_decoration !important; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .listing a:focus { color: $items->link_hover_color!important; text-decoration: $items->listing_link_hover_decoration !important; } ";
                fwrite($css_file, $write);


                $write = ".style_posts .listing { font-size: $items->listing_text_size; font-weight: $items->listing_text_font_weight; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .listing .meta { font-size: $items->listing_meta_size; color: $items->light_color; line-height:1.5 } ";
                fwrite($css_file, $write);

                $write = ".style_posts .listing .meta a, .style_posts .post .meta a:hover, .style_posts .post .meta a:focus { text-decoration: none !important; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .listing .title { font-size: $items->listing_title_size; font-weight: $items->listing_title_font_weight; } ";
                fwrite($css_file, $write);

                // Post details page:
                $write = ".style_posts .post, .style_posts .post p { font-size: $items->post_text_size; line-height: $items->post_line_height; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .post .meta { font-size: $items->post_meta_size; color: $items->light_color; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .post .meta a, .style_posts .post .meta a:hover, .style_posts .post .meta a:focus { text-decoration: none !important; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .post .title { font-size: $items->post_title_size; font-weight: $items->post_title_font_weight; line-height: $items->post_title_line_height; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .post .summary, .style_posts .post .summary p { font-weight: $items->post_summary_font_weight; line-height: $items->post_line_height; } ";
                fwrite($css_file, $write);

                // Categories list:
                $write = ".style_posts .categ-item-box { color: $items->categs_link_color !important; font-size: $items->categs_font_size; font-weight: $items->categs_font_weight; background-color: $items->categs_box_bg_color !important; padding: 10px; line-height:normal; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .categ-item-box:hover { color: $items->categs_link_hover_color !important; background-color: $items->categs_box_bg_hover_color !important; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .categ-item-link { color: $items->categs_link_color !important; font-size: $items->categs_font_size; font-weight: $items->categs_font_weight; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .categ-item-link:hover { color: $items->categs_link_hover_color !important; } ";
                fwrite($css_file, $write);


                // Tags:
                $write = ".style_posts .tag .box { background-color: $items->tags_card_bg_color !important; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .tag .box:hover { background-color: $items->tags_card_bg_hover_color !important; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .tag a { color: $items->tags_link_color !important; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .tag a:hover, .style_posts .tag a:focus { color: $items->tags_link_hover_color !important; } ";
                fwrite($css_file, $write);

                // Custom content:
                $write = ".style_posts .custom_content { color: $items->custom_content_color; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .custom_content .title { font-size: $items->custom_title_size; } ";
                fwrite($css_file, $write);

                $write = ".style_posts .custom_content .text { font-size: $items->custom_text_size; } ";
                fwrite($css_file, $write);

                // add font family to array
                if ($items->font_family ?? null) array_push($fonts_array, $font_family_import);
            }
        }

        fwrite($css_file, $write);


        // Import fonts family
        $fonts_array = array_unique($fonts_array);
        $fonts_list = '';
        foreach ($fonts_array as $font_import) {
            $fonts_list = $fonts_list . '&family=' . $font_import;
        }

        if (substr($fonts_list, 0, 8) == '&family=') $fonts_list = substr($fonts_list, 8);
        $import_url = 'https://fonts.googleapis.com/css2?family=' . $fonts_list . '&display=swap';

        $write_import = "@import url('" . $import_url . "');\n ";
        //fwrite($css_file, $write_import);

        // IMPORTANT: Write font import at the begining oif the file:
        $file_data = $write_import . "\n";
        $file_data .= file_get_contents($css_destination);
        file_put_contents($css_destination, $file_data);

        /*
        // POSTS
        $posts_image_shadow = get_theme_value($theme_id, 'posts_image_shadow') ?? 'original';
        $post_image_shadow = get_theme_value($theme_id, 'post_image_shadow') ?? 'original';
        $post_image_height = get_theme_value($theme_id, 'post_image_height') ?? 'original';
        $post_image_force_full_width = get_theme_value($theme_id, 'post_image_force_full_width');
        $post_tags_style = get_theme_value($theme_id, 'post_tags_style') ?? 'links';
        $post_tags_box_bg_color = get_theme_value($theme_id, 'post_tags_box_bg_color') ?? '#999999';
        $post_tags_box_font_color = get_theme_value($theme_id, 'post_tags_box_font_color') ?? '#ffffff';

        if ($posts_image_shadow == 'on') {
            $write = ".listing-box img {box-shadow: 0 4px 8px 0 rgb(0 0 0 / 20%), 0 6px 20px 0 rgb(0 0 0 / 19%);} ";
            fwrite($css_file, $write);
        }

        if ($post_image_shadow == 'on') {
            $write = ".post .main-image img {box-shadow: 0 4px 8px 0 rgb(0 0 0 / 20%), 0 6px 20px 0 rgb(0 0 0 / 19%);} ";
            fwrite($css_file, $write);
        }

        if ($post_image_force_full_width)
            $write = ".post .main-image img { width: 100% !important; height: auto; }";
        else
            $write = ".post .main-image img { width: auto !important; height: auto; }";
        fwrite($css_file, $write);

        if ($post_image_height != 'original') $write = ".post .main-image img { width: 100vw !important; height: $post_image_height !important; object-fit: cover !important; overflow: hidden !important; }";
        fwrite($css_file, $write);

        if ($post_tags_style == 'box') {
            $write = ".post .tag {padding: 5px 10px; background-color: $post_tags_box_bg_color !important; color: $post_tags_box_font_color !important } ";
            $write .= ".post .tag a {color: $post_tags_box_font_color !important } ";
            fwrite($css_file, $write);
        }
        */

        // END. Close the file
        fclose($css_file);

        return;
    }


    public static function get_theme_config($theme = null, $name)
    {
        return ThemeConfig::where('theme', $theme)->where('name', $name)->value('value') ?? null;
    }
}
