<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class PostTypeTaxonomy extends Model
{

    protected $fillable = [
        'post_type_id',
        'hierarchical',
        'active',
        'position',
        'admin_filter',
        'count_posts'
    ];

    protected $table = 'pivlu_post_type_taxonomies';

    protected $appends = ['all_languages_contents'];
    
    public function content_post_type()
    {
        return $this->belongsTo(PostType::class, 'post_type_id');
    }

     public function default_language_content()
    {
        return $this->hasOne(PostTypeTaxonomyContent::class, 'post_type_taxonomy_id')->where('lang_id', Language::get_default_language()->id);
    }

    public function taxonomies()
    {
        return $this->hasMany(PostTaxonomy::class, 'post_type_taxonomy_id', 'post_type_id')->with('default_language_content');
    }

    public function active_taxonomies()
    {
        return $this->hasMany(PostTaxonomy::class, 'post_type_taxonomy_id', 'post_type_id')->where('active', 1);
    }

    public function root_taxonomies()
    {
        return $this->hasMany(PostTaxonomy::class, 'post_type_taxonomy_id', 'post_type_id')->whereNull('parent_id')->where('active', 1)->orderBy('position');
    }

    public static function get_hierarchical_taxonomies($post_type)
    {
        $items = TaxonomyTerm::with('root_taxonomies', 'content_post_type')            
            ->whereHas('taxonomies', function ($query) {
                $query->whereNull('parent_id')->where('active', 1);
            })
            ->where(['post_type' => $post_type, 'hierarchical' => 1, 'active' => 1])
            ->orderBy('position')
            ->get();
            
        return $items;
    }

    public function getAllLanguagesContentsAttribute()
    {
        $all_language_contents = [];
        $langs = Language::get_languages();
        foreach ($langs as $lang) {
            $content = PostTypeTaxonomyContent::where('lang_id', $lang->id)->where('post_type_taxonomy_id', $this->id)->first();
            $all_language_contents[] = ['lang_id' => $lang->id, 'lang_name' => $lang->name, 'lang_code' => $lang->code, 'name' => $content->name ?? null, 'slug' => $content->slug ?? null, 'labels' => $content->labels ?? null];
        }
        return json_decode(json_encode($all_language_contents));
    }
}
