<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class ConfigLang extends Model
{

    protected $fillable = [
        'lang_id',
        'name',
        'value',
    ];

    protected $table = 'pivlu_config_lang';

    /**
     * Indicates if the model should be timestamped.
     *
     * @var bool
     */
    public $timestamps = false;


    public static function update_config($lang_id, $name, $value = null)
    {
        if (is_array($name)) {
            foreach ($name as $key => $value) {
                if ($key != '_token')  ConfigLang::updateOrCreate(['lang_id' => $lang_id, 'name' => $key], ['value' => $value]);
            }
        } else {
            ConfigLang::updateOrCreate(['lang_id' => $lang_id, 'name' => $name], ['value' => $value]);
        }

        return;
    }

    public static function get_config($lang_id, $name)
    {
        return ConfigLang::where('lang_id', $lang_id)->where('name', $name)->value('value') ?? null;
    }


    /**
     * Get lang configs from database (for active language)
     *
     * @return object
     */
    public static function config()
    {
        $results = ConfigLang::where('lang_id', Language::get_active_language()->id)->pluck('value', 'name')->toArray();

        return (object) $results;
    }

    /**
     * Generate custom routes
     *
     * @return null
     */
    public static function generate_permalinks()
    {
        $file = 'custom/routes.xml';
        $fp = fopen($file, 'w');

        $data_header = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<routes>\n";
        fwrite($fp, $data_header);


        foreach (Language::get_languages() as $lang) {
            //$permalinks = unserialize($lang->permalinks);
            $permalinks = unserialize(ConfigLang::get_config($lang->id, 'permalinks'));

            // POSTS routes			
            $route_posts = $permalinks['posts'] ?? 'posts';
            if ($lang->is_default == 1) $route_lang = 'default';
            else $route_lang = $lang->code;
            $data_route = "<route>
			<lang>$route_lang</lang>
			<name>posts</name>		
			<value>$route_posts</value>
			</route>";
            fwrite($fp, $data_route);

            // CONTACT 
            $route_profile = $permalinks['contact'] ?? 'contact';
            if ($lang->is_default == 1) $route_lang = 'default';
            else $route_lang = $lang->code;
            $data_route = "<route>
			<lang>$route_lang</lang>
			<name>contact</name>		
			<value>$route_profile</value>
			</route>";
            fwrite($fp, $data_route);

            // SEARCH 
            $route_search = $permalinks['search'] ?? 'search';
            if ($lang->is_default == 1) $route_lang = 'default';
            else $route_lang = $lang->code;
            $data_route = "<route>
			<lang>$route_lang</lang>
			<name>search</name>		
			<value>$route_search</value>
			</route>";
            fwrite($fp, $data_route);

            // PROFILE 
            $route_profile = $permalinks['profile'] ?? 'profile';
            if ($lang->is_default == 1) $route_lang = 'default';
            else $route_lang = $lang->code;
            $data_route = "<route>
             <lang>$route_lang</lang>
             <name>profile</name>		
             <value>$route_profile</value>
             </route>";
            fwrite($fp, $data_route);

            // TAG 
            $route_tag = $permalinks['tag'] ?? 'tag';
            if ($lang->is_default == 1) $route_lang = 'default';
            else $route_lang = $lang->code;
            $data_route = "<route>
			<lang>$route_lang</lang>
			<name>tag</name>		
			<value>$route_tag</value>
			</route>";
            fwrite($fp, $data_route);
        }

        $data_footer = "</routes>";
        fwrite($fp, $data_footer);

        fclose($fp);

        // regenerate menu links for each language and store in cache config
        //Core::generate_langs_menu_links();

        return null;
    }
}
