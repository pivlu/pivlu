<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Schema;

class Plugin extends Model
{

    protected $fillable = [
        'plugin',
        'slug',
        'active',
        'name',
        'description',
        'version',
        'author',
        'url',
        'admin_menu',
        'user_menu'
    ];

    protected $table = 'pivlu_plugins';

    public $timestamps = false;

    public static function install($plugin)
    {
        if (!Schema::hasTable('pivlu_plugins')) return; // Pivlu is not installed

        $plugin_composer_file = base_path('vendor/' . $plugin . '/composer.json');

        //dd(readlink($plugin_composer_file));

        if (!file_exists($plugin_composer_file)) exit('Composer file not found: ' . $plugin_composer_file);

        $composer_file_content = file_get_contents($plugin_composer_file);
        $composer_file_content = json_decode($composer_file_content, true);

        $plugin_name = $composer_file_content['name'] ?? null;
        $plugin_description = $composer_file_content['description'] ?? null;
        $plugin_version = $composer_file_content['version'] ?? null;

        if (Plugin::where('plugin', $plugin)->doesntExist())
            Plugin::create([
                'plugin' => $plugin,
                'name' => $plugin_name,
                'active' => 1,
                'description' => $plugin_description,
                'version' => $plugin_version,
            ]);
        else
            Plugin::where('plugin', $plugin)->update([
                'description' => $plugin_description,
                'version' => $plugin_version,
            ]);

        return;
    }


    public static function create_block_type($plugin, $block_type, $label, $description, $icon)
    {

        if (BlockType::where(['plugin' => $plugin, 'type' => $block_type])->doesntExist())
            BlockType::create([
                'plugin' => $plugin,
                'type' => $block_type,
                'label' => $label ?? 'Custom type',
                'description' => $description ?? null,
                'icon' => $icon ?? '<i class="bi bi-bounding-box"></i>'
            ]);
        else
            BlockType::where(['plugin' => $plugin, 'type' => $block_type])->update([
                'label' => $label,
                'description' => $description,
                'icon' => $icon ?? '<i class="bi bi-bounding-box"></i>'
            ]);

        return;
    }
}
