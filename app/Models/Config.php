<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Cache;

class Config extends Model
{

    protected $table = 'pivlu_config';

    protected $fillable = ['name', 'value'];

    /**
     * Indicates if the model should be timestamped.
     *
     * @var bool
     */
    public $timestamps = false;

    /**
     * Get configs from database
     *
     * @return object
     */
    public static function config()
    {
        $results = Cache::remember('config', 60 * 60 * 24, function () {
            return Config::pluck('value', 'name')->toArray();
        });

        return (object) $results;
    }



    /**
     * Get specific config value from database
     *
     * @return string
     */
    public static function get_config($name)
    {
        return Config::where('name', $name)->value('value') ?? null;
    }

    /**
     * Update config
     *
     * @return null
     */
    public static function update_config($name, $value = null)
    {
        if (is_array($name)) {
            foreach ($name as $key => $value) {
                if ($key != '_token') Config::updateOrCreate(['name' => $key], ['value' => $value]);
            }
        } else {
            Config::updateOrCreate(['name' => $name], ['value' => $value]);
        }

        // clear cache
        Cache::forget('config');

        return null;
    }
}
