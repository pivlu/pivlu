<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use App\Models\User;
use Illuminate\Database\Eloquent\SoftDeletes;

class Post extends Model
{
    use SoftDeletes;

    protected $fillable = [
        'post_type_id',
        'media_id',
        'user_id',
        'status',
        'sticky',
        'hits',
        'like_count',
        'comment_count',
        'search_terms',
        'blocks',
        'is_homepage',
    ];

    protected $table = 'pivlu_posts';

    public function user()
    {
        return $this->belongsTo(User::class, 'user_id');
    }
   

    public function media()
    {
        return $this->hasOne(Media::class, 'media_id');
    }

    public function post_type()
    {
        return $this->belongsTo(PostType::class, 'post_type_id');
    }

    public function taxonomies()
    {
        return $this->hasMany(PostTaxonomy::class, 'post_type_taxonomy_id')->with('term');
    }

    public function hierarchical_taxonomies()
    {
        return $this->hasMany(PostTaxonomy::class, 'post_id')->with('hierarchical_taxonomy');
    }


    // Default language content
    public function default_language_content()
    {
        return $this->hasOne(PostContent::class, 'post_id')->where('lang_id', Language::get_default_language()->id);
    }

    // Active language content
    public function active_language_content()
    {
        return $this->hasOne(PostContent::class, 'post_id')->where('lang_id', Language::get_active_language()->id);
    }

    public static function get_main_hierarchical_taxonomy($post)
    {
        foreach ($post->taxonomies as $taxonomy) {
            if ($taxonomy->taxonomy->term->hierarchical == 1) {
                return ($taxonomy->taxonomy);
                break;
            }
        }

        return;
    }

    public static function generate_url($post_id, $lang_id)
    {
        $post = Post::find($post_id);
        if (!$post) return null;

        $post_content = PostContent::where(['post_id' => $post_id, 'lang_id' => $lang_id])->first();

        // PAGE TYPE
        if ($post->type == 'page') {
            // check if page is child of another page
            $parent_id = Post::where('id', $post_id)->value('parent_id');

            if ($parent_id) {
                $parent_slug = PostContent::where(['post_id' => $parent_id, 'lang_id' => $lang_id])->value('slug');
                $url = $parent_slug . '/' . $post_content->slug;
            } else {
                $slug = PostContent::where(['post_id' => $post_id, 'lang_id' => $lang_id])->value('slug');
                $url = $slug;
            }
        } else {
            if ($post->type == 'post') {
                // POST TYPE
                $taxonomy = PostTaxonomy::where('post_id', $post_id)->orderBy('id')->first();
                // if post has no taxonomy, get the post type slug
                if (!$taxonomy) {
                    $type_slug = PostType::where('type', $post->type)->value('type');
                    $url = $type_slug . '/' . $post_content->slug;
                } else {
                    $taxonomy_slug = TaxonomyContent::where(['taxonomy' => $taxonomy->id, 'lang_id' => $lang_id])->value('slug');
                    $url = $taxonomy_slug . '/' . $post_content->slug;
                }
            } else {
                // CUSTOM POST TYPE
                $type_slug = PostType::where('type', $post->type)->value('slug');
                $taxonomy = PostTaxonomy::where('post_id', $post_id)->orderBy('id')->first();

                // if post has no taxonomy, get the post type slug
                if (!$taxonomy) {
                    $type_slug = PostType::where('type', $post->type)->value('type');
                    $url = $type_slug . '/' . $post_content->slug;
                } else {
                    $taxonomy_slug = Taxonomy::where('id', $taxonomy->taxonomy_id)->value('slug');
                    $url = $type_slug . '/' . $taxonomy_slug . '/' . $post_content->slug;
                }
            }
        }

        $lang = Language::find($lang_id);
        if ($lang->is_default == 0) $url = $lang->code . '/' . $url;

        return $url ?? null;
    }


    public function blocks()
    {
        return $this->hasMany(BlockContent::class, 'post_id');
    }
}
