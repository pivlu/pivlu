<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Taxonomy extends Model
{

    protected $fillable = [
        'taxonomy',
        'parent_id',
        'plugin',
        'tree_ids',
        'active',
        'position',
        'media_id',
        'icon',
        'count_posts',
        'count_tree_posts',
    ];

    protected $table = 'pivlu_taxonomy';

    public function term()
    {
        return $this->belongsTo(TaxonomyTerm::class, 'taxonomy', 'taxonomy')->with('content_post_type');
    }

    public function contents()
    {
        return $this->hasMany(TaxonomyContent::class, 'taxonomy_id');
    }

    public function default_language_content()
    {
        return $this->hasOne(TaxonomyContent::class, 'taxonomy_id')->where('lang_id', Language::get_default_language()->id ?? null);
    }

    public function active_language_content()
    {
        return $this->hasOne(TaxonomyContent::class, 'taxonomy_id')->where('lang_id', Language::get_active_language()->id ?? null);
    }


    public function children()
    {
        return $this->hasMany(Taxonomy::class, 'parent_id')->orderBy('position');
    }


    public function childCategories()
    {
        return $this->hasMany(Taxonomy::class, 'parent_id')->with('children')->orderBy('position');
    }


    public function active_children()
    {
        return $this->hasMany(Taxonomy::class, 'parent_id')->where('active', 1)->orderBy('position');
    }


    public function active_childCategories()
    {
        return $this->hasMany(Taxonomy::class, 'parent_id')->where('active', 1)->orderBy('position')->orderBy('name')->with('active_children');
    }


    public static function recount_posts($type)
    {
        $taxonomy_terms = TaxonomyTerm::where('post_type', $type)->where('active', 1)->get();
        foreach ($taxonomy_terms as $taxonomy_term) {
            $taxonomy_name = $taxonomy_term->taxonomy;

            $taxonomies = Taxonomy::where('taxonomy', $taxonomy_name)->get();
            foreach ($taxonomies as $taxonomy) {
                $count_posts = PostTaxonomy::where('taxonomy_id', $taxonomy->id)->whereHas('post', function ($query) {
                    $query->where('status', 'like', 'published');
                })->count();

                Taxonomy::where('id', $taxonomy->id)->update(
                    ['count_posts' => $count_posts]
                );
            }
        }
    }
}
