<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Web;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Post;
use App\Models\PostType;
use App\Models\PostTypeTaxonomy;
use App\Models\PostMeta;
use App\Models\PostTaxonomy;
use App\Models\PostTaxonomyContent;
use App\Models\Language;
use App\Functions\PostFunctions;

class ContentController extends Controller
{

    public static function get_theme_path() {}


    /*
        /xxx-xxx
        post type OR posts type taxonomy
        Ex:
        /devices
        /posts/categories
    */
    public function level1(Request $request)
    {

        $slug = $request->slug;


        // 1. Check for custom post type        
        $post_type = PostType::where('type', $slug)->where('active', 1)->first();
        if ($post_type) {
            // POST TYPE

            // Get post type taxonomies
            $post_type_nav_items = TaxonomyTerm::get_hierarchical_taxonomies($post_type->type);

            // Get posts
            $posts = Post::with('author', 'taxonomies')->where('type', $post_type->type)->where('status', 'published')->whereNull('deleted_at')->orderByDesc('id')->paginate(24);

            return view(get_active_theme_view() . ($post_type->custom_tpl_file ?? 'type'), [

                'post_type' => $post_type,
                'post_type_nav_items' => $post_type_nav_items,
                'portal_section' => $post_type->type ?? null,
                'posts' => $posts,

            ]);
        } else {
            // 2. Check for post type taxonomy            

            $post_type_taxonomy = PostTaxonomy::with('active_language_content')
                ->whereHas('active_language_content', function ($query) use ($slug) {
                    $query->where(['slug' => $slug]);
                })
                ->where('active', 1)
                ->first();

            if ($post_type_taxonomy) {
                // POSTS TAXONOMY
                return view(get_active_theme_view() . ($custom_tpl_file ?? 'taxonomy'), [
                    'taxonomy' => $taxonomy,

                ]);
            }
        }

        // 3. Check if PAGE
        $page = Post::with('active_language_content', 'post_type')
            ->whereHas('active_language_content', function ($query) use ($slug) {
                $query->where(['slug' => $slug]);
            })
            ->whereHas('post_type', function ($query) {
                $query->where(['type' => 'page']);
            })
            ->where('status', 'published')
            ->first();

        if ($page) {
            $page->summary = $page->active_language_content->summary ?? null;
            $page->meta_title = $page->active_language_content->meta_title ?? $page->active_language_content->title;
            $page->meta_description = $page->active_language_content->meta_description ?? (substr($page->active_language_content->summary, 0, 200) ?? null);
            $page->author_name = $page->user->name;
            $page->author_avatar = $page->user->avatar_media_id;
            if ($page->blocks) $content_blocks = json_decode($page->blocks);

            // check for custom tpl file
            $custom_tpl_file = PostMeta::get_meta($page->id, 'custom_tpl_file') ?? null;

            //return view(get_active_theme_view() . ($custom_tpl_file ?? 'page'), [
            return view('web.' . ($custom_tpl_file ?? 'page'), [
                'page' => $page,
                'content_blocks' => $content_blocks ?? array(),
            ]);
        }

        // Nothing above
        abort(404);
    }



    /*       
        /post-type-slug/xxx-xxx
        post OR taxonomy (from post type) OR page with parent
        Ex:
        /posts/this-is-a-blog-post (post)
        /devices/this-is-an-post-article-in-devices-post-type (post)
        /posts/category (taxonomy)
        /about/company (page with parent, where "about" is a page and "company" is another page (child of "about" page))
    */
    public function level2(Request $request)
    {

        $slug1 = $request->slug1;
        $slug2 = $request->slug2;

        // 1. Check for taxonomy from post type               
        $post_type = PostType::with('active_language_content')
            ->whereHas('active_language_content', function ($query) use ($slug1) {
                $query->where(['slug' => $slug1]);
            })
            ->where('active', 1)
            ->first();

        if ($post_type) {
            $post_type_taxonomy = PostTaxonomy::with('active_language_content')
                ->whereHas('active_language_content', function ($query) use ($slug2) {
                    $query->where(['slug' => $slug2]);
                })
                ->where('active', 1)
                ->first();

            if ($post_type_taxonomy) {
                // taxonomy
                return view($this->theme_views_path . '.type-taxonomy', [
                    'portal_section' => $post_type->type ?? null,
                    'taxonomy_section' => $type_taxonomy->slug ?? null,
                    'post_type' => $post_type,
                    'type_taxonomy' => $type_taxonomy,
                ]);
            } else {
                //post
                $post = Post::with('taxonomies', 'active_language_content')
                    ->whereHas('active_language_content', function ($query) use ($slug2) {
                        $query->where(['slug' => $slug2]);
                    })
                    ->where('post_type_id', $post_type->id)
                    ->where('status', 'published')
                    ->first();

                if ($post) {

                    $post->title = $post->active_language_content->title;
                    $post->summary = $post->active_language_content->summary;
                    $post->image = image($post->media_id);
                    $post->author_name = $post->user->name;
                    $post->author_avatar = $post->user->avatar_media_id;

                    if ($post->blocks) $content_blocks = json_decode($post->blocks);

                    // Get post type taxonomies (userin nav menu)
                    $post_type_nav_items = PostTypeTaxonomy::get_hierarchical_taxonomies($post_type->id);

                    // Get post main hierarchical taxonomy (userin nav menu active)
                    $post_main_hierarchical_taxonomy = Post::get_main_hierarchical_taxonomy($post) ?? null;

                    // related
                    $related_posts = Post::with('post_type', 'taxonomies')->where('post_type_id', $post_type->id)->where('status', 'published')->where('id', '!=', $post->id ?? null)->orderByDesc('id')->limit(5)->get();

                    // update hits
                    Post::where('id', $post->id)->increment('hits');

                    return view('web.' . ($custom_tpl_file ?? 'post'), [                    
                        'taxonomy_section' => $post_main_hierarchical_taxonomy->slug ?? null,
                        'post_type' => $post_type,
                        'post_main_hierarchical_taxonomy' => $post_main_hierarchical_taxonomy,
                        'post' => $post,
                        'related_posts' => $related_posts,
                        'post_type_nav_items' => $post_type_nav_items,
                        'content_blocks' => $content_blocks ?? [],
                    ]);
                }
            }
        }
        /*
        else {
            // 2. Check for post article
            $posts_category = Taxonomy::where('slug', $slug1)->where('taxonomy', 'category')->where('active', 1)->first();
            if ($posts_category) {
                $post = Post::where('slug', $slug2)->where('status', 'published')->first();
                // POSTS CATEGORY
                return view('web.post', [
                    'posts_category' => $posts_category,
                    'post' => $post,
                ]);
            }
        }
        */


        // 3. Check if PAGE with parent
        $parent_page = Post::with('post_type', 'active_language_content')
            ->whereHas('post_type', function ($query) {
                $query->where('type', 'page');
            })
            ->whereHas('active_language_content', function ($query) use ($slug1) {
                $query->where('slug', $slug1);
            })
            ->where('status', 'published')->first();
        if ($parent_page) {
            $page = Post::where('type', 'page')->where('slug', $slug2)->where('parent_id', $parent_page->id)->where('status', 'published')->first();
            if ($page) {
                if ($page->blocks) $content_blocks = unserialize($page->blocks);
                return view($this->theme_views_path . '.page', [
                    'post' => $page,
                    'parent_page' => $parent_page,
                    'content_blocks' => $content_blocks ?? array(),
                ]);
            }
        }

        abort(404);
    }



    /*       
    post article from custom post type        
    */
    public function level3(Request $request)
    {

        $slug1 = $request->slug1; // post type
        $slug2 = $request->slug2; // post type taxonomy
        $slug3 = $request->slug3; // taxonomy

        if ($slug1 == 'storage') abort(404);

        $url_path = $slug1 . '/' . $slug2 . '/' . $slug3;

        $post_taxonomy_content = PostTaxonomyContent::where(['url_path' => $url_path, 'lang_id' => $this->get_active_language_id()])->first();
        if (! $post_taxonomy_content) abort(404);

        $post_taxonomy = PostTaxonomy::where('id', $post_taxonomy_content->post_taxonomy_id)->where('active', 1)->first();
        if (! $post_taxonomy) abort(404);

        $post_type = PostType::where('id', $post_taxonomy->post_type_id)->where('active', 1)->first();
        if (! $post_taxonomy) abort(404);

        // Get posts
        $posts = Post::with('user', 'active_language_content', 'taxonomies')->where([
            'post_type_id' => $post_type->id,
            'status' => 'published',
        ])->whereHas('taxonomies', function ($query) use ($post_taxonomy) {
            $query->where('post_taxonomy_id', $post_taxonomy->id);
        })
            ->orderByDesc('id')->paginate(24);

        foreach ($posts as $post) {
            $post->title = $post->active_language_content->title;
            $post->summary = $post->active_language_content->summary;
            $post->image = image($post->media_id, 'thumb');
            $post->author_name = $post->user->name;
            $post->author_avatar = $post->user->avatar;
            $post->url = PostFunctions::get_post_url($post->id, Language::get_active_language()->id);
        }

        return view(get_active_theme_view() . ($custom_tpl_file ?? 'taxonomy'), [
            'posts' => $posts,
            'post_type' => $post_type,
            'post_taxonomy' => $post_taxonomy,
        ]);
    }



    /**
     *  Show post
     */
    public function show(Request $request)
    {
        $slug = $request->slug;
        $taxonomy_slug = $request->taxonomy_slug; // Not used in pages. Used in posts or custom post types

        if (!$slug) abort(404);

        $post = Post::with('author', 'taxonomies')->whereNull('deleted_at')
            ->where('status', 'published')
            ->where('slug', $slug)
            ->first();

        if (!$post) abort(404);

        if ($post->type != 'page' && !$taxonomy_slug) abort(404);

        // update hits
        Post::where('id', $post->id)->increment('hits');

        // POST DETAILS
        $post->meta_title = PostMeta::get_meta($post->id, 'meta_title');
        $post->meta_description = PostMeta::get_meta($post->id, 'meta_description');
        $post->disable_comments = PostMeta::get_meta($post->id, 'disable_comments');
        $post->disable_likes = PostMeta::get_meta($post->id, 'disable_likes');
        if (!$post->meta_title) $post->meta_title = $post->title;
        if (!$post->meta_description) $post->meta_description = $post->meta_title ?? $post->title;

        if ($post->blocks) $content_blocks = unserialize($post->blocks);

        // POST TYPE - POST
        if ($post->type == 'post') $taxonomy_term = 'category';

        // POST TYPE - CUSTOM POST TYPE
        elseif ($post->type != 'page') {
            $taxonomy_term = PostTaxonomy::where('post_id', $post->id)->value('taxonomy_term');

            $taxonomy = Taxonomy::where('slug', $taxonomy_slug)->where('taxonomy', $taxonomy_term)->where('active', 1)->first();
            if (!$taxonomy) return redirect(route('home2'));

            $tags = PostTagItem::with('tag')->where('post_id', $post->id)->get();
        }


        $metas = PostMeta::where('post_id', $post->id)->pluck('value', 'name')->toArray();

        if ($post->type == 'page') $view_file = 'page';
        else $view_file = 'post';

        return view($view_file, [
            'post' => $post,

            // Variables to use in the template file:
            'the_ID' => $post->id,
            'the_title' => $post->title,
            'the_meta_title' => $post->meta_title,
            'the_meta_description' => $post->meta_description,
            'the_meta' => $metas, // Array
            'the_summary' => $post->summary,
            'the_slug' => $post->slug, // String
            'the_content_blocks' => $content_blocks ?? array(),
            'the_image' => $post->image, // String (image file code)
            'the_permalink' => $post->url,
            'the_tags' => $tags ?? null,
            'the_comments' => $comments,
            'the_comments_count' => $post->comment_count ?? 0,
            'the_likes_count' => $post->like_count ?? 0,
            'the_hits_count' => $post->hits ?? 0,
            'the_related' => $related_posts ?? null,
            'the_post_type' => $post->type,
            'the_taxonomy_name' => $post->type,
            'the_taxonomy_url' => $post->type,
            'the_taxonomy_ID' => $post->type,
            'the_taxonomies' => $post->type,
            'the_author_name' => $post->type,
            'the_author_profile_url' => $post->type,
            'the_author_role' => $post->type,
            'the_author_avatar' => $post->type,
            'the_author_avatar_icon' => $post->type,
            'the_search_terms' => $post->search_terms,
            'the_custom_fields' => $post->search_terms,
            'the_created_at' => $post->created_at,
            'the_updated_at' => $post->updated_at,
            'the_config_is_sticky' => $post->sticky,
            'the_config_comments_disabled' => $post->disable_comments,
            'the_config_likes_disabled' => $post->disable_likes,
        ]);
    }



    /**
     * Search results
     */
    public function search(Request $request)
    {

        $s = $request->s;

        if ($s) {
            $posts = Post::with('author', 'taxonomies', 'post_type')
                ->whereNull('deleted_at')
                ->where('status', 'published')
                ->where(function ($query) use ($s) {
                    $query->where('title', 'like', "%$s%")
                        ->orWhere('search_terms', 'like', "%$s%");
                });

            $posts = $posts->orderBy('posts.sticky', 'desc')
                ->orderBy('posts.id', 'desc')
                ->paginate(24);
        }

        return view($this->theme_views_path . '.search', [
            'posts' => $posts ?? null,
            's' => $s,
        ]);
    }



    public static function get_active_language_id()
    {
        return Language::get_active_language()->id;
    }
}
