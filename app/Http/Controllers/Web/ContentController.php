<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Web;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Post;
use App\Models\PostType;
use App\Models\PostMeta;
use App\Models\PostTaxonomy;
use App\Models\PostContent;
use App\Models\Taxonomy;
use App\Models\TaxonomyTerm;
use App\Models\Config;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Cookie;
use Auth;

class ContentController extends Controller
{

    public function __construct()
    {
        //$this->theme_views_path = 'web.' . Config::config()->active_theme ?? 'default';
        $this->theme_views_path = 'web.builder';
    }


    /*
        /xxx-xxx
        post type OR posts category
        Ex:
        /devices
        /lifestyle
    */
    public function level1(Request $request)
    {

        $slug = $request->slug;


        // 1. Check for custom post type        
        $post_type = PostType::where('type', $slug)->where('active', 1)->first();
        if ($post_type) {
            // POST TYPE

            // Get post type taxonomies
            $post_type_nav_items = TaxonomyTerm::get_hierarchical_taxonomies($post_type->type);

            // Get posts
            $posts = Post::with('author', 'taxonomies')->where('type', $post_type->type)->where('status', 'published')->whereNull('deleted_at')->orderByDesc('id')->paginate(24);

            return view($this->theme_views_path . '.' . ($post_type->custom_tpl_file ?? 'type'), [

                'post_type' => $post_type,
                'post_type_nav_items' => $post_type_nav_items,
                'portal_section' => $post_type->type ?? null,
                'posts' => $posts,

            ]);
        } else {
            // 2. Check for posts taxonomy (category)
            $posts_category = Taxonomy::where('taxonomy', $slug)->where('taxonomy', 'category')->where('active', 1)->first();
            if ($posts_category) {
                // POSTS CATEGORY
                return view($this->theme_views_path . '.post-taxonomy', [
                    'portal_section' => $post_type->type ?? null,
                    'posts_category' => $posts_category,

                ]);
            }
        }

        // 3. Check if PAGE
        $post_content = PostContent::where('slug', $slug)->first();
        if ($post_content) {
            $post = Post::find($post_content->post_id);
            if ($post && $post->status == 'published' && $post->type == 'page') {
                if ($post->blocks) $content_blocks = unserialize($post->blocks);
                // check for custom tpl file
                $custom_tpl_file = PostMeta::get_meta($post->id, 'custom_tpl_file') ?? null;

                return view($this->theme_views_path . '.' . ($custom_tpl_file ?? 'page'), [
                    'post' => $post,
                    'content_blocks' => $content_blocks ?? array(),
                ]);
            }
        }

        // Nothing above
        abort(404);
    }



    /*       
        /post-type-slug/xxx-xxx
        post article OR taxonomy from post type OR page with parent
        Ex:
        /posts/top-10-alimente (article)
        /devices/iphone14-plus (article)
        /posts/category (taxonomy)
        /about/company (page with parent)
    */
    public function level2(Request $request)
    {

        $slug1 = $request->slug1;
        $slug2 = $request->slug2;

        // 1. Check for taxonomy from custom post type   
        $post_type = PostType::where('type', $slug1)->where('active', 1)->first();
        if ($post_type) {
            $type_taxonomy = Taxonomy::with('active_language_content')
                ->whereHas('active_language_content', function ($query) use ($slug2) {
                    $query->where(['slug' => $slug2]);
                })
                ->where('active', 1)
                ->first();
            if ($type_taxonomy) {
                // taxonomy
                return view($this->theme_views_path . '.type-taxonomy', [
                    'portal_section' => $post_type->type ?? null,
                    'taxonomy_section' => $type_taxonomy->slug ?? null,
                    'post_type' => $post_type,
                    'type_taxonomy' => $type_taxonomy,
                ]);
            } else {
                //post
                $post = Post::with('taxonomies', 'active_language_content')
                    ->whereHas('active_language_content', function ($query) use ($slug2) {
                        $query->where(['slug' => $slug2]);
                    })
                    ->where('type', $post_type->type)
                    ->where('status', 'published')
                    ->first();
                if ($post) {

                    $post->title = $post->active_language_content->title;
                    $post->summary = $post->active_language_content->summary;
                    $post->image = image($post->media_id);
                    $post->author_name = $post->user->name;
                    $post->author_avatar = $post->user->avatar;

                    if ($post->blocks) $content_blocks = unserialize($post->blocks);                    

                    // Get post type taxonomies (userin nav menu)
                    $post_type_nav_items = TaxonomyTerm::get_hierarchical_taxonomies($post_type->type);

                    // Get post main hierarchical taxonomy (userin nav menu active)
                    $post_main_hierarchical_taxonomy = Post::get_main_hierarchical_taxonomy($post) ?? null;

                    // related
                    $related_posts = Post::with('post_type', 'taxonomies')->where('type', $post_type->type)->where('status', 'published')->where('id', '!=', $post->id ?? null)->orderByDesc('id')->limit(5)->get();

                    // update hits
                    Post::where('id', $post->id)->increment('hits');

                    return view('themes.' . $this->get_active_theme() . '.post', [
                        'taxonomy_section' => $post_main_hierarchical_taxonomy->slug ?? null,
                        'post_type' => $post_type,
                        'post_main_hierarchical_taxonomy' => $post_main_hierarchical_taxonomy,
                        'post' => $post,
                        'related_posts' => $related_posts,
                        'post_type_nav_items' => $post_type_nav_items,
                        'content_blocks' => $content_blocks ?? array(),
                    ]);
                }
            }
        }
        /*
        else {
            // 2. Check for post article
            $posts_category = Taxonomy::where('slug', $slug1)->where('taxonomy', 'category')->where('active', 1)->first();
            if ($posts_category) {
                $post = Post::where('slug', $slug2)->where('status', 'published')->first();
                // POSTS CATEGORY
                return view('web.post', [
                    'posts_category' => $posts_category,
                    'post' => $post,
                ]);
            }
        }
        */


        // 3. Check if PAGE with parent
        $parent_page = Post::where('type', 'page')->where('slug', $slug1)->where('status', 'published')->first();
        if ($parent_page) {
            $page = Post::where('type', 'page')->where('slug', $slug2)->where('parent_id', $parent_page->id)->where('status', 'published')->first();
            if ($page) {
                if ($page->blocks) $content_blocks = unserialize($page->blocks);
                return view($this->theme_views_path . '.page', [
                    'post' => $page,
                    'parent_page' => $parent_page,
                    'content_blocks' => $content_blocks ?? array(),
                ]);
            }
        }

        abort(404);
    }



    /*       
    post article from custom post type        
    */
    public function level3(Request $request)
    {

        $slug1 = $request->slug1; // post type
        $slug2 = $request->slug2; // taxonomy term
        $slug3 = $request->slug3; // taxonomy

        $post_type = PostType::where('slug', $slug1)->where('active', 1)->first();
        if ($post_type) {
            $taxonomy_term = TaxonomyTerm::where('slug', $slug2)->where('post_type', $post_type->type)->where('active', 1)->first();
            if (! $taxonomy_term) abort(404);

            //dd($taxonomy_term);

            $taxonomy = Taxonomy::where('slug', $slug3)->where('taxonomy', $taxonomy_term->taxonomy)->where('active', 1)->first();
            if (! $taxonomy) abort(404);

            // Get posts
            $posts = Post::with('author', 'taxonomies')->where([
                'type' => $post_type->type,
                'status' => 'published',
            ])->whereHas('taxonomies', function ($query) use ($taxonomy) {
                $query->where('taxonomy_id', $taxonomy->id);
            })
                ->whereNull('deleted_at')->orderByDesc('id')->paginate(24);

            $top_posts = Post::with('author', 'taxonomies')->where([
                'type' => $post_type->type,
                'status' => 'published',
            ])->whereHas('taxonomies', function ($query) use ($taxonomy) {
                $query->where('taxonomy_id', $taxonomy->id);
            })
                ->whereNull('deleted_at')->orderByDesc('hits')->orderByDesc('id')->limit(10)->get();

            // Get post type taxonomies (used in nav menu)
            $post_type_nav_items = TaxonomyTerm::get_hierarchical_taxonomies($post_type->type);

            if ($taxonomy) {
                return view($this->theme_views_path . '.taxonomy', [
                    'portal_section' => $post_type->type ?? null,
                    'taxonomy_section' => $taxonomy->slug ?? null,
                    'post_type_nav_items' => $post_type_nav_items,
                    'post_type' => $post_type,
                    'taxonomy_term' => $taxonomy_term,
                    'taxonomy' => $taxonomy,
                    'posts' => $posts,
                    'top_posts' => $top_posts,
                ]);
            }
        }

        abort(404);
    }

    /**
     * Al posts from a category slug
     *
     * @return \Illuminate\Http\Response
     */
    public function categ(Request $request)
    {

        $categ_slug = $request->categ_slug;

        $categ = PostCateg::where('slug', $categ_slug)->where('active', 1)->first();
        if (!$categ) return redirect(route('home'));

        $categ_tree_ids = $categ->tree_ids ?? null;
        if ($categ_tree_ids) $categ_tree_ids_array = explode(',', $categ_tree_ids);

        $posts = Post::with('author', 'category')->whereNull('deleted_at')
            ->whereHas('category', function ($query) {
                $query->where('active', 1);
            })
            ->where('status', 'published')
            ->whereIn('posts.categ_id', $categ_tree_ids_array)
            ->orderByDesc('featured')
            ->orderByDesc('posts.id')
            ->paginate(Config::config()->posts_per_page ?? 12);

        return view('category', [
            'posts' => $posts,
            'categ' => $categ,
        ]);
    }


    /**
     *  Show post
     */
    public function show(Request $request)
    {
        $slug = $request->slug;
        $taxonomy_slug = $request->taxonomy_slug; // Not used in pages. Used in posts or custom post types

        if (!$slug) abort(404);

        $post = Post::with('author', 'taxonomies')->whereNull('deleted_at')
            ->where('status', 'published')
            ->where('slug', $slug)
            ->first();

        if (!$post) abort(404);

        if ($post->type != 'page' && !$taxonomy_slug) abort(404);

        // update hits
        Post::where('id', $post->id)->increment('hits');

        // POST DETAILS
        $post->meta_title = PostMeta::get_meta($post->id, 'meta_title');
        $post->meta_description = PostMeta::get_meta($post->id, 'meta_description');
        $post->disable_comments = PostMeta::get_meta($post->id, 'disable_comments');
        $post->disable_likes = PostMeta::get_meta($post->id, 'disable_likes');
        if (!$post->meta_title) $post->meta_title = $post->title;
        if (!$post->meta_description) $post->meta_description = $post->meta_title ?? $post->title;

        if ($post->blocks) $content_blocks = unserialize($post->blocks);

        // POST TYPE - POST
        if ($post->type == 'post') $taxonomy_term = 'category';

        // POST TYPE - CUSTOM POST TYPE
        elseif ($post->type != 'page') {
            $taxonomy_term = PostTaxonomy::where('post_id', $post->id)->value('taxonomy_term');

            $taxonomy = Taxonomy::where('slug', $taxonomy_slug)->where('taxonomy', $taxonomy_term)->where('active', 1)->first();
            if (!$taxonomy) return redirect(route('home2'));

            $tags = PostTagItem::with('tag')->where('post_id', $post->id)->get();
        }


        /*
        $related_posts = Post::where('id', '!=', $post->id)
            ->whereNull('deleted_at')
            ->where('status', 'published')
            ->orderByDesc('featured')
            ->orderByDesc('id')
            ->where('categ_id', $post->categ_id)
            ->limit(6)
            ->get();
        */

        $comments = PostComment::with('author')->where('post_id', $post->id)->where('status', 'active');
        if ((Config::config()->posts_comments_order ?? null) == 'old')
            $comments = $comments->orderBy('id', 'asc');
        else
            $comments = $comments->orderBy('id', 'desc');
        $comments = $comments->paginate(Config::config()->posts_comments_per_page ?? 25);

        $metas = PostMeta::where('post_id', $post->id)->pluck('value', 'name')->toArray();

        if ($post->type == 'page') $view_file = 'page';
        else $view_file = 'post';

        return view($view_file, [
            'post' => $post,

            // Variables to use in the template file:
            'the_ID' => $post->id,
            'the_title' => $post->title,
            'the_meta_title' => $post->meta_title,
            'the_meta_description' => $post->meta_description,
            'the_meta' => $metas, // Array
            'the_summary' => $post->summary,
            'the_slug' => $post->slug, // String
            'the_content_blocks' => $content_blocks ?? array(),
            'the_image' => $post->image, // String (image file code)
            'the_permalink' => $post->url,
            'the_tags' => $tags ?? null,
            'the_comments' => $comments,
            'the_comments_count' => $post->comment_count ?? 0,
            'the_likes_count' => $post->like_count ?? 0,
            'the_hits_count' => $post->hits ?? 0,
            'the_related' => $related_posts ?? null,
            'the_post_type' => $post->type,
            'the_taxonomy_name' => $post->type,
            'the_taxonomy_url' => $post->type,
            'the_taxonomy_ID' => $post->type,
            'the_taxonomies' => $post->type,
            'the_author_name' => $post->type,
            'the_author_profile_url' => $post->type,
            'the_author_role' => $post->type,
            'the_author_avatar' => $post->type,
            'the_author_avatar_icon' => $post->type,
            'the_search_terms' => $post->search_terms,
            'the_custom_fields' => $post->search_terms,
            'the_created_at' => $post->created_at,
            'the_updated_at' => $post->updated_at,
            'the_config_is_sticky' => $post->sticky,
            'the_config_comments_disabled' => $post->disable_comments,
            'the_config_likes_disabled' => $post->disable_likes,
        ]);
    }



    /**
     * Search results
     */
    public function search(Request $request)
    {

        $s = $request->s;

        if ($s) {
            $posts = Post::with('author', 'taxonomies', 'post_type')
                ->whereNull('deleted_at')
                ->where('status', 'published')
                ->where(function ($query) use ($s) {
                    $query->where('title', 'like', "%$s%")
                        ->orWhere('search_terms', 'like', "%$s%");
                });

            $posts = $posts->orderBy('posts.sticky', 'desc')
                ->orderBy('posts.id', 'desc')
                ->paginate(24);
        }

        return view($this->theme_views_path . '.search', [
            'posts' => $posts ?? null,
            's' => $s,
        ]);
    }


    /**
     * Al posts from a tag slug
     *
     * @return \Illuminate\Http\Response
     */
    public function tag(Request $request)
    {

        $slug = $request->slug;

        $tag = PostTag::where('slug', $slug)->first();
        if (!$tag) return redirect(route('home'));

        $posts = PostTagItem::with('post')
            ->whereHas('post', function ($query) {
                $query->where('status', 'published')->whereNull('deleted_at');
            })
            ->where('tag_id', $tag->id)
            ->paginate(Config::config()->posts_per_page ?? 12);

        return view('tag', [
            'tag' => $tag,
            'posts' => $posts,
        ]);
    }


    /**
     * Process comment
     */
    public function comment(Request $request)
    {
        $categ_slug = $request->categ_slug;
        $slug = $request->slug;
        $id = $request->id;
        if (!$categ_slug || !$slug) return redirect(route('home'));

        $inputs = $request->all(); // retrieve all of the input data as an array      

        $post = Post::with('author', 'category')->whereNull('deleted_at')
            ->whereHas('category', function ($query) use ($categ_slug) {
                $query->where('active', 1)->where('slug', $categ_slug);
            })
            ->where('status', 'published')
            ->where('slug', $slug)
            ->first();

        //if (!$post) return redirect(route('home'));
        if (!$post) abort(404);


        // check if global comments is disabled
        if (Config::config()->posts_comments_disabled ?? null) return redirect(route('post', ['categ_slug' => $categ_slug, 'slug' => $slug]) . '#comments');

        // check if comment is disabled
        if ($post->disable_comments ?? null) return redirect(route('post', ['categ_slug' => $categ_slug, 'slug' => $slug]) . '#comments');

        // check if login is required
        if ((Config::config()->posts_comments_require_login ?? null) && !Auth::check()) return redirect(route('post', ['categ_slug' => $categ_slug, 'slug' => $slug]) . '#comments')->with('error', 'login_required');

        // check antispam 
        if (Config::config()->posts_comments_antispam_enabled ?? null) {
            // Build POST request:
            $recaptcha_url = 'https://www.google.com/recaptcha/api/siteverify';
            $recaptcha_secret = Core::config()->google_recaptcha_secret_key ?? null;
            $recaptcha_response = $request->recaptcha_response;

            // Make and decode POST request:
            $recaptcha = file_get_contents($recaptcha_url . '?secret=' . $recaptcha_secret . '&response=' . $recaptcha_response);
            $recaptcha = json_decode($recaptcha);

            // Take action based on the score returned:
            if ($recaptcha->success) {
                if ($recaptcha->score < 0.5) return redirect(route('post', ['lang' => $request->lang, 'categ_slug' => $categ_slug, 'slug' => $slug]) . '#comments')->with('error', 'recaptcha_error');
            } else return redirect(route('post', ['lang' => $request->lang, 'categ_slug' => $categ_slug, 'slug' => $slug]) . '#comments')->with('error', 'recaptcha_error');
        }

        $validator = Validator::make($request->all(), [
            'name' => 'required',
            'email' => 'email',
            'comment' => 'required',
        ]);

        if ($validator->fails()) {
            return redirect(route('post', ['categ_slug' => $categ_slug, 'slug' => $slug]))
                ->withErrors($validator)
                ->withInput();
        }

        if ((Config::config()->posts_comments_require_manual_approve ?? null)  && !Auth::check())
            $status = 'pending';
        else
            $status = 'active';

        PostComment::create([
            'post_id' => $post->id,
            'name' => $request->name,
            'email' => $request->email,
            'comment' => $request->comment,
            'status' => $status,
            'ip' => $request->ip(),
            'user_id' => Auth::user()->id ?? null
        ]);

        // recount comments
        Post::recount_post_comments($post->id);

        if ($status == 'active') $msg = 'comment_added';
        else $msg = 'comment_pending';

        return redirect(route('post', ['categ_slug' => $categ_slug, 'slug' => $slug]) . '#comments')->with('success', $msg);
    }


    /**
     * Process like
     */
    public function like(Request $request)
    {

        $post_id = $request->post_id;

        // check if global rating is disabled
        if (Config::config()->posts_likes_disabled ?? null) return response('like_disabled');

        // check if like is disabled
        $post = Post::find($post_id);
        if (!$post) return response('invalid_content');
        if ($post->disable_likes == 1) return response('like_disabled');

        $cookie = Cookie::get('post_like_' . $post_id);

        // check IP
        if (PostLike::where('post_id', $post_id)->where('ip', $request->ip())->exists()) return response('already_liked');

        if (!$cookie) {
            PostLike::create([
                'post_id' => $post_id,
                'user_id' => Auth::user()->id ?? null,
                'ip' => $request->ip(),
            ]);

            // recount likes
            Post::recount_post_likes($post_id);

            return response('liked')->cookie(
                'post_like_' . $post_id,
                1,
                60 * 24 * 30,
                '/'
            );
        } // end if not exist cookie
        else {
            return response('already_liked');
        }
    }




    public static function get_active_theme()
    {
        return Config::get_config('active_theme') ?? 'builder';
    }
}
