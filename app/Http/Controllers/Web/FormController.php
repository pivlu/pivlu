<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Web;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\BlockComponent;
use App\Models\FormField;
use App\Models\FormFieldData;
use App\Models\FormData;
use App\Functions\HelperFunctions;
use \PulkitJalan\IPGeolocation\IPGeolocation as GeoIP;

class FormController extends Controller
{


    /**
     * Process form
     */
    public function submit(Request $request)
    {
        $block_component_form = BlockComponent::where(['type' => 'form', 'id' => $request->id, 'active' => 1])->first();
        if (!$block_component_form) return redirect(route('home'));

        $inputs = $request->except(['_token', '_method']);

        $referer = request()->headers->get('referer');

        /*
        if($this->config()->contact_recaptcha_enabled ?? null == 1) {
            // Build POST request:
            $recaptcha_url = 'https://www.google.com/recaptcha/api/siteverify';
            $recaptcha_secret = $this->config->google_recaptcha_secret_key ?? null;
            $recaptcha_response = $request->recaptcha_response;

            // Make and decode POST request:
            $recaptcha = file_get_contents($recaptcha_url . '?secret=' . $recaptcha_secret . '&response=' . $recaptcha_response);
            $recaptcha = json_decode($recaptcha);

            // Take action based on the score returned:
            if ($recaptcha->success) {
                if($recaptcha->score < 0.5) return redirect($request->Url())->with('error', 'recaptcha_error');            
            }
            else return redirect($request->Url())->with('error', 'recaptcha_error');
        }
        */

        // get NAME field (if enabled) for this form 
        $field_id_name = FormField::where('block_component_id', $request->id)->where('is_default_name', 1)->value('id');
        $name = $inputs[$field_id_name] ?? null;

        // get EMAIL field (if enabled) for this form 
        $field_id_email = FormField::where('block_component_id', $request->id)->where('is_default_email', 1)->value('id');
        $email = $inputs[$field_id_email] ?? null;

        // get SUBJECT field (if enabled) for this form 
        $field_id_subject = FormField::where('block_component_id', $request->id)->where('is_default_subject', 1)->value('id');
        $subject = $inputs[$field_id_subject] ?? null;

        // get MESSAGE field (if enabled) for this form 
        $field_id_message = FormField::where('block_component_id', $request->id)->where('is_default_message', 1)->value('id');
        $message = $inputs[$field_id_message] ?? null;

        $anonymized_ip = HelperFunctions::anonymize($request->ip());
        $geo = new GeoIP();
        $geo->setIp('82.76.117.118');
        $geo_all = $geo->getRaw();
        $geo_cc = $geo_all['countryCode'] ?? null;
        $geo_country = $geo_all['country'] ?? null;
        $geo_region = $geo_all['region'] ?? null;
        $geo_city = $geo_all['city'] ?? null;
        $geo_region_name = $geo_all['regionName'] ?? null;
        $geo_data = ['country_code' => $geo_cc, 'country' => $geo_country, 'region' => $geo_region, 'city' => $geo_city, 'region_name' => $geo_region_name];

        $form_data = FormData::create([
            'block_component_id' => $request->id,
            'name' => $name ?? null,
            'email' => $email ?? null,
            'subject' => $subject ?? null,
            'message' => $message ?? null,
            'referer' => $referer ?? null,
            'created_at' =>  now(),
            'ip' => $anonymized_ip,
            'geo' => json_encode($geo_data, JSON_UNESCAPED_UNICODE),
            'source_lang_id' => $request->source_lang_id ?? null,
        ]);

        $fields = FormField::where('block_component_id', $request->id)->orderBy('position', 'asc')->get();

        foreach ($fields as $field) {
            if ($field->type == 'checkbox') {
                $value_key = $field->id ?? null;
                if (isset($inputs[$value_key])) $value = json_encode($inputs[$value_key]);
                else $value = null;
            } elseif ($field->type == 'file') {
                if ($request->hasFile($field->id)) {
                    $media = FileFunctions::store_image($request->file($field->id));
                    if ($media) {
                        $value = $media->id;                        
                    }
                }
                
            } else {
                $value_key = $field->id;
                $value = $inputs[$value_key] ?? null;
            }

            $field = FormFieldData::create([
                'block_component_id' => $request->id,
                'form_data_id' => $form_data->id,
                'field_id' => $field->id,
                'value' => $value ?? null,
            ]);
        }

        if ($referer ?? null) {
            $goToSection = $referer . '#block-' . $request->block_id ?? null;
            return redirect($goToSection)->with('success', 'form_submited');
        } else return redirect(route('home'))->with('success', 'form_submited');
    }
}
