<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;

use App\Models\Form;
use App\Models\FormData;
use App\Models\FormField;
use App\Models\FormFieldData;
use App\Models\FormConfig;

class FormController extends Controller
{

    /**
     * Show all forms
     */
    public function index()
    {

        $forms = Form::orderByDesc('active')->orderByDesc('label')->paginate(25);

        return view('admin.index', [
            'view_file' => 'admin.forms.index',
            'active_menu' => 'forms',
            'forms' => $forms,
        ]);
    }

    /**
     * Show form
     */
    public function show(Request $request)
    {
        $form = Form::find($request->id);
        if (!$form) return redirect(route('admin.forms.config'));

        $fields = FormField::where('form_id', $request->id)->orderByDesc('active')->orderBy('position')->get();        

        return view('admin.index', [
            'view_file' => 'admin.forms.show',
            'active_menu' => 'forms',
            'form' => $form,
            'fields' => $fields ?? null,
            'fields_size' => FormConfig::get_config($request->id, 'fields_size'),
            'confirmation_type' => FormConfig::get_config($request->id, 'confirmation_type'),
            'confirmation_title' => FormConfig::get_config($request->id, 'confirmation_title'),
            'confirmation_message' => FormConfig::get_config($request->id, 'confirmation_message'),
            'confirmation_css_class' => FormConfig::get_config($request->id, 'confirmation_css_class'),
            'google_recaptcha' => FormConfig::get_config($request->id, 'google_recaptcha'),
            'honeypot_name' => FormConfig::get_config($request->id, 'honeypot_name'),
        ]);
    }



    /**
     * Update form
     */
    public function update(Request $request)
    {        
        $validator = Validator::make($request->all(), [
            'label' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.forms.config'))->withErrors($validator)->withInput();

        if (Form::where(['label' => $request->label])->where('id', '!=', $request->id)->exists()) return redirect(route('admin.forms.config'))->with('error', 'duplicate');

        Form::where('id', $request->id)->update([
            'label' => $request->label,
            'active' => $request->has('active') ? 1 : 0,
        ]);

        FormConfig::update_config($request->id, 'fields_size', $request->fields_size);
        FormConfig::update_config($request->id, 'confirmation_type', $request->confirmation_type);
        FormConfig::update_config($request->id, 'confirmation_title', $request->confirmation_title);
        FormConfig::update_config($request->id, 'confirmation_message', $request->confirmation_message);
        FormConfig::update_config($request->id, 'confirmation_css_class', $request->confirmation_css_class);

        FormConfig::update_config($request->id, 'google_recaptcha', $request->has('google_recaptcha') ? 1 : null);
        FormConfig::update_config($request->id, 'honeypot_name', $request->honeypot_name);

        return redirect(route('admin.forms.config.show', ['id' => $request->id]))->with('success', 'updated');
    }


    /**
     * Remove form
     */
    public function destroy(Request $request)
    {
        $form = Form::find($request->id);
        if (!$form) return redirect(route('admin.forms.config'));        

        // check if exists messages        
        if (FormData::where('form_id', $request->id)->exists()) return redirect(route('admin.forms.config'))->with('error', 'exists_data');

        Form::where('id', $request->id)->delete();

        return redirect(route('admin.forms.config'))->with('success', 'deleted');
    }


    /**
     * Add form field 
     */
    public function add_field(Request $request)
    {
        $last_pos = FormField::where('form_id', $request->id)->orderByDesc('position')->value('position');
        $position = ($last_pos ?? 0) + 1;

        $form_field = FormField::create([
            'form_id' => $request->id,
            'type' => $request->type,
            'required' => $request->has('required') ? 1 : 0,
            'active' => $request->has('active') ? 1 : 0,
            'col_md' => $request->col_md ?? 12,
            'position' => $position,
        ]);

        foreach (admin_languages() as $lang) {
            FormFieldContent::create([
                'form_id' => $request->id,
                'field_id' => $form_field->id,
                'lang_id' => $lang->id,
                'label' => $request['label_' . $lang->id],
                'info' => $request['info_' . $lang->id],
                'dropdowns' => $request['dropdowns_' . $lang->id] ?? null
            ]);
        }

        return redirect(route('admin.forms.show', ['id' => $request->id]))->with('success', 'created');
    }


    /**
     * Update form field 
     */
    public function update_field(Request $request)
    {
        FormField::where('id', $request->field_id)->update([
            'type' => $request->type,
            'required' => $request->has('required') ? 1 : 0,
            'active' => $request->has('active') ? 1 : 0,
            'col_md' => $request->col_md ?? 12,
        ]);

        foreach (admin_languages() as $lang) {
            FormFieldContent::updateOrCreate(
                ['form_id' => $request->id, 'field_id' => $request->field_id, 'lang_id' => $lang->id],
                [
                    'label' => $request['label_' . $lang->id],
                    'info' => $request['info_' . $lang->id],
                    'dropdowns' => $request['dropdowns_' . $lang->id] ?? null
                ]
            );
        }

        return redirect(route('admin.forms.show', ['id' => $request->id]))->with('success', 'updated');
    }


    /**
     * Remove form field
     */
    public function destroy_field(Request $request)
    {
        if (FormField::where('id', $request->field_id)->value('protected') == 1) return redirect(route('admin.forms.config.show', ['id' => $request->id]))->with('error', 'protected');

        FormFieldContent::where('field_id', $request->field_id)->delete();
        FormFieldData::where('field_id', $request->field_id)->delete();
        FormField::where('id', $request->field_id)->delete();

        return redirect(route('admin.forms.show', ['id' => $request->id]))->with('success', 'deleted');
    }


    /**
     * Ajax sortable
     */
    public function sortable(Request $request)
    {
        $i = 0;
        $records = $request->all();

        foreach ($records['item'] as $key => $value) {
            FormField::where('form_id', $request->id)->where('id', $value)->update(['position' => $i]);
            $i++;
        }
    }


    /**
     * Display all messages
     */
    public function messages(Request $request)
    {
        // CHECK PERMISSION - view messages         
        if ($request->user()->cannot('view_forms_messages', [FormData::class])) return redirect(route('admin'))->with('error', 'no_permission');

        $search_form_id = $request->search_form_id;
        $search_terms = $request->search_terms;
        $search_status = $request->search_status;
        $search_replied = $request->search_replied;
        $search_important = $request->search_important;

        $messages = FormData::with('form');

        if ($search_form_id)
            $messages = $messages->where('form_id', $search_form_id);

        if ($search_status == 'unread')
            $messages = $messages->whereNull('read_at');
        if ($search_status == 'read')
            $messages = $messages->whereNotNull('read_at');

        if ($search_replied == 'yes')
            $messages = $messages->whereNotNull('responded_at');
        if ($search_replied == 'no')
            $messages = $messages->whereNull('responded_at');

        if ($search_important == '1')
            $messages = $messages->where('is_important', 1);

        if ($search_terms) $messages = $messages->where(function ($query) use ($search_terms) {
            $query->where('name', 'like', "%$search_terms%")
                ->orWhere('email', 'like', "%$search_terms%")
                ->orWhere('subject', 'like', "%$search_terms%");
        });

        $messages = $messages->orderByDesc('id')->paginate(25);

        $count_messages_unread = FormData::whereNull('read_at')->count();

        return view('admin.index', [
            'view_file' => 'admin.forms.messages',
            'active_menu' => 'forms',
            'search_form_id' => $search_form_id,
            'search_terms' => $search_terms,
            'search_status' => $search_status,
            'search_replied' => $search_replied,
            'search_important' => $search_important,
            'messages' => $messages,
            'count_messages_unread' => $count_messages_unread,
        ]);
    }


    /**
     * Show message     
     */
    public function show_message(Request $request)
    {

        // CHECK PERMISSION - view messages         
        if ($request->user()->cannot('view_forms_messages', [FormData::class])) return redirect(route('admin'))->with('error', 'no_permission');

        $message = FormData::where('id', $request->id)->with('form')->withTrashed()->first();
        if (!$message) return redirect(route('admin.forms'));

        $form = Form::find($message->form_id);
        if (!$form) return redirect(route('admin.forms.config'));

        FormData::where('id', $request->id)->update(['read_at' => now()]);

        $fields = FormFieldData::with('field', 'media')
            ->where('form_id', $form->id)
            ->where('form_data_id', $message->id)
            ->get();

        return view('admin.index', [
            'view_file' => 'admin.forms.message',
            'active_menu' => 'forms',
            'message' => $message,
            'form' => $form,
            'fields' => $fields,
            'geo' => json_decode($message->geo),
        ]);
    }


    /**
     * Move message to trash
     */
    public function message_to_trash(Request $request)
    {
        // CHECK PERMISSION - delete messages         
        if ($request->user()->cannot('delete_forms_messages', [FormData::class])) return redirect(route('admin'))->with('error', 'no_permission');

        FormData::where('id', $request->id)->delete(); // soft delete

        return redirect(route('admin.forms', ['pagenum' => $request->pagenum]))->with('success', 'moved_to_trash');
    }


    /**
     * Action for multiple messages selected
     */
    public function messages_multiple_action(Request $request)
    {
        if (!$request->messages_checkbox) return redirect(route('admin.forms', ['pagenum' => $request->pagenum]));

        foreach ($request->messages_checkbox as $message_id) {
            if ($request->action == 'read') {
                FormData::where('id', $message_id)->update(['read_at' => now()]);
            }
            if ($request->action == 'unread') {
                FormData::where('id', $message_id)->update(['read_at' => null]);
            }
            if ($request->action == 'important') {
                FormData::where('id', $message_id)->update(['is_important' => 1]);
            }
            if ($request->action == 'trash') {
                // CHECK PERMISSION - delete messages         
                if ($request->user()->cannot('delete_forms_messages', [FormData::class])) return redirect(route('admin'))->with('error', 'no_permission');

                FormData::where('id', $message_id)->delete();
            }
        }

        return redirect(route('admin.forms', ['pagenum' => $request->pagenum]))->with('success', 'updated');
    }


    /**
     * Mark message (important, normal...)
     */
    public function message_mark(Request $request)
    {
        if ($request->action == 'important') FormData::where('id', $request->id)->update(['is_important' => 1]);

        if ($request->action == 'not_important') FormData::where('id', $request->id)->update(['is_important' => 0]);

        if ($request->action == 'spam') FormData::where('id', $request->id)->update(['is_spam' => 1]);

        if ($request->action == 'not_spam') FormData::where('id', $request->id)->update(['is_spam' => 0]);

        return redirect(route('admin.forms.show', ['id' => $request->id]))->with('success', 'updated');
    }
}
