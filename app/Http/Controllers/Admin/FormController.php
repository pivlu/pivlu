<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use App\Models\Form;
use App\Models\FormField;
use App\Models\FormFieldContent;
use App\Models\FormFieldData;
use App\Models\FormData;
use App\Models\Language;

class FormController extends Controller
{

    /**
     * Show all resources
     */
    public function index()
    {

        $forms = Form::orderByDesc('is_contact_form')->orderByDesc('active')->orderByDesc('label')->paginate(25);

        return view('admin.index', [
            'view_file' => 'admin.forms.forms-config',
            'active_menu' => 'website',
            'active_submenu' => 'forms',
            'forms' => $forms,
        ]);
    }


    /**
     * Create form
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'label' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.forms.config'))->withErrors($validator)->withInput();

        if (Form::where(['label' => $request->label])->exists()) return redirect(route('admin.forms.config'))->with('error', 'duplicate');

        $form = Form::create([
            'label' => $request->label,
            'size' => $request->size ?? null,
            'active' => $request->has('active') ? 1 : 0,
            'recaptcha' => $request->has('recaptcha') ? 1 : 0,
        ]);

        // insert NAME field
        $field_name = FormField::create([
            'form_id' => $form->id,
            'type' => 'text',
            'required' => 1,
            'col_md' => 6,
            'active' => 1,
            'position' => 0,
            'protected' => 1,
            'is_default_name' => 1
        ]);
        foreach (admin_languages() as $lang) {
            FormFieldContent::create(['form_id' => $form->id, 'field_id' => $field_name->id, 'lang_id' => $lang->id, 'label' => 'Name']);
        }

        // insert EMAIL field
        $field_email = FormField::create([
            'form_id' => $form->id,
            'type' => 'email',
            'required' => 1,
            'col_md' => 6,
            'active' => 1,
            'position' => 1,
            'protected' => 1,
            'is_default_email' => 1
        ]);
        foreach (admin_languages() as $lang) {
            FormFieldContent::create(['form_id' => $form->id, 'field_id' => $field_email->id, 'lang_id' => $lang->id, 'label' => 'Email']);
        }

        // insert SUBJECT field
        $field_subject = FormField::create([
            'form_id' => $form->id,
            'type' => 'text',
            'required' => 1,
            'col_md' => 12,
            'active' => 1,
            'position' => 2,
            'protected' => 1,
            'is_default_subject' => 1
        ]);
        foreach (admin_languages() as $lang) {
            FormFieldContent::create(['form_id' => $form->id, 'field_id' => $field_subject->id, 'lang_id' => $lang->id, 'label' => 'Subject']);
        }

        // insert MESSAGE field
        $field_message = FormField::create([
            'form_id' => $form->id,
            'type' => 'textarea',
            'required' => 1,
            'col_md' => 12,
            'active' => 1,
            'position' => 3,
            'protected' => 1,
            'is_default_message' => 1
        ]);
        foreach (admin_languages() as $lang) {
            FormFieldContent::create(['form_id' => $form->id, 'field_id' => $field_message->id, 'lang_id' => $lang->id, 'label' => 'Message']);
        }

        return redirect(route('admin.forms.config'))->with('success', 'created');
    }


    /**
     * Show resource
     */
    public function show(Request $request)
    {
        $form = Form::find($request->id);
        if (!$form) return redirect(route('admin.forms.config'));

        $fields = FormField::where('form_id', $request->id)->orderByDesc('active')->orderBy('position')->get();

        return view('admin.index', [
            'view_file' => 'admin.forms.form-config',
            'active_menu' => 'website',
            'active_submenu' => 'forms',
            'form' => $form,
            'fields' => $fields,
        ]);
    }



    /**
     * Update form
     */
    public function update(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'label' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.forms.config'))->withErrors($validator)->withInput();

        if (Form::where(['label' => $request->label])->where('id', '!=', $request->id)->exists()) return redirect(route('admin.forms.config'))->with('error', 'duplicate');

        Form::where('id', $request->id)->update([
            'label' => $request->label,
            'size' => $request->size ?? null,
            'active' => $request->has('active') ? 1 : 0,
            'recaptcha' => $request->has('recaptcha') ? 1 : 0,
        ]);

        return redirect(route('admin.forms.config'))->with('success', 'updated');
    }


    /**
     * Remove form
     */
    public function destroy(Request $request)
    {
        $form = Form::find($request->id);
        if (!$form) return redirect(route('admin.forms.config'));
        if ($form->is_contact == 1) return redirect(route('admin.forms.config'));

        // check if exists messages        
        if (FormData::where('form_id', $request->id)->exists()) return redirect(route('admin.forms.config'))->with('error', 'exists_data');

        FormData::where('form_id', $request->id)->delete();
        FormField::where('form_id', $request->id)->delete();
        Form::where('id', $request->id)->delete();

        return redirect(route('admin.forms.config'))->with('success', 'deleted');
    }


    /**
     * Add form field 
     */
    public function add_field(Request $request)
    {        
        $last_pos = FormField::where('form_id', $request->id)->orderByDesc('position')->value('position');
        $position = ($last_pos ?? 0) + 1;

        $form_field = FormField::create([
            'form_id' => $request->id,
            'type' => $request->type,
            'required' => $request->has('required') ? 1 : 0,
            'active' => $request->has('active') ? 1 : 0,
            'col_md' => $request->col_md ?? 12,
            'position' => $position,
        ]);        

        foreach (admin_languages() as $lang) {
            FormFieldContent::create([
                'form_id' => $request->id,
                'field_id' => $form_field->id,
                'lang_id' => $lang->id,
                'label' => $request['label_' . $lang->id],
                'info' => $request['info_' . $lang->id],
                'dropdowns' => $request['dropdowns_' . $lang->id] ?? null
            ]);
        }

        return redirect(route('admin.forms.config.show', ['id' => $request->id]))->with('success', 'created');
    }


    /**
     * Update form field 
     */
    public function update_field(Request $request)
    {
        FormField::where('id', $request->field_id)->update([
            'type' => $request->type,
            'required' => $request->has('required') ? 1 : 0,
            'active' => $request->has('active') ? 1 : 0,
            'col_md' => $request->col_md ?? 12,
        ]);

        foreach (admin_languages() as $lang) {
            FormFieldContent::updateOrCreate(
                ['form_id' => $request->id, 'field_id' => $request->field_id, 'lang_id' => $lang->id],
                [
                    'label' => $request['label_' . $lang->id],
                    'info' => $request['info_' . $lang->id],
                    'dropdowns' => $request['dropdowns_' . $lang->id] ?? null
                ]
            );
        }

        return redirect(route('admin.forms.config.show', ['id' => $request->id]))->with('success', 'updated');
    }


    /**
     * Remove form field
     */
    public function destroy_field(Request $request)
    {        
        if (FormField::where('id', $request->field_id)->value('protected') == 1) return redirect(route('admin.forms.config.show', ['id' => $request->id]))->with('error', 'protected');

        FormFieldContent::where('field_id', $request->field_id)->delete();
        FormFieldData::where('field_id', $request->field_id)->delete();
        FormField::where('id', $request->field_id)->delete();

        return redirect(route('admin.forms.config.show', ['id' => $request->id]))->with('success', 'deleted');
    }


    /**
     * Ajax sortable
     */
    public function sortable(Request $request)
    {
        $i = 0;
        $records = $request->all();

        foreach ($records['item'] as $key => $value) {
            FormField::where('form_id', $request->id)->where('id', $value)->update(['position' => $i]);
            $i++;
        }
    }
}
