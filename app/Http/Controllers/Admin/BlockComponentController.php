<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;

use App\Models\BlockComponent;
use App\Functions\BlockComponentFunctions;

class BlockComponentController extends Controller
{
    public function index(Request $request)
    {

        return view('admin.index', [
            'view_file' => 'admin.blocks.index',
            'active_menu' => 'website',
            'active_submenu' => 'blocks',
        ]);
    }


    public function type(Request $request)
    {
        $type = $request->type ?? 'form';

        if (!($type == 'form' || $type == 'hero' || $type == 'slider' || $type == 'gallery'))
            return redirect(route('admin'));

        $items = BlockComponent::where('type', $type)->orderByDesc('active')->orderByDesc('id')->paginate(25);

        return view('admin.index', [
            'view_file' => 'admin.blocks.type',
            'active_menu' => 'website',
            'active_submenu' => 'blocks',
            'type' => $type,
            'items' => $items,
        ]);
    }


    public function show(Request $request)
    {
        $type = $request->type;

        $block = BlockComponent::where(['type' => $request->type, 'id' => $request->id])->first();
        if (!$block)
            return redirect(route('admin.block-components'));

        if ($request->referer)
            $referer = $request->referer;
        else
            $referer = request()->headers->get('referer');


        return view('admin.index', [
            'view_file' => 'admin.blocks.components.' . $type . '.index',
            'active_menu' => 'website',
            'active_submenu' => 'blocks',
            'type' => $type,
            'block' => $block,
            'referer' => $referer,
        ]);
    }


    /**
     * Create resource
     */
    public function store(Request $request)
    {

        $validator = Validator::make($request->all(), [
            'label' => 'required',
            'type' => ['required', Rule::in(['gallery', 'form', 'hero', 'slider'])]
        ]);

        if ($validator->fails())
            return redirect(route('admin.block-components'))->withErrors($validator)->withInput();

        $item = BlockComponent::create([
            'type' => $request->type,
            'label' => $request->label,
            'active' => $request->has('active') ? 1 : 0,
        ]);

        return redirect(route('admin.block-components.type', ['type' => $request->type]))->with('success', 'created');
    }


    /**
     * Update resource
     */
    public function update(Request $request)
    {

        $validator = Validator::make($request->all(), [
            'label' => 'required',
            'type' => ['required', Rule::in(['gallery', 'form'])]
        ]);

        if ($validator->fails())
            return redirect(route('admin.block-components'))->withErrors($validator)->withInput();

        $block = BlockComponent::find($request->id);
        if (!$block)
            return redirect(route('admin.block-components'));

        $block->update([
            'label' => $request->label,
            'active' => $request->has('active') ? 1 : 0,
        ]);

        BlockComponentFunctions::update_block_component($request->id, $request);

        return redirect(route('admin.block-components.block.show', ['id' => $block->id, 'type' => $request->type]))->with('success', 'updated');
    }



    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {

        $block = BlockComponent::find($request->id);
        if (!$block)
            return redirect(route('admin.block-components'));

        BlockComponent::where('id', $request->id)->delete();

        return redirect(route('admin.block-components.type', ['type' => $request->type]))->with('success', 'deleted');
    }
}
