<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use App\Models\PostTaxonomy;
use App\Models\PostType;
use App\Models\Taxonomy;
use App\Models\TaxonomyLang;
use App\Models\TaxonomyTerm;
use App\Models\Language;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use Auth;

class TaxonomyController extends Controller
{

    /**
     * Display all resources
     */
    public function index(Request $request)
    {

        $taxonomy = $request->taxonomy;
        $this->check_taxonomy_term_exists($taxonomy);

        $type = $request->type ?? 'post'; // post type
        $this->check_post_type_exists($type);

        $taxonomy_term = TaxonomyTerm::where(['taxonomy' => $taxonomy])->first();

        $taxonomy_terms = TaxonomyTerm::with('taxonomies')->where(['post_type' => $type, 'active' => 1, 'admin_filter' => 1])->orderBy('position')->get();

        $post_type = PostType::where(['type' => $type, 'active' => 1])->first();
        
        $search_terms = $request->search_terms;
        $count_items = Taxonomy::where('taxonomy', $taxonomy)->count();

        $items = Taxonomy::with('default_language_content')->where('taxonomy', $taxonomy)->whereNull('parent_id')->orderByDesc('active')->orderBy('position');

        if ($search_terms) $items = $items->where('name', 'like', "%$search_terms%");
        
        if ($taxonomy_term->hierarchical == 1) $items = $items->paginate(50);
        else $items = $items->paginate(10);

        return view('admin.index', [
            'view_file' => 'admin.posts.taxonomies',            
            'active_menu' => $type ?? null,
            'menu_section' => $taxonomy ?? 'category',
            'count_items' => $count_items,
            'search_terms' => $search_terms,
            'post_type' => $post_type ?? null, // Object
            'taxonomy_terms' => $taxonomy_terms ?? null, // Object. All taxonomy terms            
            'items' => $items ?? null, // Object. The list of taxonomies for this taxonomy term
            'type' => $type ?? null, // String (post type)
            'taxonomy' => $taxonomy ?? null, // String. Current taxonomy term name
            'taxonomy_term' => $taxonomy_term ?? null, // Object. Current taxonomy term object
        ]);
    }


    /**
     * Show resource
     */
    public function show(Request $request)
    {

        $id = $request->id; // Taxonomy ID

        $item = Taxonomy::find($id);
        if (!$item) return redirect(route('admin.posts.index'))->withErrors('Forbidden');

        $taxonomy_term = TaxonomyTerm::where(['taxonomy' => $item->taxonomy])->first();

        $taxonomy_terms = TaxonomyTerm::with('taxonomies')->where(['post_type' => $taxonomy_term->post_type, 'active' => 1, 'admin_filter' => 1])->orderBy('position')->get();

        $post_type = PostType::where(['type' => $taxonomy_term->post_type, 'active' => 1])->first();

        $items = Taxonomy::with('default_language_content')->where('taxonomy', $item->taxonomy)->whereNull('parent_id')->orderByDesc('active')->orderBy('position')->get();

        $content_langs = Language::where('status', '!=', 'disabled')->with(['taxonomy_content' => function ($query) use ($id) {
            $query->where('taxonomy_id', $id);
        }])->orderByDesc('is_default')->get();

        //dd($content_langs);
        return view('admin.index', [
            'view_file' => 'admin.posts.show-taxonomy',            
            'active_menu' => $type ?? null,
            'menu_section' => $taxonomy ?? 'category',
            'type' => $taxonomy_term->post_type ?? null, // String (post type)
            'taxonomy' => $item->taxonomy ?? null, // String. Current taxonomy term name
            'taxonomy_term' => $taxonomy_term ?? null, // Object. Current taxonomy term object
            'taxonomy_terms' => $taxonomy_terms ?? null, // Object. All taxonomy terms         
            'post_type' => $post_type ?? null, // Object   
            'content_langs' => $content_langs,
            'item' => $item,
            'items' => $items ?? null, // Object. The list of taxonomies for this taxonomy term
        ]);
    }

    /**
     * Create new resource
     */
    public function store(Request $request)
    {
        $type = $request->type ?? 'post'; // post type
        $this->check_post_type_exists($type);

        $taxonomy = $request->taxonomy;
        $this->check_taxonomy_term_exists($taxonomy);

        // position
        if (!($request->position ?? null)) {
            if (!$request->parent_id) $last_item = Taxonomy::where('taxonomy', $taxonomy)->whereNull('parent_id')->orderByDesc('position')->first();
            else $last_item = Taxonomy::where(['parent_id' => $request->parent_id, 'taxonomy' => $taxonomy])->orderByDesc('position')->first();
            $last_pos = $last_item->position ?? 0;
            $next_pos = $last_pos + 1;
        } else $next_pos = $request->position;

        $item = Taxonomy::create([
            'taxonomy' => $taxonomy,
            'parent_id' => $request->parent_id ?? null,
            'active' => $request->has('active') ? 1 : 0,
            'position' => $next_pos,
            'icon' => $request->icon,
            'user_id' => Auth::user()->id,
        ]);

        foreach (admin_languages() as $lang) {
            $name_key = 'name_' . $lang->id;
            $slug_key = 'slug_' . $lang->id;
            $description_key = 'description_' . $lang->id;
            $meta_title_key = 'meta_title_' . $lang->id;
            $meta_description_key = 'meta_description_' . $lang->id;

            if ($request->$slug_key) $taxonomy_lang_slug = Str::slug($request->$slug_key, '-');
            else $taxonomy_lang_slug = Str::slug($request->$name_key, '-');

            // Check for duplicate slug (same taxonomy and language). If exists, add ID in the slug 
            if (TaxonomyLang::where(['taxonomy' => $taxonomy, 'lang_id' => $lang->id, 'slug' => $taxonomy_lang_slug])->exists()) $taxonomy_lang_slug = $taxonomy_lang_slug . '-' . $item->id;

            TaxonomyLang::create([
                'taxonomy_id' => $item->id,
                'lang_id' => $lang->id,
                'taxonomy' => $taxonomy,
                'name' => $request->$name_key,
                'slug' => $taxonomy_lang_slug,
                'description' => $request->$description_key,
                'meta_title' => $request->$meta_title_key,
                'meta_description' => $request->$meta_description_key,
            ]);
        }

        // process image        
        if ($request->hasFile('image')) {
            $validator = Validator::make($request->all(), ['image' => 'file|image|max:5120']); // image mime, max 5 MB
            if (!$validator->fails()) {
                $image = PostUpload::storeImage($request->file('image'), $oldImageCode = null, $data = array('module' => 'taxonomy', 'item_id' => $item->id));
                if ($image) TaxonomyItem::where('id', $item->id)->update(['image' => $image->code]);
            } else $upload_fails = true;
        }
       
        return redirect(route('admin.taxonomies.index', ['taxonomy' => $taxonomy, 'type' => $type]))->with('success', 'created')->with('upload_fails', $upload_fails ?? null);
    }


    /**
     * Update the specified resource     
     */
    public function update(Request $request)
    {
        $taxonomy = $request->taxonomy;
        $this->check_taxonomy_term_exists($taxonomy);

        $type = $request->type ?? 'post'; // post type
        $this->check_post_type_exists($type);

        $taxonomy_item = Taxonomy::find($request->id);
        if (!$taxonomy_item) return redirect(route('admin.taxonomies.index', ['taxonomy' => $taxonomy, 'type' => $type]));


        // position
        if (!($request->position ?? null)) {
            if (!$request->parent_id) $last_item = Taxonomy::where('taxonomy', $taxonomy)->whereNull('parent_id')->where('id', '!=', $request->id)->orderByDesc('position')->first();
            else $last_item = Taxonomy::where('taxonomy', $taxonomy)->where('parent_id', $request->parent_id)->where('id', '!=', $request->id)->orderByDesc('position')->first();
            $last_pos = $last_item->position ?? 0;
            $next_pos = $last_pos + 1;
        } else $next_pos = $request->position;

        Taxonomy::where('id', $request->id)->update([
            'parent_id' => $request->parent_id ?? null,
            'active' => $request->has('active') ? 1 : 0,
            'position' => $next_pos,
            'icon' => $request->icon,
        ]);


        foreach (admin_languages() as $lang) {
            $name_key = 'name_' . $lang->id;
            $slug_key = 'slug_' . $lang->id;
            $description_key = 'description_' . $lang->id;
            $meta_title_key = 'meta_title_' . $lang->id;
            $meta_description_key = 'meta_description_' . $lang->id;

            if ($request->$slug_key) $taxonomy_lang_slug = Str::slug($request->$slug_key, '-');
            else $taxonomy_lang_slug = Str::slug($request->$name_key, '-');

            // Check for duplicate slug (same taxonomy and language). If exists, add ID in the slug 
            if (TaxonomyLang::where('taxonomy_id', '!=', $request->id)->where('taxonomy', $taxonomy)->where('lang_id', $lang->id)->where('slug', $taxonomy_lang_slug)->exists()) $taxonomy_lang_slug = $taxonomy_lang_slug . '-' . $request->id;

            TaxonomyLang::updateOrInsert(
                ['taxonomy_id' => $request->id, 'lang_id' => $lang->id, 'taxonomy' => $taxonomy],
                [
                    'name' => $request->$name_key,
                    'slug' => $taxonomy_lang_slug,
                    'description' => $request->$description_key,
                    'meta_title' => $request->$meta_title_key,
                    'meta_description' => $request->$meta_description_key,
                ]
            );
        }

        // process image        
        if ($request->hasFile('image')) {
            $validator = Validator::make($request->all(), ['image' => 'file|image|max:5120']); // image mime, max 5 MB
            if (!$validator->fails()) {
                $image = PostUpload::storeImage($request->file('image'), $oldImageCode = $taxonomy_item->image, $data = array('module' => 'taxonomy', 'item_id' => $taxonomy_item->id));
                if ($image) Taxonomy::where('id', $taxonomy_item->id)->update(['image' => $image->code]);
            } else $upload_fails = true;
        }

        return redirect(route('admin.taxonomies.index', ['taxonomy' => $taxonomy, 'type' => $type]))->with('success', 'updated')->with('upload_fails', $upload_fails ?? null);
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {
        $taxonomy = $request->taxonomy;
        $this->check_taxonomy_term_exists($taxonomy);

        $type = $request->type ?? 'post'; // post type
        $this->check_post_type_exists($type);

        $taxonomy_item = Taxonomy::find($request->id);
        if (!$taxonomy_item) return redirect(route('admin.taxonomies.index', ['taxonomy' => $taxonomy, 'type' => $type]));
        
        PostTaxonomy::where('taxonomy_id', $request->id)->delete();
        Taxonomy::where('id', $request->id)->delete();
        Taxonomy::where('parent_id', $request->id)->delete();       

        return redirect(route('admin.taxonomies.index', ['taxonomy' => $taxonomy, 'type' => $type]))->with('success', 'deleted');
    }


    /**
     * Ajax sortable
     */
    public function sortable(Request $request)
    {
        $taxonomy = $request->taxonomy;
        $this->check_taxonomy_term_exists($taxonomy);

        if ($request->user()->cannot('update', TaxonomyTerm::class)) return;

        $i = 1;

        $items = $request->all();

        foreach ($items['item'] as $key => $value) {

            Taxonomy::where('taxonomy', $taxonomy)->where('id', $value)->update([
                'position' => $i,
            ]);

            $i++;
        }
    }


    public function check_post_type_exists($type)
    {
        if ((PostType::where('type', $type))->doesntExist()) return redirect(route('admin'));
        return;
    }


    public function check_taxonomy_term_exists($taxonomy)
    {
        if ((TaxonomyTerm::where('taxonomy', $taxonomy))->doesntExist()) return redirect(route('admin'));
        return;
    }
}
