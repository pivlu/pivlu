<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use App\Models\Upload;
use App\Models\Config;
use App\Models\Theme;
use App\Models\ThemeConfig;
use App\Models\ThemeStyle;
use App\Models\ThemeButton;
use App\Models\BlockType;
use App\Functions\ThemeFunctions;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;

class ThemeController extends Controller
{

    public function index(Request $request)
    {

        $themes = Theme::orderByDesc('is_active_theme')->orderByDesc('is_default')->orderByDesc('id')->paginate(25);

        return view('admin.index', [
            'view_file' => 'admin.theme.index',
            'active_menu' => 'website',
            'active_submenu' => 'appearance',
            'nav_tab' => 'themes',
            'themes' => $themes,
        ]);
    }


    /**
     * Store resource
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.themes.index'))->withErrors($validator)->withInput();

        $slug = Str::slug($request->name, '_');

        if (Theme::where('slug', $slug)->exists()) return redirect(route('admin.themes.index'))->with('error', 'duplicate');

        Theme::create(['label' => $request->name, 'slug' => $slug]);

        return redirect(route('admin.themes.show', ['slug' => $slug]))->with('success', 'created');
    }



    /**
     * Show resource
     */
    public function show(Request $request)
    {
        $slug = $request->slug;

        $theme = Theme::where('slug', $slug)->first();
        if (! $theme) return redirect(route('admin.themes.index'));

        $theme_tab = $request->theme_tab ?? 'homepage';
        if (!in_array($theme_tab, ['homepage', 'global', 'nav', 'nav2', 'footer', 'posts'])) $theme_tab = 'global';        

        return view('admin.index', [
            'view_file' => 'admin.theme.show',
            'active_menu' => 'website',
            'active_submenu' => 'appearance',
            'nav_tab' => 'themes',
            'theme' => $theme,
            'theme_tab' => $theme_tab,

            'fonts' => ThemeFunctions::fonts(),
            'font_sizes' => ThemeFunctions::font_sizes(),
            'buttons' => ThemeButton::orderByDesc('is_default')->orderBy('label')->get(),
            'styles' => ThemeStyle::orderBy('label')->get(),
            'theme_config' => ThemeConfig::config($theme->id),
            'block_types' => BlockType::get_block_types() // for homepage tab
        ]);
    }



    /**
     * Update settings
     */
    public function update(Request $request)
    {
        $slug = $request->slug;
        $theme = Theme::where('slug', $slug)->first();
        if (! $theme) return redirect(route('admin.themes.index'));

        $theme_tab = $request->theme_tab;

        $excepts = array('_token', '_method', 'theme_tab');

        // request inputs WITHOUT files
        $inputs = $request->except($excepts);
        ThemeConfig::update_config($theme->id, $inputs);

        /*
        // except files from request
        $filesArray = request()->allFiles();
        if (count($filesArray) > 0) {
            foreach ($filesArray as $key => $fileName) {
                array_push($excepts, $key);
            }
        }

        // request FILES if exists        
        foreach ($filesArray as $key => $fileName) {
            // process image        
            if ($request->hasFile($key)) {
                $validator = Validator::make($request->all(), [$key => 'file|image|max:5120']); // image mime, max 5 MB
                if (!$validator->fails()) {
                    $image = Upload::storeFile($request->file($key));
                    if ($image) ThemeConfig::update_config($slug, $key, $image->code);
                } else $upload_fails = true;
            }
        }
        */

        // regenerate css file
        //ThemeConfig::generate_template_css($theme = $slug);

        return redirect(route('admin.themes.show', ['slug' => $slug, 'theme_tab' => $theme_tab]))->with('success', 'updated');
    }



    /**
     * Set default template
     */
    public function set_default(Request $request)
    {
        $slug = $request->slug;
        if (!$slug) return redirect(route('admin.themes.index'));

        Config::update_config('active_theme', $slug);

        // create template css file IF NOT EXISTS (do not overwrite if exists)
        $template_css_file = "custom/$slug.css";
        if (!file_exists($template_css_file)) {
            $css_file = fopen($template_css_file, "w");
            $write = " ";
            fwrite($css_file, $write);
            fclose($css_file);

            ThemeConfig::generate_template_css($slug);
        }

        return redirect(route('admin.themes.index'))->with('success', 'updated');
    }


    /**
     * Logos config page
     */
    public function logo()
    {
        return view('admin.index', [
            'view_file' => 'theme.config-logo',
            'active_menu' => 'themes',
            'menu_section' => 'logo',
        ]);
    }

    /**
     * Process Template logos
     */
    public function update_logo(Request $request)
    {

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        // process Main logo image
        if ($request->hasFile('logo')) {

            $validator = Validator::make($request->all(), [
                'logo' => 'mimes:jpeg,jpg,png,gif',
            ]);

            if ($validator->fails()) return redirect($request->Url())->withErrors($validator)->withInput();

            $logo_db = Upload::storeFile($request->file('logo'));
            Config::update_config('logo', $logo_db->file);
        }

        // process auth logo image
        if ($request->hasFile('logo_auth')) {

            $validator = Validator::make($request->all(), [
                'logo_auth' => 'mimes:jpeg,jpg,png,gif',
            ]);

            if ($validator->fails()) return redirect($request->Url())->withErrors($validator)->withInput();

            $logo_db = Upload::storeFile($request->file('logo_auth'));
            Config::update_config('logo_auth', $logo_db->file);
        }


        // pricess favicon image
        if ($request->hasFile('favicon')) {

            $validator = Validator::make($request->all(), ['favicon' => 'mimes:jpeg,jpg,png,gif,ico']);

            if ($validator->fails()) return redirect($request->Url())->withErrors($validator)->withInput();

            $favicon_db = Upload::storeFile($request->file('favicon'));
            Config::update_config('favicon', $favicon_db->file);
        }

        return redirect($request->Url())->with('success', 'updated');
    }


    /**
     * Template tools page
     */
    public function custom_code()
    {
        return view('admin.index', [
            'view_file' => 'theme.config-custom-code',
            'active_menu' => 'themes',
            'menu_section' => 'custom_code',
        ]);
    }

    /**
     * Process temmplate tools page
     */
    public function update_custom_code(Request $request)
    {
        $inputs = $request->except('_token');

        Config::update_config($inputs);

        return redirect($request->Url())->with('success', 'updated');
    }
}
