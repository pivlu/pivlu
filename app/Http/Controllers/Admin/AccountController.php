<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use App\Models\UserInternalNote;
use App\Models\UserPermission;
use App\Models\User;
use App\Models\UserMeta;
use App\Functions\HelperFunctions;
use App\Functions\FileFunctions;
use Auth;

class AccountController extends Controller
{

    /**
     * Show all resources
     */
    public function index(Request $request)
    {

        $search_terms = $request->search_terms;
        $search_blocked = $request->search_blocked;
        $search_email_verified = $request->search_email_verified;
        $openmodal = $request->openmodal; // for automatic open modal to create account

        $role = $request->role;
        if (!($role == 'admin' || $role == 'internal' || $role == 'user')) $role = 'internal';
        if ($role == 'admin' && Auth::user()->role != 'admin') return redirect(route('admin.accounts.index')); // only admins can see admins

        $accounts = User::orderByDesc('id');

        if (isset($search_blocked)) $accounts = $accounts->whereNotNull('blocked_at');
        if ($search_email_verified == '1') $accounts = $accounts->whereNotNull('email_verified_at');
        if ($search_email_verified == '0') $accounts = $accounts->whereNull('email_verified_at');
        if ($role) $accounts = $accounts->where('role', $role);

        if ($search_terms) $accounts = $accounts->where(function ($query) use ($search_terms) {
            $query->where('users.name', 'like', "%$search_terms%")
                ->orWhere('users.email', 'like', "%$search_terms%")
                ->orWhere('users.username', 'like', "%$search_terms%");
        });

        $accounts = $accounts->paginate(20);

        return view('admin.index', [
            'view_file' => 'admin.accounts.index-' . $role,
            'active_menu' => 'users',
            'active_submenu' => 'users.' . $role,
            'search_terms' => $search_terms,
            'search_blocked' => $search_blocked,
            'search_email_verified' => $search_email_verified,
            'accounts' => $accounts,
            'openmodal' => $openmodal,
            'role' => $role,
        ]);
    }


    /**
     * Show resource
     */
    public function show(Request $request)
    {

        $account = User::find($request->id);
        if (!$account) return redirect(route('admin.accounts.index'));

        $block_reason = UserMeta::get_meta($account->id, 'block_reason');
        
        return view('admin.index', [
            'view_file' => 'admin.accounts.show',
            'active_menu' => 'users',
            'active_submenu' => 'users.' . $account->role,
            'account' => $account,
            'block_reason' => $block_reason ?? null,
            'menu_section' => 'details',
        ]);
    }


    /**
     * Create resource
     */
    public function store(Request $request)
    {
        // only admins can set admin role
        if ($request->role == 'admin' && Auth::user()->role != 'admin') return redirect(route('admin.accounts.index'));

        $search_role = $request->search_role;

        $validator = Validator::make($request->all(), [
            'name' => ['required', 'string', 'max:255'],
            'email' => [
                'required',
                'string',
                'email',
                'max:255',
                Rule::unique(User::class),
            ],            
            'password' => 'required|min:8',
            'role' => 'required|in:admin,internal,user',
        ]);

        if ($validator->fails()) return redirect(route('admin.accounts.index'))->withErrors($validator)->withInput();

        $code = HelperFunctions::generateRandomInteger(12);

        $user = User::create([
            'code' => $code,
            'name' => $request->name,
            'username' => $code,
            'email' => $request->email,
            'role' => $request->role,
            'password' => Hash::make($request->password),
            'email_verified_at' => $request->has('email_verified_at') ? now() : null,
        ]);

        // process avatar     
        if ($request->hasFile('avatar')) FileFunctions::store_user_avatar($request->file('avatar'), $user->id);

        return redirect(route('admin.accounts.index', ['search_role' => $search_role]))->with('success', 'created');
    }


    /**
     * Update resource
     */
    public function update(Request $request)
    {

        // only admins can set admin role
        if ($request->role == 'admin' && Auth::user()->role != 'admin') return redirect(route('admin.accounts.index'));

        $user = User::find($request->id);
        if (!$user) return redirect(route('admin.accounts.index'));

        $validator = Validator::make($request->all(), [
            'name' => 'required',
            'role' => 'required|in:admin,internal,user',
            'email' => [
                'required',
                'email',
                Rule::unique('users')->ignore($user),
            ],
            'username' => [
                'required',
                'min:5',
                'max:30',
                Rule::unique('users')->ignore($user),
            ],
        ]);

        if ($validator->fails()) return redirect(route('admin.accounts.show', ['id' => $request->id]))->withErrors($validator)->withInput();

        if ($request->has('email_verified_at'))
            if ($user->email_verified_at) $email_verified_at = $user->email_verified_at;
            else $email_verified_at = now();
        else $email_verified_at = null;

        User::where('id', $request->id)->update([
            'name' => $request->name,
            'username' => Str::slug($request->username, '.'),
            'email' => $request->email,
            'role' => $request->role,
            'blocked_at' => $request->has('blocked_at') ? now() : null,
            'email_verified_at' => $email_verified_at,
        ]);

        // process avatar     
        if ($request->hasFile('avatar')) FileFunctions::store_user_avatar($request->file('avatar'), $user->id, $user->avatar_media_id);

        if ($request->has('blocked_at')) UserMeta::add_meta($request->id, 'block_reason', $request->block_reason);

        // change password
        if ($request->password) {
            $validator = Validator::make($request->all(), [
                'password' => 'min:8',
            ]);

            if ($validator->fails()) return redirect(route('admin.accounts.show', ['id' => $request->id]))->withErrors($validator)->withInput();

            User::where('id', $request->id)->update([
                'password' => Hash::make($request->password)
            ]);
        }


        return redirect(route('admin.accounts.show', ['id' => $request->id]))->with('success', 'updated');
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {
        $user = User::find($request->id);
        if(! $user) return redirect(route('admin.accounts.index'));

        User::find($request->id)->delete(); // soft delete

        return redirect(route('admin.accounts.index', ['role' => $request->role]))->with('success', 'deleted');
    }



    /**
     * Account internal notes
     */
    public function internal_notes(Request $request)
    {

        $account = User::find($request->id);
        if (!$account) redirect(route('admin.accounts.index'));

        $notes = UserInternalNote::with('attachment')->where('user_id', $request->id)->with('author')
            ->orderByDesc('sticky')
            ->orderByDesc('id')
            ->paginate(25);

        return view('admin.index', [
            'view_file' => 'admin.accounts.internal-notes',
            'active_menu' => 'users',
            'active_submenu' => 'users.' . $account->role,
            'account' => $account,
            'notes' => $notes,
            'menu_section' => 'notes',
        ]);
    }


    /**
     * Add internal to account
     */
    public function store_internal_note(Request $request)
    {
        if ($request->input('sticky') == 'on') $sticky = 1;

        $note = UserInternalNote::create([
            'note' => $request->note,
            'sticky' => $sticky ?? 0,
            'user_id' => $request->id,
            'created_by_user_id' => Auth::user()->id,
        ]);

        // process file
        if ($request->hasFile('file')) {
            $file = Upload::storeFile($request->file('file'));
            UserInternalNote::where('id', $note->id)->update(['file' => $file->code]);
        }

        return redirect(route('admin.account.internal_notes', ['id' => $request->id]))->with('success', 'created');
    }


    /**
     * Remove internal note from account
     */
    public function destroy_internal_note(Request $request)
    {

        $note = UserInternalNote::find($request->note_id);
        if (!$note) return redirect(route('admin.account.internal_notes', ['id' => $request->id]));

        UserInternalNote::where('id', $request->note_id)->delete();
        if ($note->file) {
            $currentFilePath = public_path('uploads/' . $note->file);
            @unlink($currentFilePath);
        }

        return redirect(route('admin.account.internal_notes', ['id' => $request->id]))->with('success', 'deleted');
    }


    /**
     * Accounts permissions
     */
    public function permissions(Request $request)
    {
        if (Auth::user()->role != 'admin') return redirect(route('admin'));

        $search_user_id = $request->search_user_id;
        $search_terms = $request->search_terms;

        $internal_accounts = User::where('role', 'internal')->whereNull('deleted_at');

        if ($search_terms) $internal_accounts = $internal_accounts->where(function ($query) use ($search_terms) {
            $query->where('users.name', 'like', "%$search_terms%")
                ->orWhere('users.email', 'like', "%$search_terms%");
        });

        if ($search_user_id) $internal_accounts = $internal_accounts->where('id', $search_user_id);

        $internal_accounts = $internal_accounts->orderBy('name')->paginate(25);

        $modules_permissions = config('nura.permissions');

        //dd($modules_permissions);
        return view('admin.index', [
            'active_menu' => 'users',
            'active_submenu' => 'permissions',
            'view_file' => 'admin.accounts.permissions',
            'internal_accounts' => $internal_accounts,
            'modules_permissions' => json_decode(json_encode($modules_permissions)), // array to object
            'search_user_id' => $search_user_id,
            'search_terms' => $search_terms,
        ]);
    }


    /**
     * Update accounts permissions
     */
    public function update_permissions(Request $request)
    {
        if (Auth::user()->role != 'admin') return redirect(route('admin'));

        $search_user_id = $request->search_user_id;
        $search_terms = $request->search_terms;

        $internal_accounts = User::where('role', 'internal')->whereNull('deleted_at');

        if ($search_terms) $internal_accounts = $internal_accounts->where(function ($query) use ($search_terms) {
            $query->where('users.name', 'like', "%$search_terms%")
                ->orWhere('users.email', 'like', "%$search_terms%")
                ->orWhere('users.code', 'like', "%$search_terms%");
        });

        if ($search_user_id) $internal_accounts = $internal_accounts->where('id', $search_user_id);

        $internal_accounts = $internal_accounts->orderBy('name')->get();

        $data = $request->except('_token', 'action', 'search_terms');

        foreach ($data as $key => $value) {
            if (!str_contains($key, '#')) continue; // must be valid item (module#user_id)
            $item_array = explode('#', $key);
            $module = $item_array[0];
            $user_id = $item_array[1];

            if ($value == 0)
                UserPermission::where('module', $module)->where('user_id', $user_id)->delete();
            else
                UserPermission::updateOrInsert(
                    ['module' => $module, 'user_id' => $user_id],
                    ['module' => $module, 'user_id' => $user_id, 'permission' => $value,],
                );
        }

        return redirect(route('admin.accounts.permissions'))->with('success', 'updated');
    }
}
