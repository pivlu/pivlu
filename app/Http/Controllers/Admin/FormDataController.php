<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

use App\Models\Form;
use App\Models\FormData;
use App\Models\DriveFile;
use App\Models\FormFieldData;

class FormDataController extends Controller
{

    /**
     * Display all messages
     */
    public function index(Request $request)
    {
        $search_form_id = $request->search_form_id;
        $search_terms = $request->search_terms;
        $search_status = $request->search_status;
        $search_replied = $request->search_replied;
        $search_important = $request->search_important;

        $messages = FormData::with('form');

        if ($search_form_id)
            $messages = $messages->where('forms_data.form_id', $search_form_id);

        if ($search_status == 'unread')
            $messages = $messages->whereNull('forms_data.read_at');
        if ($search_status == 'read')
            $messages = $messages->whereNotNull('forms_data.read_at');

        if ($search_replied == 'yes')
            $messages = $messages->whereNotNull('forms_data.responded_at');
        if ($search_replied == 'no')
            $messages = $messages->whereNull('forms_data.responded_at');

        if ($search_important == '1')
            $messages = $messages->where('forms_data.is_important', 1);

        if ($search_terms) $messages = $messages->where(function ($query) use ($search_terms) {
            $query->where('name', 'like', "%$search_terms%")
                ->orWhere('email', 'like', "%$search_terms%")
                ->orWhere('subject', 'like', "%$search_terms%");
        });

        $messages = $messages->orderByDesc('id')->paginate(25);

        $count_messages_unread = FormData::whereNull('read_at')->whereNull('deleted_at')->count();

        return view('admin.index', [
            'view_file' => 'admin.forms.forms-data',
            'active_menu' => 'website',
            'active_submenu' => 'forms',
            'search_form_id' => $search_form_id,
            'search_terms' => $search_terms,
            'search_status' => $search_status,
            'search_replied' => $search_replied,
            'search_important' => $search_important,
            'messages' => $messages,
            'count_messages_unread' => $count_messages_unread,
        ]);
    }


    /**
     * Show message     
     */
    public function show(Request $request)
    {

        $message = FormData::where('id', $request->id)->with('form')->first();
        if (!$message) return redirect(route('admin.forms'));

        $form = Form::find($message->form_id);
        FormData::where('id', $request->id)->update(['read_at' => now()]);

        $fields = FormFieldData::with('field', 'file')
            ->where('form_id', $form->id)
            ->where('form_data_id', $message->id)
            ->get();

        return view('admin.index', [
            'view_file' => 'forms.message',
            'active_menu' => 'website',
            'active_submenu' => 'forms',
            'message' => $message,
            'form' => $form,
            'fields' => $fields,
        ]);
    }


    /**
     * Display all messages from trash
     */
    public function trash(Request $request)
    {
        $search_form_id = $request->search_form_id;
        $search_terms = $request->search_terms;
        $search_status = $request->search_status;
        $search_replied = $request->search_replied;
        $search_important = $request->search_important;

        $messages = FormData::with('form')->whereNotNull('deleted_at');

        if ($search_form_id)
            $messages = $messages->where('forms_data.form_id', $search_form_id);

        if ($search_status == 'unread')
            $messages = $messages->whereNull('forms_data.read_at');
        if ($search_status == 'read')
            $messages = $messages->whereNotNull('forms_data.read_at');

        if ($search_replied == 'yes')
            $messages = $messages->whereNotNull('forms_data.responded_at');
        if ($search_replied == 'no')
            $messages = $messages->whereNull('forms_data.responded_at');

        if ($search_important == '1')
            $messages = $messages->where('forms_data.is_important', 1);

        if ($search_terms) $messages = $messages->where(function ($query) use ($search_terms) {
            $query->where('name', 'like', "%$search_terms%")
                ->orWhere('email', 'like', "%$search_terms%")
                ->orWhere('subject', 'like', "%$search_terms%");
        });

        $messages = $messages->orderByDesc('id')->paginate(25);

        return view('admin.index', [
            'view_file' => 'forms.trash',
            'active_menu' => 'website',
            'active_submenu' => 'forms',
            'search_form_id' => $search_form_id,
            'search_terms' => $search_terms,
            'search_status' => $search_status,
            'search_replied' => $search_replied,
            'search_important' => $search_important,
            'messages' => $messages,
        ]);
    }

    /**
     * Move message to trash
     */
    public function to_trash(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        FormData::where('id', $request->id)->update(['deleted_at' => now()]);


        return redirect(route('admin.forms', ['pagenum' => $request->pagenum]))->with('success', 'moved_to_trash');
    }


    /**
     * Action for multiple messages selected
     */
    public function multiple_action(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        if (!$request->messages_checkbox) return redirect(route('admin.forms', ['pagenum' => $request->pagenum]));

        foreach ($request->messages_checkbox as $message_id) {
            if ($request->action == 'read') {
                FormData::where('id', $message_id)->update(['read_at' => now()]);
            }
            if ($request->action == 'unread') {
                FormData::where('id', $message_id)->update(['read_at' => null]);
            }
            if ($request->action == 'important') {
                FormData::where('id', $message_id)->update(['is_important' => 1]);
            }
            if ($request->action == 'trash') {
                FormData::where('id', $message_id)->update(['deleted_at' => now()]);
            }
            if ($request->action == 'restore') {
                FormData::where('id', $message_id)->update(['deleted_at' => null]);
            }
            if ($request->action == 'delete') {
                $message = FormData::where('id', $message_id)->with('form')->first();
                if (!$message) continue;

                // if field had file upload, delete file
                $fields = FormFieldData::with('file')
                    ->where('form_data_id', $message_id)
                    ->get();
                foreach ($fields as $field) {
                    if ($field->file) {
                        @unlink('uploads/' . $file->file);
                        DriveFile::where('code', $field->code)->delete();
                    }
                }

                FormData::where('id', $message_id)->delete();
                FormFieldData::where('form_data_id', $message_id)->delete();
            }
        }

        if ($request->section == 'trash')
            return redirect(route('admin.forms.trash', ['pagenum' => $request->pagenum]))->with('success', 'updated');
        else
            return redirect(route('admin.forms', ['pagenum' => $request->pagenum]))->with('success', 'updated');
    }


    /**
     * Delete message
     */
    public function destroy(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $message = FormData::where('id', $request->id)->with('form')->first();
        if (!$message) return redirect(route('admin.forms'));

        // if field had file upload, delete file
        $fields = FormFieldData::with('file')
            ->where('form_data_id', $message->id)
            ->get();
        foreach ($fields as $field) {
            if ($field->file) {
                @unlink('uploads/' . $field->file->file);
                DriveFile::where('code', $field->file->code)->delete();
            }
        }

        FormData::where('id', $request->id)->delete();
        FormFieldData::where('form_data_id', $request->id)->delete();

        return redirect(route('admin.forms.trash', ['pagenum' => $request->pagenum]))->with('success', 'deleted');
    }


    /**
     * Mark message (important, normal...)
     */
    public function mark(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        if ($request->action == 'important') FormData::where('id', $request->id)->update(['is_important' => 1]);

        if ($request->action == 'not_important') FormData::where('id', $request->id)->update(['is_important' => 0]);

        if ($request->action == 'spam') FormData::where('id', $request->id)->update(['is_spam' => 1]);

        if ($request->action == 'not_spam') FormData::where('id', $request->id)->update(['is_spam' => 0]);

        return redirect(route('admin.forms.show', ['id' => $request->id]))->with('success', 'updated');
    }


    /**
     * Empty trash
     */
    public function empty_trash()
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $messages = FormData::with('form')->whereNotNull('deleted_at')->get();

        foreach ($messages as $message) {
            $message = FormData::where('id', $message->id)->with('form')->first();
            if (!$message) continue;

            // if field had file upload, delete file
            $fields = FormFieldData::with('file')
                ->where('form_data_id', $message->id)
                ->get();
            foreach ($fields as $field) {
                if ($field->file) {
                    @unlink('uploads/' . $field->file->file);
                    DriveFile::where('code', $field->file->code)->delete();
                }
            }

            FormData::where('id', $message->id)->delete();
            FormFieldData::where('form_data_id', $message->id)->delete();
        }

        return redirect(route('admin.forms.trash'))->with('success', 'empty_trash');
    }
}
