<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\FormField;
use App\Models\FormFieldContent;
use App\Models\FormFieldData;

class BlockFormController extends Controller
{       

    /**
     * Add form field 
     */
    public function add_field(Request $request)
    {        
        $last_pos = FormField::where('block_component_id', $request->id)->orderByDesc('position')->value('position');
        $position = ($last_pos ?? 0) + 1;

        $form_field = FormField::create([
            'block_component_id' => $request->id,
            'type' => $request->type,
            'required' => $request->has('required') ? 1 : 0,
            'active' => $request->has('active') ? 1 : 0,
            'col_md' => $request->col_md ?? 12,
            'position' => $position,
        ]);        

        foreach (admin_languages() as $lang) {
            FormFieldContent::create([
                'block_component_id' => $request->id,
                'field_id' => $form_field->id,
                'lang_id' => $lang->id,
                'label' => $request['label_' . $lang->id],
                'info' => $request['info_' . $lang->id],
                'dropdowns' => $request['dropdowns_' . $lang->id] ?? null
            ]);
        }

        return redirect(route('admin.block-components.block.show', ['id' => $request->id, 'type' => 'form']))->with('success', 'created');
    }


    /**
     * Update form field 
     */
    public function update_field(Request $request)
    {
        FormField::where('id', $request->field_id)->update([
            'type' => $request->type,
            'required' => $request->has('required') ? 1 : 0,
            'active' => $request->has('active') ? 1 : 0,
            'col_md' => $request->col_md ?? 12,
        ]);

        foreach (admin_languages() as $lang) {
            FormFieldContent::updateOrCreate(
                ['block_component_id' => $request->id, 'field_id' => $request->field_id, 'lang_id' => $lang->id],
                [
                    'label' => $request['label_' . $lang->id],
                    'info' => $request['info_' . $lang->id],
                    'dropdowns' => $request['dropdowns_' . $lang->id] ?? null
                ]
            );
        }

        return redirect(route('admin.block-components.block.show', ['id' => $request->id, 'type' => 'form']))->with('success', 'updated');
    }


    /**
     * Remove form field
     */
    public function destroy_field(Request $request)
    {        
        if (FormField::where('id', $request->field_id)->value('protected') == 1) return redirect(route('admin.forms.config.show', ['id' => $request->id]))->with('error', 'protected');

        FormFieldContent::where('field_id', $request->field_id)->delete();
        FormFieldData::where('field_id', $request->field_id)->delete();
        FormField::where('id', $request->field_id)->delete();

        return redirect(route('admin.block-components.block.show', ['id' => $request->id, 'type' => 'form']))->with('success', 'deleted');
    }


    /**
     * Ajax sortable
     */
    public function sortable(Request $request)
    {
        $i = 0;
        $records = $request->all();

        foreach ($records['item'] as $key => $value) {
            FormField::where('block_component_id', $request->id)->where('id', $value)->update(['position' => $i]);
            $i++;
        }
    }
}
