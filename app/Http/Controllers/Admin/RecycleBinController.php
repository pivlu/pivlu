<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\User;
use App\Models\Block;
use App\Models\BlockContent;
use App\Models\Post;
use App\Models\PostType;
use App\Models\FormData;
use App\Models\Form;
use Auth;

class RecycleBinController extends Controller
{
    public function index()
    {
        if (Auth::user()->role != 'admin') return redirect(route('admin'));

        $rbAccountsCount = User::onlyTrashed()->count();
        $rbPostsCount = Post::onlyTrashed()->count();
        $rbFormsCount = FormData::onlyTrashed()->count();

        return view('admin.index', [
            'view_file' => 'admin.recycle-bin.index',
            'active_menu' => 'tools',
            'active_submenu' => 'recycle_bin',
            'rbAccountsCount' => $rbAccountsCount ?? 0,
            'rbPostsCount' => $rbPostsCount ?? 0,
            'rbFormsCount' => $rbFormsCount ?? 0,
        ]);
    }


    public function module(Request $request)
    {
        if (Auth::user()->role != 'admin') return redirect(route('admin'));

        $module = $request->module;
        if (!($module == 'accounts' || $module == 'posts' || $module == 'forms')) return redirect(route('admin.recycle_bin'));

        // DELETED ACCOUNTS
        if ($module == 'accounts') {
            $deletedItemsCount = User::onlyTrashed()->count();

            $search_terms = $request->search_terms;

            $items = User::onlyTrashed();

            if ($search_terms) $items = $items->where(function ($query) use ($search_terms) {
                $query->where('users.name', 'like', "%$search_terms%")
                    ->orWhere('users.email', 'like', "%$search_terms%");
            });

            $items = $items->orderByDesc('id')->paginate(25);
        }



        // DELETED POSTS
        if ($module == 'posts') {
            $deletedItemsCount = Post::onlyTrashed()->count();

            $search_terms = $request->search_terms;
            $search_post_type = $request->search_post_type;

            $items = Post::with('user', 'default_language_content')->onlyTrashed();

            if ($search_terms)
                $items = $items->whereHas('default_language_content', function ($query) use ($search_terms) {
                    $query->where('title', 'like', "%$search_terms%")->orWhere('search_terms', 'like', "%$search_terms%");
                });

            if ($search_post_type) {
                $items = $items->where('type', $search_post_type);
            }

            $items = $items->orderByDesc('id')->paginate(25);

            $post_types = PostType::orderByDesc('core')->orderByDesc('active')->orderByDesc('id')->get();
        }


        // DELETED FORMS
        if ($module == 'forms') {
            $deletedItemsCount = FormData::onlyTrashed()->count();

            $search_terms = $request->search_terms;
            $search_form_id = $request->search_form_id;
            $search_status = $request->search_status;
            $search_replied = $request->search_replied;
            $search_important = $request->search_important;

            $items = Post::with('user', 'default_language_content')->onlyTrashed();

            if ($search_terms) $items = $items->where(function ($query) use ($search_terms) {
                $query->where('name', 'like', "%$search_terms%")
                    ->orWhere('email', 'like', "%$search_terms%")
                    ->orWhere('subject', 'like', "%$search_terms%");
            });

            if ($search_form_id) {
                $items = $items->where('form_id', $search_form_id);
            }

            if ($search_status == 'unread')
                $items = $items->whereNull('read_at');
            if ($search_status == 'read')
                $items = $items->whereNotNull('read_at');

            if ($search_replied == 'yes')
                $items = $items->whereNotNull('responded_at');
            if ($search_replied == 'no')
                $items = $items->whereNull('responded_at');

            if ($search_important == '1')
                $items = $items->where('is_important', 1);

            $items = $items->orderByDesc('id')->paginate(25);

            $forms = Form::orderByDesc('is_contact_form')->orderBy('label')->orderByDesc('id')->get();
        }

        return view('admin.index', [
            'view_file' => 'admin.recycle-bin.' . $module,
            'active_menu' => 'tools',
            'active_submenu' => 'recycle_bin',
            'deletedItemsCount' => $deletedItemsCount ?? 0,
            'items' => $items ?? null,

            'search_terms' => $search_terms ?? null, //posts / pages / forms
            'search_status' => $search_status ?? null,
            'search_post_type' => $search_post_type ?? null,
            'post_types' => $post_types ?? null, // posts

            'forms' => $forms ?? null,
            'search_form_id' => $search_form_id ?? null,
            'search_replied' => $search_replied ?? null,
            'search_important' => $search_important ?? null,
        ]);
    }



    public function single_action(Request $request)
    {
        if (Auth::user()->role != 'admin') return redirect(route('admin'));

        $module = $request->module;
        if (!($module == 'accounts' || $module == 'posts' || $module == 'forms')) return redirect(route('admin.recycle_bin'));

        // ACCOUNTS
        if ($module == 'accounts') {
            if ($request->action == 'delete') User::where('id', $request->id)->forceDelete();
            if ($request->action == 'restore') User::where('id', $request->id)->restore();
        }

        // POSTS
        if ($module == 'posts') {
            if ($request->action == 'delete') {
                $post = Post::find($request->id);
                if (!$post) return redirect(route('admin.recycle_bin'));

                // delete main image
                if ($post->image) DriveFile::delete_image($post->image);

                // delete content blocks
                $blocks = Block::where('module', 'posts')->where('content_id', $request->id)->get();
                foreach ($blocks as $block) {
                    Block::where('id', $block->id)->delete();
                    BlockContent::where('block_id', $block->id)->delete();
                }

                Post::where('id', $request->id)->forceDelete(); // delete post                
            }
            if ($request->action == 'restore') Post::where('id', $request->id)->restore();
        }


        if (($request->return_to ?? null) == 'recycle_bin')
            return redirect(route('admin.recycle_bin.module', ['module' => $module]))->with('success', $request->action ?? null);
        elseif (($request->return_to ?? null) == 'contact')
            return redirect(route('admin.contact'))->with('success', $request->action ?? null);
        else return redirect(route('admin.recycle_bin'))->with('success', $request->action ?? null);
    }



    public function multiple_action(Request $request)
    {
        if (Auth::user()->role != 'admin') return redirect(route('admin'));

        $module = $request->module;
        if (!($module == 'accounts' || $module == 'posts' || $module == 'forms')) return redirect(route('admin.recycle_bin'));

        // ACCOUNTS
        if ($module == 'accounts') {
            if (is_array($request->items_checkbox)) {
                foreach ($request->items_checkbox as $item_id) {
                    if ($request->action == 'multiple_delete') User::where('id', $item_id)->forceDelete();
                    if ($request->action == 'multiple_restore') User::where('id', $item_id)->restore();
                }
            }
        }


        // POSTS
        if ($module == 'posts') {
            if (is_array($request->items_checkbox)) {
                foreach ($request->items_checkbox as $item_id) {
                    if ($request->action == 'multiple_delete') {
                        $post = Post::find($item_id);
                        if (!$post) return redirect(route('admin.recycle_bin'));

                        // delete main image
                        if ($post->image) DriveFile::delete_image($post->image);

                        // delete content blocks
                        $blocks = Block::where('module', 'posts')->where('content_id', $item_id)->get();
                        foreach ($blocks as $block) {
                            Block::where('id', $block->id)->delete();
                            BlockContent::where('block_id', $block->id)->delete();
                        }

                        Post::where('id', $item_id)->forceDelete(); // delete post                                        
                    }
                    if ($request->action == 'multiple_restore') Post::where('id', $item_id)->restore();
                }
            }
        }


        return redirect(route('admin.recycle_bin.module', ['module' => $module]))->with('success', $request->action ?? null);
    }
}
