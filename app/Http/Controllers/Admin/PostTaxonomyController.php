<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Str;
use App\Models\PostType;
use App\Models\PostTaxonomy;
use App\Models\PostTaxonomyContent;
use App\Models\PostTaxonomyRelation;
use App\Models\PostTypeTaxonomy;
use App\Functions\PostFunctions;
use App\Functions\FileFunctions;
use Auth;

class PostTaxonomyController extends Controller
{

    /**
     * Display all resources
     */
    public function index(Request $request)
    {
        $post_type_taxonomy = PostTypeTaxonomy::with('default_language_content')->find($request->id);
        if (!$post_type_taxonomy) return redirect(route('admin.posts.index'));

        $post_type = PostType::with('default_language_content')->find($post_type_taxonomy->post_type_id);

        $post_taxonomies = PostTaxonomy::with('default_language_content')->where('post_type_taxonomy_id', $post_type_taxonomy->id)->whereNull('parent_id')->orderByDesc('active')->orderBy('position');

        $search_terms = $request->search_terms;
        $count_taxonomies = PostTaxonomy::where('post_type_taxonomy_id', $post_type_taxonomy->id)->count();

        if ($search_terms)
            $post_taxonomies = $post_taxonomies->whereHas('default_language_content', function ($query) use ($search_terms) {
                $query->where('name', 'like', "%$search_terms%");
            });

        if ($post_type_taxonomy->hierarchical == 1) $post_taxonomies = $post_taxonomies->paginate(100);
        else $post_taxonomies = $post_taxonomies->paginate(10);


        $all_post_taxonomies = PostTaxonomy::with('default_language_content')->where('post_type_taxonomy_id', $post_type_taxonomy->id)->whereNull('parent_id')->orderByDesc('active')->orderBy('position')->get();

        return view('admin.index', [
            'view_file' => 'admin.posts.taxonomies',
            'active_menu' => 'website',
            'active_submenu' => 'post_type_' . $post_type->id ?? null,
            'menu_section' => $post_type_taxonomy->id ?? null,
            'count_taxonomies' => $count_taxonomies,
            'search_terms' => $search_terms,
            'post_type' => $post_type ?? null,
            'post_type_taxonomy_terms' => PostFunctions::get_post_type_taxonomies($post_type->id),
            'post_taxonomies' => $post_taxonomies ?? null,
            'all_post_taxonomies' => $all_post_taxonomies ?? null,
            'post_type_taxonomy' => $post_type_taxonomy ?? null,
        ]);
    }


    /**
     * Show resource
     */
    public function show(Request $request)
    {
        $post_taxonomy_id = $request->id;

        $post_taxonomy = PostTaxonomy::with('default_language_content')->find($post_taxonomy_id);
        if (!$post_taxonomy) return redirect(route('admin.posts.index'))->withErrors('Forbidden');

        $post_type_taxonomy = PostTypeTaxonomy::where(['id' => $post_taxonomy->post_type_taxonomy_id])->first();

        $post_type = PostType::where(['id' => $post_type_taxonomy->post_type_id])->first();

        $all_post_taxonomies = PostTaxonomy::with('default_language_content')->where('post_type_taxonomy_id', $post_type_taxonomy->id)->whereNull('parent_id')->orderByDesc('active')->orderBy('position')->get();

        return view('admin.index', [
            'view_file' => 'admin.posts.show-taxonomy',
            'active_menu' => 'website',
            'active_submenu' => 'post_type_' . $post_type->id ?? null,
            'menu_section' => $post_type_taxonomy->id ?? null,
            'post_type_taxonomy_terms' => PostFunctions::get_post_type_taxonomies($post_type->id),

            'post_type_taxonomy' => $post_type_taxonomy,
            'post_taxonomy' => $post_taxonomy,
            'post_type' => $post_type,
            'all_post_taxonomies' => $all_post_taxonomies ?? null,
        ]);
    }

    /**
     * Create new resource
     */
    public function store(Request $request)
    {

        $post_type_taxonomy = PostTypeTaxonomy::with('default_language_content')->find($request->id);
        if (!$post_type_taxonomy) return redirect(route('admin.posts.index'));

        $post_type = PostType::find($post_type_taxonomy->post_type_id);

        // position
        if (!($request->position ?? null)) {
            if (!$request->parent_id) $last_item = PostTaxonomy::where('post_type_taxonomy_id', $post_type_taxonomy->id)->whereNull('parent_id')->orderByDesc('position')->first();
            else $last_item = PostTaxonomy::where(['parent_id' => $request->parent_id, 'post_type_taxonomy_id' => $post_type_taxonomy->id])->orderByDesc('position')->first();
            $last_pos = $last_item->position ?? 0;
            $next_pos = $last_pos + 1;
        } else $next_pos = $request->position;

        $post_taxonomy = PostTaxonomy::create([
            'post_type_taxonomy_id' => $post_type_taxonomy->id,
            'post_type_id' => $post_type->id,
            'parent_id' => $request->parent_id ?? null,
            'active' => $request->has('active') ? 1 : 0,
            'position' => $next_pos,
            'icon' => $request->icon,
            'user_id' => Auth::user()->id,
        ]);

        foreach (admin_languages() as $lang) {
            $name_key = 'name_' . $lang->id;
            $slug_key = 'slug_' . $lang->id;
            $description_key = 'description_' . $lang->id;
            $meta_title_key = 'meta_title_' . $lang->id;
            $meta_description_key = 'meta_description_' . $lang->id;

            if ($request->$slug_key) $taxonomy_lang_slug = Str::slug($request->$slug_key, '-');
            else $taxonomy_lang_slug = Str::slug($request->$name_key, '-');

            // Check for duplicate slug (same taxonomy and language). If exists, add ID in the slug 
            //if (PostTaxonomyContent::where(['taxonomy' => $taxonomy, 'lang_id' => $lang->id, 'slug' => $taxonomy_lang_slug])->exists()) $taxonomy_lang_slug = $taxonomy_lang_slug . '-' . $item->id;

            // Check for duplicate slug (same taxonomy and language).
            if (PostTaxonomyContent::where(['post_taxonomy_id' => $post_taxonomy->id, 'lang_id' => $lang->id, 'slug' => $taxonomy_lang_slug])->exists()) $taxonomy_lang_slug = $taxonomy_lang_slug . '-' . $item->id;

            $post_taxonomy_content = PostTaxonomyContent::create([
                'post_taxonomy_id' => $post_taxonomy->id,
                'lang_id' => $lang->id,
                'name' => $request->$name_key,
                'slug' => $taxonomy_lang_slug,
                'description' => $request->$description_key,
                'meta_title' => $request->$meta_title_key,
                'meta_description' => $request->$meta_description_key,
            ]);

            $post_taxonomy_content_url_path = PostFunctions::get_post_taxonomy_url_path($post_taxonomy->id, $lang->id) ?? null;
            $post_taxonomy_content->update(['url_path' => $post_taxonomy_content_url_path]);
        }

        // process image        
        if ($request->hasFile('image')) {
            $media = FileFunctions::store_image($request->file('image'));
            if ($media) {
                $post_taxonomy->update(['media_id' => $media->id]);
            } else
                $upload_fails = true;
        }

        return redirect(route('admin.post-taxonomies.index', ['id' => $post_type_taxonomy->id]))->with('success', 'created')->with('upload_fails', $upload_fails ?? null);
    }


    /**
     * Update the specified resource     
     */
    public function update(Request $request)
    {
        $post_taxonomy = PostTaxonomy::with('default_language_content')->find($request->id);
        if (!$post_taxonomy) return redirect(route('admin.posts.index'))->withErrors('Forbidden');

        // position
        if (!($request->position ?? null)) {
            if (!$request->parent_id) $last_item = Taxonomy::where('taxonomy', $taxonomy)->whereNull('parent_id')->where('id', '!=', $request->id)->orderByDesc('position')->first();
            else $last_item = Taxonomy::where('taxonomy', $taxonomy)->where('parent_id', $request->parent_id)->where('id', '!=', $request->id)->orderByDesc('position')->first();
            $last_pos = $last_item->position ?? 0;
            $next_pos = $last_pos + 1;
        } else $next_pos = $request->position;

        PostTaxonomy::where('id', $request->id)->update([
            'parent_id' => $request->parent_id ?? null,
            'active' => $request->has('active') ? 1 : 0,
            'position' => $next_pos,
            'icon' => $request->icon,
        ]);

        foreach (admin_languages() as $lang) {
            $name_key = 'name_' . $lang->id;
            $slug_key = 'slug_' . $lang->id;
            $description_key = 'description_' . $lang->id;
            $meta_title_key = 'meta_title_' . $lang->id;
            $meta_description_key = 'meta_description_' . $lang->id;

            if ($request->$slug_key) $taxonomy_lang_slug = Str::slug($request->$slug_key, '-');
            else $taxonomy_lang_slug = Str::slug($request->$name_key, '-');

            // Check for duplicate slug (same taxonomy and language). If exists, add ID in the slug 
            if (PostTaxonomyContent::where('post_taxonomy_id', '!=', $request->id)->where('lang_id', $lang->id)->where('slug', $taxonomy_lang_slug)->exists()) $taxonomy_lang_slug = $taxonomy_lang_slug . '-' . $request->id;

            $post_taxonomy_content = PostTaxonomyContent::updateOrInsert(
                ['post_taxonomy_id' => $request->id, 'lang_id' => $lang->id],
                [
                    'name' => $request->$name_key,
                    'slug' => $taxonomy_lang_slug,
                    'description' => $request->$description_key,
                    'meta_title' => $request->$meta_title_key,
                    'meta_description' => $request->$meta_description_key,
                ]
            );

            $post_taxonomy_content_url_path = PostFunctions::get_post_taxonomy_url_path($request->id, $lang->id) ?? null;
            $post_taxonomy_content->update(['url_path' => $post_taxonomy_content_url_path]);
        }

        // process image        
        if ($request->hasFile('image')) {
            $media = FileFunctions::store_image($request->file('image'), $post_taxonomy->media_id);
            if ($media) {
                $post_taxonomy->update(['media_id' => $media->id]);
            } else
                $upload_fails = true;
        }

        return redirect(route('admin.post-taxonomies.index', ['id' => $post_taxonomy->post_type_taxonomy_id]))->with('success', 'updated')->with('upload_fails', $upload_fails ?? null);
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {
        $post_taxonomy = PostTaxonomy::find($request->id);
        if (!$post_taxonomy) return redirect(route('admin.post-taxonomies.index', ['id' => $post_taxonomy->post_type_taxonomy_id]));

        PostTaxonomyRelation::where('post_taxonomy_id', $request->id)->delete();
        PostTaxonomy::where('id', $request->id)->delete();
        PostTaxonomy::where('parent_id', $request->id)->delete();

        return redirect(route('admin.post-taxonomies.index', ['id' => $post_taxonomy->post_type_taxonomy_id]))->with('success', 'deleted');
    }


    /**
     * Ajax sortable
     */
    public function sortable(Request $request)
    {
        $taxonomy = $request->taxonomy;
        $this->check_taxonomy_term_exists($taxonomy);

        $i = 1;

        $items = $request->all();

        foreach ($items['item'] as $key => $value) {

            Taxonomy::where('taxonomy', $taxonomy)->where('id', $value)->update([
                'position' => $i,
            ]);

            $i++;
        }
    }
}
