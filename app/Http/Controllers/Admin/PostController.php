<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use App\Models\Post;
use App\Models\PostContent;
use App\Models\PostType;
use App\Models\PostTaxonomy;
use App\Models\TaxonomyTerm;
use App\Models\Taxonomy;
use App\Models\Block;
use App\Models\BlockType;
use App\Models\Media;
use App\Models\Language;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Str;
use Auth;

class PostController extends Controller
{

    /**
     * Display all posts
     */
    public function index(Request $request)
    {
        // check if user can view items
        if ($request->user()->cannot('view', Post::class)) return redirect(route('admin'))->withErrors('Forbidden');

        $type = $request->type ?? 'post'; // post type
        $this->check_post_type_exists($type);
        $taxonomy_terms = TaxonomyTerm::with('taxonomies')->where(['post_type' => $type, 'active' => 1, 'admin_filter' => 1])->orderBy('position')->get();
        $post_type = PostType::where(['type' => $type, 'active' => 1])->first();

        $search_terms = $request->search_terms;
        $search_status = $request->search_status;
        $search_categ_id = $request->search_categ_id;
        $search_tag_id = $request->search_tag_id;
        $search_sticky = $request->search_sticky;

        $posts = Post::with('user', 'taxonomies')->where('type', $type)->whereNull('deleted_at');

        // check if user can view own items only
        if (!$request->user()->can('viewAny', Post::class)) $posts = $posts->where('user_id', $request->user()->id);

        if ($search_status)
            $posts = $posts->where('posts.status', 'like', $search_status);

        if ($search_terms)
            $posts = $posts->where(function ($query) use ($search_terms) {
                $query->where('posts.title', 'like', "%$search_terms%")
                    ->orWhere('posts.search_terms', 'like', "%$search_terms%");
            });

        if ($search_categ_id) {
            $categ = PostCateg::find($search_categ_id);
            $categ_tree_ids = $categ->tree_ids ?? null;
            if ($categ_tree_ids)
                $categ_tree_ids_array = explode(',', $categ_tree_ids);
            else
                $categ_tree_ids_array = array();
            $posts = $posts->whereIn('posts.categ_id', $categ_tree_ids_array);
        }

        if ($search_sticky == 1)
            $posts = $posts->where('posts.sticky', 1);

        $posts = $posts->orderByDesc('id')->paginate(20);

        return view('admin.index', [
            'view_file' => 'admin.posts.index',            
            'active_menu' => $type ?? null,
            'menu_section' => 'posts',
            'search_terms' => $search_terms,
            'search_status' => $search_status,
            'search_sticky' => $search_sticky,
            'search_categ_id' => $search_categ_id,
            'search_tag_id' => $search_tag_id,
            'posts' => $posts,
            'type' => $type ?? null, // String (Post type)
            'post_type' => $post_type ?? null, // Object  
            'taxonomy_terms' => $taxonomy_terms ?? null, // Object
        ]);
    }


    /**
     * Show page to add new resource
     */
    public function create(Request $request)
    {
        if ($request->user()->cannot('create', Post::class)) return redirect(route('admin.posts.index'))->withErrors('Forbidden');

        $type = $request->type ?? 'post'; // post type
        $this->check_post_type_exists($type);
        $taxonomy_terms = TaxonomyTerm::with('taxonomies')->where(['post_type' => $type, 'active' => 1, 'admin_filter' => 1])->orderBy('position')->get();
        $post_type = PostType::where(['type' => $type, 'active' => 1])->first();

        return view('admin.index', [
            'view_file' => 'admin.posts.create',
            'active_menu' => $type ?? null,
            'type' => $type ?? null, // String (post type)
            'post_type' => $post_type ?? null, // Object  
            'taxonomy_terms' => $taxonomy_terms ?? null, // Object
            'root_pages' => Post::where('type', 'page')->whereNull('parent_id')->get(), // for pages post_type only
        ]);
    }


    /**
     * Create new resource
     */
    public function store(Request $request)
    {
        if ($request->user()->cannot('create', Post::class)) return redirect(route('admin.posts.index'))->withErrors('Forbidden');

        $type = $request->type ?? 'post'; // post type
        $this->check_post_type_exists($type);

        $post = Post::create([
            'type' => $type,
            'user_id' => Auth::user()->id,
            'status' => 'draft',
            'sticky' => $request->has('sticky') ? 1 : 0,
            'disable_comments' => $request->has('disable_comments') ? 1 : 0,
            'disable_likes' => $request->has('disable_likes') ? 1 : 0,
            'parent_id' => $request->parent_id ?? null, // for "pages" only
        ]);

        foreach (admin_languages() as $lang) {
            $title_key = 'title_' . $lang->id;
            $summary_key = 'summary_' . $lang->id;
            $search_terms_key = 'search_terms_' . $lang->id;
            $slug_key = 'slug_' . $lang->id;
            $meta_title_key = 'meta_title_' . $lang->id;
            $meta_description_key = 'meta_description_' . $lang->id;

            if ($request->$slug_key) $post_content_slug = Str::slug($request->$slug_key, '-');
            else $post_content_slug = Str::slug($request->$title_key, '-');

            // Check for duplicate (same post type, salug and language). If exists, add ID in the slug             
            $post_same_lang_and_slug = PostContent::where('lang_id', $lang->id)->where('slug', $post_content_slug)->first();
            if ($post_same_lang_and_slug) {
                if (Post::where(['id' => $post_same_lang_and_slug->id, 'type' => $post->type])->exists()) {
                    if ($type == $post->type) $post_content_slug = $post_content_slug . '-' . $post->id;
                }
            }

            $path = Post::generate_url($request->id, $lang->id);

            PostContent::create([
                'post_id' => $post->id,
                'lang_id' => $lang->id,
                'title' => $request->$title_key,
                'slug' => $post_content_slug,
                'url' => $path ?? null,
                'summary' => $request->$summary_key,
                'search_terms' => $request->$search_terms_key,
                'meta_title' => $request->$meta_title_key,
                'meta_description' => $request->$meta_description_key,
            ]);
        }

        // process image        
        if ($request->hasFile('image')) {
            $media = Media::store_image($request->file('image'));
            if ($media) {
                $post->update(['media_id' => $media->id]);
                $media->update(['post_id' => $post->id]);
            } else
                $upload_fails = true;
        }

        Taxonomy::recount_posts($type);

        return redirect(route('admin.posts.content', ['id' => $post->id, 'type' => $type]))->with('success', 'post_created')->with('upload_fails', $upload_fails ?? null);
    }


    /**
     * Show form to edit resource     
     */
    public function show(Request $request)
    {
        $post = Post::with('user')->where('id', $request->id);

        // check if user can view own posts only
        if (!$request->user()->can('viewAny', Post::class)) $post = $post->where('user_id', $request->user()->id);

        $post = $post->first();

        if (!$post) return redirect(route('admin.posts.index'));

        if ($request->user()->cannot('view', $post)) return redirect(route('admin.posts.index'))->withErrors('Forbidden');

        $type = $post->type ?? 'post'; // post type
        $this->check_post_type_exists($type);

        $taxonomy_terms = TaxonomyTerm::with('taxonomies')->where(['post_type' => $type, 'active' => 1, 'admin_filter' => 1])->orderBy('position')->get();
        $post_type = PostType::where(['type' => $type, 'active' => 1])->first();

        $author_count_published_posts = Post::where('user_id', $post->user_id)->where('status', 'active')->count();
        $author_count_pending_posts = Post::where('user_id', $post->user_id)->where('status', 'pending')->count();

        // post taxonomies (array)
        $post_taxonomies_array = PostTaxonomy::where('post_id', $post->id)->pluck('taxonomy_id')->toarray();

        $post_id = $post->id;
        $content_langs = Language::where('status', '!=', 'disabled')->with(['post_content' => function ($query) use ($post_id) {
            $query->where('post_id', $post_id);
        }])->orderByDesc('is_default')->get();

        // previews:
        $preview_urls = array();
        foreach (Language::get_languages() as $lang) {
            $preview_urls[$lang->name] = PostContent::where(['post_id' => $post->id, 'lang_id' => $lang->id])->value('url');
        }

        return view('admin.index', [
            'view_file' => 'admin.posts.update',
            'active_menu' => $type ?? null,
            'menu_section' => 'posts',
            'post_menu_tab' => 'details',
            'post' => $post,
            'tags' => $tags_array ?? null,
            'post_taxonomies_array' => $post_taxonomies_array,
            'author_count_published_posts' => $author_count_published_posts,
            'author_count_pending_posts' => $author_count_pending_posts,
            'content_langs' => $content_langs,
            'preview_urls' => $preview_urls,

            'type' => $type ?? null, // String
            'post_type' => $post_type ?? null, // Object  
            'taxonomy_terms' => $taxonomy_terms ?? null, // Object
            'root_pages' => Post::where('type', 'page')->whereNull('parent_id')->get(), // for pages post_type only
        ]);
    }


    /**
     * Update the specified resource     
     */
    public function update(Request $request)
    {
        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts'));

        if ($request->user()->cannot('update', $post)) return redirect(route('admin.posts.index'))->withErrors('Forbidden');

        $this->check_post_type_exists($post->type);

        Post::where('id', $request->id)->update([
            'status' => $request->status,
            'sticky' => $request->has('sticky') ? 1 : 0,
            'disable_comments' => $request->has('disable_comments') ? 1 : 0,
            'disable_likes' => $request->has('disable_likes') ? 1 : 0,
            'parent_id' => $request->parent_id ?? null, // for "pages" only
        ]);

        foreach (admin_languages() as $lang) {
            $title_key = 'title_' . $lang->id;
            $summary_key = 'summary_' . $lang->id;
            $search_terms_key = 'search_terms_' . $lang->id;
            $slug_key = 'slug_' . $lang->id;
            $meta_title_key = 'meta_title_' . $lang->id;
            $meta_description_key = 'meta_description_' . $lang->id;

            if ($request->$slug_key) $post_content_slug = Str::slug($request->$slug_key, '-');
            else $post_content_slug = Str::slug($request->$title_key, '-');

            // Check for duplicate (same post type, slug and language). If exists, add ID in the slug             
            $post_same_lang_and_slug = PostContent::where('lang_id', $lang->id)->where('slug', $post_content_slug)->where('post_id', '!=', $post->id)->first();
            if ($post_same_lang_and_slug) {
                if (Post::where(['id' => $post_same_lang_and_slug->id, 'type' => $post->type])->exists()) {
                    $post_content_slug = $post_content_slug . '-' . $post->id;
                }
            }

            $path = Post::generate_url($request->id, $lang->id);

            PostContent::updateOrInsert(
                ['post_id' => $request->id, 'lang_id' => $lang->id],
                [
                    'title' => $request->$title_key,
                    'slug' => $post_content_slug,
                    'url' => $path ?? null,
                    'summary' => $request->$summary_key,
                    'search_terms' => $request->$search_terms_key,
                    'meta_title' => $request->$meta_title_key,
                    'meta_description' => $request->$meta_description_key,
                ]
            );
        }

        if ($post->type != 'page') {
            // Hierarchical taxonomies
            $hierarchical_taxonomies = $request->only(['taxonomies']); // array        
            if (count($hierarchical_taxonomies['taxonomies'] ?? []) > 0) {
                foreach ($hierarchical_taxonomies['taxonomies'] as $hierarchical_taxonomy_id) {
                    //echo $hierarchical_taxonomy_id . "<br>";
                    $taxonomy_term = Taxonomy::where('id', $hierarchical_taxonomy_id)->value('taxonomy');
                    $taxonomy_term_id = TaxonomyTerm::where('taxonomy', $taxonomy_term)->value('id');
                    PostTaxonomy::updateOrCreate(['post_id' => $post->id, 'taxonomy_id' => $hierarchical_taxonomy_id, 'taxonomy_term_id' => $taxonomy_term_id]);
                }
            }

            // Delete taxonomies not sent and found in database
            $existingTaxonomies = PostTaxonomy::where('post_id', $post->id)->pluck('taxonomy_id')->toArray();
            foreach ($existingTaxonomies as $existing_taxonomy_id) {
                if (!in_array($existing_taxonomy_id, $hierarchical_taxonomies['taxonomies'] ?? array()))
                    PostTaxonomy::where(['post_id' => $post->id, 'taxonomy_id' => $existing_taxonomy_id])->delete();
            }


            // Non-Hierarchical taxonomies
            $non_hierarchical_taxonomies = $request->only(['non-hierarchical-taxonomies']); // array
            if ($non_hierarchical_taxonomies ?? null) {
                if (count($non_hierarchical_taxonomies['non-hierarchical-taxonomies']) > 0) {
                    foreach ($non_hierarchical_taxonomies['non-hierarchical-taxonomies'] as $non_hierarchical_taxonomy_items_json) {
                        $non_hierarchical_taxonomy_items = json_decode($non_hierarchical_taxonomy_items_json); // array
                        if (count($non_hierarchical_taxonomy_items ?? []) > 0) {
                            foreach ($non_hierarchical_taxonomy_items as $non_hierarchical_taxonomy_item) {
                                $non_hierarchical_taxonomy_item_id = $non_hierarchical_taxonomy_item->id;
                                //dd($non_hierarchical_taxonomy_item_id);
                                $taxonomy_term = Taxonomy::where('id', $non_hierarchical_taxonomy_item_id)->value('taxonomy');
                                $taxonomy_term_id = TaxonomyTerm::where('taxonomy', $taxonomy_term)->value('id');
                                PostTaxonomy::updateOrCreate(['post_id' => $post->id, 'taxonomy_id' => $non_hierarchical_taxonomy_item_id, 'taxonomy_term_id' => $taxonomy_term_id]);
                            }
                        }
                    }
                }
            }
        } // end IF post!=page


        // process image        
        if ($request->hasFile('image')) {
            $media = Media::store_image($request->file('image'), $post->media_id);
            if ($media) {
                $post->update(['media_id' => $media->id]);
                $media->update(['post_id' => $post->id]);
            } else
                $upload_fails = true;
        }

        Taxonomy::recount_posts($post->type);

        return redirect(route('admin.posts.show', ['id' => $request->id]))->with('success', 'updated')->with('upload_fails', $upload_fails ?? null);
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {
        $post = Post::find($request->id);
        
        if (!$post) return redirect(route('admin.posts.index'));

        if ($request->user()->cannot('delete', $post)) return redirect(route('admin.posts.index'))->withErrors('Forbidden');

        $type = $request->type ?? 'post'; // post type
        $this->check_post_type_exists($type);

        Post::where('id', $request->id)->delete(); // soft delete

        return redirect(route('admin.posts.index', ['type' => $type]))->with('success', 'deleted');
    }


    /**
     * Remove post main image
     */
    public function delete_main_image(Request $request)
    {
        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        if ($request->user()->cannot('update', $post)) return redirect(route('admin.posts.index'))->withErrors('Forbidden');

        if ($post->media_id) Media::delete_media($post->media_id);

        $post->update(['media_id' => null]);

        return redirect(route('admin.posts.show', ['id' => $request->id]))->with('success', 'main_image_deleted');
    }


    /**
     * Show form to add content
     */
    public function content(Request $request)
    {
        $post = Post::with('user')->find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        if ($request->user()->cannot('view', $post)) return redirect(route('admin.posts.index'))->withErrors('Forbidden');

        $type = $post->type ?? 'post'; // post type
        $this->check_post_type_exists($type);
        $post_type = PostType::where(['type' => $type, 'active' => 1])->first();

        return view('admin.index', [
            'view_file' => 'admin.posts.content',            
            'active_menu' => $type ?? null,
            'menu_section' => 'posts',
            'post_menu_tab' => 'content',

            'post' => $post,
            'post_type' => $post_type ?? null, // Object  
            'type' => $type ?? null, // String
            'block_types' => BlockType::get_block_types()
        ]);
    }


    /**
     * Update post content   
     */
    public function update_content(Request $request)
    {
        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        if ($request->user()->cannot('update', $post)) return redirect(route('admin.posts.index'))->withErrors('Forbidden');

        $type = $request->type ?? 'post'; // post type
        $this->check_post_type_exists($type);

        $last_pos = Block::where('post_id', $request->id)->orderByDesc('position')->value('position');
        $position = ($last_pos ?? 0) + 1;

        $block = Block::create([
            'type_id' => $request->type_id,
            'position' => $position,
            'post_id' => $post->id,
            'user_id' => Auth::user()->id
        ]);

        Block::regenerate_post_blocks($request->id);

        return redirect(route('admin.blocks.show', ['id' => $block->id, 'type_id' => $request->type_id]));
    }



    /**
     * Remove the specified block content
     */
    public function delete_content(Request $request)
    {
        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        if ($request->user()->cannot('update', $post)) return redirect(route('admin.posts.index'))->withErrors('Forbidden');

        Block::where('id', $request->block_id)->delete();

        Block::regenerate_post_blocks($request->id);

        return redirect(route('admin.posts.content', ['id' => $request->id]))->with('success', 'deleted');
    }


    /**
     * Ajax sortable
     */
    public function sortable(Request $request)
    {
        if ($request->user()->cannot('update', Post::class)) return;

        $i = 0;
        $records = $request->all();

        foreach ($records['item'] as $key => $value) {

            Block::where('post_id', $request->id)
                ->where('id', $value)
                ->update([
                    'position' => $i,
                ]);

            $i++;
        }

        Block::regenerate_post_blocks($request->id);
    }



    public function check_post_type_exists($type)
    {
        if ((PostType::where('type', $type))->doesntExist()) return redirect(route('admin'));
        return;
    }
}
