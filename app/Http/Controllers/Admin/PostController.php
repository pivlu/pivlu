<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Models\Post;
use App\Models\PostContent;
use App\Models\PostType;
use App\Models\PostTaxonomy;
use App\Models\PostTaxonomyRelation;
use App\Models\PostTypeTaxonomy;
use App\Models\Block;
use App\Models\BlockType;
use App\Models\Language;
use App\Functions\PostFunctions;
use App\Functions\FileFunctions;
use App\Functions\BlockFunctions;
use Auth;

class PostController extends Controller
{

    /**
     * Display all posts
     */
    public function index(Request $request)
    {
        $post_type_id = $request->post_type_id;
        if (!$post_type_id) return redirect(route('admin'));
        $this->check_post_type_exists($post_type_id);

        $post_type = PostType::with('default_language_content')->find($post_type_id);

        $search_terms = $request->search_terms;
        $search_status = $request->search_status;
        $search_taxonomy_ids = $request->search_taxonomy_ids ?? [];
        //dd($search_taxonomy_ids);
        $search_sticky = $request->search_sticky;

        $posts = Post::with('user', 'taxonomies')->where('post_type_id', $post_type_id);

        if ($search_status)
            $posts = $posts->where('status', $search_status);

        if ($search_terms)
            $posts = $posts->whereHas('default_language_content', function ($query) use ($search_terms) {
                $query->where('title', 'like', "%$search_terms%")->orWhere('search_terms', 'like', "%$search_terms%");
            });

        if (count($search_taxonomy_ids) > 0)
            foreach ($search_taxonomy_ids as $search_taxonomy_id) {                
                if ($search_taxonomy_id) {                    
                    $posts = $posts->whereHas('taxonomies', function ($query) use ($search_taxonomy_id) {
                        $query->where('post_taxonomy_id', $search_taxonomy_id);
                    });
                }
            }

        if ($search_sticky == 1)
            $posts = $posts->where('sticky', 1);

        $posts = $posts->orderByDesc('is_homepage')->orderByDesc('id')->paginate(20);

        return view('admin.index', [
            'view_file' => 'admin.posts.index',
            'active_menu' => 'website',
            'active_submenu' => 'post_type_' . $post_type_id ?? null,
            'menu_section' => 'posts',
            'search_terms' => $search_terms,
            'search_status' => $search_status,
            'search_sticky' => $search_sticky,
            'search_taxonomy_ids' => $search_taxonomy_ids,
            'posts' => $posts,
            'post_type' => $post_type,
            'post_type_taxonomy_terms' => PostFunctions::get_post_type_taxonomies($post_type_id),
        ]);
    }


    /**
     * Show page to add new resource
     */
    public function create(Request $request)
    {

        $post_type_id = $request->post_type_id;
        if (!$post_type_id) return redirect(route('admin'));
        $this->check_post_type_exists($post_type_id);

        $post_type = PostType::find($post_type_id);

        return view('admin.index', [
            'view_file' => 'admin.posts.create',
            'active_menu' => 'website',
            'active_submenu' => 'post_type_' . $post_type_id ?? null,
            'post_type_id' => $post_type_id,
            'post_type' => $post_type ?? null,

            'post_type_taxonomy_terms' => PostFunctions::get_post_type_taxonomies($post_type_id),
            'root_pages' => PostType::get_root_pages(), // for pages type only            
        ]);
    }


    /**
     * Create new resource
     */
    public function store(Request $request)
    {

        $post_type_id = $request->post_type_id;
        if (!$post_type_id) return redirect(route('admin2'));
        $this->check_post_type_exists($post_type_id);

        $post = Post::create([
            'post_type_id' => $post_type_id,
            'user_id' => Auth::user()->id,
            'status' => 'draft',
            'sticky' => $request->has('sticky') ? 1 : 0,
            'parent_id' => $request->parent_id ?? null, // for "pages" only
        ]);

        foreach (admin_languages() as $lang) {
            $title_key = 'title_' . $lang->id;
            $summary_key = 'summary_' . $lang->id;
            $search_terms_key = 'search_terms_' . $lang->id;
            $slug_key = 'slug_' . $lang->id;
            $meta_title_key = 'meta_title_' . $lang->id;
            $meta_description_key = 'meta_description_' . $lang->id;

            if ($request->$slug_key) $post_content_slug = Str::slug($request->$slug_key, '-');
            else $post_content_slug = Str::slug($request->$title_key, '-');

            // Check for duplicate (same post type, slug and language). If exists, add ID in the slug             
            $post_same_lang_and_slug = PostContent::where('lang_id', $lang->id)->where('slug', $post_content_slug)->first();
            if ($post_same_lang_and_slug) {
                if (Post::where(['id' => $post_same_lang_and_slug->id, 'post_type_id' => $post->post_type_id])->exists())
                    $post_content_slug = $post_content_slug . '-' . $post->id;
            }

            //$path = PostFunctions::get_post_url_path($request->id, $lang->id);

            PostContent::create([
                'post_id' => $post->id,
                'lang_id' => $lang->id,
                'title' => $request->$title_key,
                'slug' => $post_content_slug,
                'url' => $path ?? null,
                'summary' => $request->$summary_key,
                'search_terms' => $request->$search_terms_key,
                'meta_title' => $request->$meta_title_key,
                'meta_description' => $request->$meta_description_key,
            ]);
        }

        // process image        
        if ($request->hasFile('image')) {
            $media = FileFunctions::store_image($request->file('image'));
            if ($media) {
                $post->update(['media_id' => $media->id]);
                $media->update(['post_id' => $post->id]);
            } else
                $upload_fails = true;
        }

        PostFunctions::post_taxonomy_recount_posts($post_type_id);

        return redirect(route('admin.posts.content', ['id' => $post->id, 'post_type_id' => $post_type_id]))->with('success', 'post_created')->with('upload_fails', $upload_fails ?? null);
    }


    /**
     * Show form to edit resource     
     */
    public function show(Request $request)
    {
        $post = Post::with('user', 'default_language_content')->where('id', $request->id);

        $post = $post->first();

        if (!$post) return redirect(route('admin.posts.index'));

        $post_type = PostType::find($post->post_type_id);

        $author_count_published_posts = Post::where('user_id', $post->user_id)->where('status', 'active')->count();
        $author_count_pending_posts = Post::where('user_id', $post->user_id)->where('status', 'pending')->count();

        $post_id = $post->id;
        $content_langs = Language::where('status', '!=', 'disabled')->with(['post_content' => function ($query) use ($post_id) {
            $query->where('post_id', $post_id);
        }])->orderByDesc('is_default')->get();

        // previews:
        $preview_urls = array();
        foreach (Language::get_languages() as $lang) {
            $preview_urls[$lang->name] = PostContent::where(['post_id' => $post->id, 'lang_id' => $lang->id])->value('url');
        }


        // post taxonomies (array)
        $post_taxonomies_array = PostTaxonomyRelation::where('post_id', $post->id)->pluck('post_taxonomy_id')->toarray();


        if ($post->is_homepage == '1') $view_file = 'update-homepage';
        else $view_file = 'update';

        return view('admin.index', [
            'view_file' => 'admin.posts.' . $view_file,
            'active_menu' => 'website',
            'active_submenu' => 'post_type_' . $post_type->id ?? null,            
            'menu_section' => 'posts',
            'post_menu_tab' => 'details',
            'post' => $post,
            'author_count_published_posts' => $author_count_published_posts,
            'author_count_pending_posts' => $author_count_pending_posts,
            'content_langs' => $content_langs,
            'preview_urls' => $preview_urls,

            'post_type' => $post_type,
            'post_type_taxonomy_terms' => PostFunctions::get_post_type_taxonomies($post_type->id),
            'root_pages' => PostType::get_root_pages(), // for pages type only
            'post_taxonomies_array' => $post_taxonomies_array,
        ]);
    }


    /**
     * Update the specified resource     
     */
    public function update(Request $request)
    {
        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts'));

        $post_type = PostType::find($post->post_type_id);
        if (!$post_type) return redirect(route('admin.posts'));

        Post::where('id', $request->id)->update([
            'status' => $request->status,
            'sticky' => $request->has('sticky') ? 1 : 0,
            'disable_comments' => $request->has('disable_comments') ? 1 : 0,
        ]);

        foreach (admin_languages() as $lang) {
            $title_key = 'title_' . $lang->id;
            $summary_key = 'summary_' . $lang->id;
            $search_terms_key = 'search_terms_' . $lang->id;
            $slug_key = 'slug_' . $lang->id;
            $meta_title_key = 'meta_title_' . $lang->id;
            $meta_description_key = 'meta_description_' . $lang->id;

            if ($request->$slug_key) $post_content_slug = Str::slug($request->$slug_key, '-');
            else $post_content_slug = Str::slug($request->$title_key, '-');

            // Check for duplicate (same post type, slug and language). If exists, add ID in the slug             
            $post_same_lang_and_slug = PostContent::where('lang_id', $lang->id)->where('slug', $post_content_slug)->where('post_id', '!=', $post->id)->first();
            if ($post_same_lang_and_slug) {
                if (Post::where(['id' => $post_same_lang_and_slug->id, 'post_type_id' => $post_type->id])->exists()) {
                    $post_content_slug = $post_content_slug . '-' . $post->id;
                }
            }

            //if($post->is_homepage != 1) $path = PostFunctions::get_post_url_path($request->id, $lang->id);

            PostContent::updateOrInsert(
                ['post_id' => $request->id, 'lang_id' => $lang->id],
                [
                    'title' => $request->$title_key ?? null,
                    'slug' => $post_content_slug ?? null,
                    'url' => $path ?? null,
                    'summary' => $request->$summary_key ?? null,
                    'search_terms' => $request->$search_terms_key ?? null,
                    'meta_title' => $request->$meta_title_key ?? null,
                    'meta_description' => $request->$meta_description_key ?? null,
                ]
            );
        }


        if ($post_type->type != 'page') {
            // Hierarchical taxonomies
            $hierarchical_taxonomies = $request->only(['taxonomies']); // array        
            if (count($hierarchical_taxonomies['taxonomies'] ?? []) > 0) {
                foreach ($hierarchical_taxonomies['taxonomies'] as $hierarchical_taxonomy_id) {
                    $post_type_taxonomy_id = PostTaxonomy::where('id', $hierarchical_taxonomy_id)->value('post_type_taxonomy_id');
                    $taxonomy_term_id = PostTypeTaxonomy::where('post_type_id', $post_type_taxonomy_id)->value('id');
                    PostTaxonomyRelation::updateOrInsert(['post_id' => $post->id, 'post_taxonomy_id' => (int)$hierarchical_taxonomy_id, 'post_type_taxonomy_id' => $post_type_taxonomy_id]);
                }
            }

            // Delete taxonomies not sent and found in database
            $existingTaxonomies = PostTaxonomyRelation::where('post_id', $post->id)->pluck('post_taxonomy_id')->toArray();
            foreach ($existingTaxonomies as $existing_taxonomy_id) {
                if (!in_array($existing_taxonomy_id, $hierarchical_taxonomies['taxonomies'] ?? array()))
                    PostTaxonomyRelation::where(['post_id' => $post->id, 'post_taxonomy_id' => $existing_taxonomy_id])->delete();
            }


            // Non-Hierarchical taxonomies
            $non_hierarchical_taxonomies = $request->only(['non-hierarchical-taxonomies']); // array
            if ($non_hierarchical_taxonomies ?? null) {
                if (count($non_hierarchical_taxonomies['non-hierarchical-taxonomies']) > 0) {
                    foreach ($non_hierarchical_taxonomies['non-hierarchical-taxonomies'] as $non_hierarchical_taxonomy_items_json) {
                        $non_hierarchical_taxonomy_items = json_decode($non_hierarchical_taxonomy_items_json); // array
                        if (count($non_hierarchical_taxonomy_items ?? []) > 0) {
                            foreach ($non_hierarchical_taxonomy_items as $non_hierarchical_taxonomy_item) {
                                $non_hierarchical_taxonomy_item_id = $non_hierarchical_taxonomy_item->id;
                                $post_type_taxonomy_id = PostTaxonomy::where('id', $non_hierarchical_taxonomy_item_id)->value('post_type_taxonomy_id');
                                $taxonomy_term_id = PostTypeTaxonomy::where('post_type_id', $post_type_taxonomy_id)->value('id');
                                PostTaxonomyRelation::updateOrInsert(['post_id' => $post->id, 'post_taxonomy_id' => (int)$non_hierarchical_taxonomy_item_id, 'post_type_taxonomy_id' => $taxonomy_term_id]);
                            }
                        }
                    }
                }
            }
        } // end IF post!=page


        // process image        
        if ($request->hasFile('image')) {
            $media = FileFunctions::store_image($request->file('image'), $post->media_id);
            if ($media) {
                $post->update(['media_id' => $media->id]);
                $media->update(['post_id' => $post->id]);
            } else
                $upload_fails = true;
        }

        PostFunctions::post_taxonomy_recount_posts($post->post_type_id);

        return redirect(route('admin.posts.show', ['id' => $request->id]))->with('success', 'updated')->with('upload_fails', $upload_fails ?? null);
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {
        $post = Post::find($request->id);

        if (!$post) return redirect(route('admin.posts.index'));

        $this->check_post_type_exists($post->post_type_id);

        Post::where('id', $request->id)->delete(); // soft delete

        return redirect(route('admin.posts.index', ['post_type_id' => $post->post_type_id]))->with('success', 'deleted');
    }


    /**
     * Remove post main image
     */
    public function delete_main_image(Request $request)
    {
        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        if ($post->media_id) FileFunctions::delete_file($post->media_id);

        $post->update(['media_id' => null]);

        return redirect(route('admin.posts.show', ['id' => $request->id]))->with('success', 'main_image_deleted');
    }


    /**
     * Show form to add content
     */
    public function content(Request $request)
    {
        $post = Post::with('user', 'default_language_content')->find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        $post_type = PostType::with('default_language_content')->find($post->post_type_id);

        return view('admin.index', [
            'view_file' => 'admin.posts.content',
            'active_menu' => 'website',
            'active_submenu' => 'post_type_' . $post_type->id ?? null,            
            'menu_section' => 'posts',
            'post_menu_tab' => 'content',

            'post' => $post,
            'post_type' => $post_type ?? null,
            'block_types' => BlockType::get_block_types()
        ]);
    }


    /**
     * Update post content   
     */
    public function update_content(Request $request)
    {
        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        $type = $request->type ?? 'post'; // post type
        $this->check_post_type_exists($type);

        $last_pos = Block::where('post_id', $request->id)->orderByDesc('position')->value('position');
        $position = ($last_pos ?? 0) + 1;

        $block = Block::create([
            'type_id' => $request->type_id,
            'position' => $position,
            'post_id' => $post->id,
            'user_id' => Auth::user()->id
        ]);

        BlockFunctions::regenerate_post_blocks($request->id);

        return redirect(route('admin.blocks.show', ['id' => $block->id, 'type_id' => $request->type_id]));
    }



    /**
     * Remove the specified block content
     */
    public function delete_content(Request $request)
    {
        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        Block::where('id', $request->block_id)->delete();

        BlockFunctions::regenerate_post_blocks($request->id);

        return redirect(route('admin.posts.content', ['id' => $request->id]))->with('success', 'deleted');
    }


    /**
     * Ajax sortable
     */
    public function sortable(Request $request)
    {
        $i = 0;
        $records = $request->all();

        foreach ($records['item'] as $key => $value) {

            Block::where('post_id', $request->id)
                ->where('id', $value)
                ->update([
                    'position' => $i,
                ]);

            $i++;
        }

        BlockFunctions::regenerate_post_blocks($request->id);
    }



    public function check_post_type_exists($post_type_id)
    {
        if ((PostType::where('id', $post_type_id))->doesntExist()) return redirect(route('admin'));
        return;
    }
}
