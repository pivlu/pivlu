<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Str;
use App\Models\Post;
use App\Models\PostType;
use App\Models\PostTypeContent;
use App\Functions\PostFunctions;

class PostTypeController extends Controller
{

    /**
     * Display all resources
     */
    public function index(Request $request)
    {
        $post_types = PostType::orderByDesc('core')->orderByDesc('active')->orderByDesc('id')->paginate(25);

        return view('admin.index', [
            'view_file' => 'admin.post-types.index',
            'active_menu' => 'website',
            'active_submenu' => 'post-types',
            'post_types' => $post_types,
        ]);
    }


    /**
     * Display resource
     */
    public function show(Request $request)
    {
        $post_type = PostType::find($request->id);
        if (!$post_type) return redirect(route('admin.post-types.index'));

        return view('admin.index', [
            'view_file' => 'admin.post-types.show',
            'active_menu' => 'website',
            'active_submenu' => 'post-types',
            'post_type' => $post_type,
        ]);
    }


    /**
     * Create new resource
     */
    public function store(Request $request)
    {
        $post_type = PostType::create([
            'admin_menu_icon' => $request->admin_menu_icon,
            'active' => $request->has('active') ? 1 : 0,
            'show_in_admin_menu' => $request->has('show_in_admin_menu') ? 1 : 0,
            'internal_only' => $request->has('internal_only') ? 1 : 0,
        ]);

        foreach (admin_languages() as $lang) {
            $name_key = 'name_' . $lang->id;
            $slug_key = 'slug_' . $lang->id;
            $label_singular_key = 'label_singular_' . $lang->id;
            $label_plural_key = 'label_plural_' . $lang->id;
            $label_create_key = 'label_create_' . $lang->id;
            $label_update_key = 'label_update_' . $lang->id;
            $label_delete_key = 'label_delete_' . $lang->id;
            $label_all_key = 'label_all_' . $lang->id;
            $label_search_key = 'label_search_' . $lang->id;

            $labels = array(
                'singular' => $request->$label_singular_key ?? $request->$name_key ?? null,
                'plural' => $request->$label_plural_key ?? $request->$name_key ?? null,
                'create' => $request->$label_create_key ?? 'Create ' . $request->$name_key,
                'update' => $request->$label_update_key ?? 'Update ' . $request->$name_key,
                'delete' => $request->$label_delete_key ?? 'Delete ' . $request->$name_key,
                'all' => $request->$label_all_key ?? 'All ' . $request->$name_key,
                'search' => $request->$label_search_key ?? 'Search ' . $request->$name_key,
            );

            $slug = $request->$slug_key ?? Str::slug($request->$name_key, '-');
            // Post type slug must be unique (for same language). If slug exists, then add the post type ID in the slug
            if (PostTypeContent::where(['slug' => $slug, 'lang_id' => $lang->id])->exists()) $slug = $slug . '-' . $post_type->id;

            PostTypeContent::create([
                'post_type_id' => $post_type->id,
                'lang_id' => $lang->id,
                'name' => $request->$name_key,
                'slug' => $slug,
                'labels' => json_encode($labels),
            ]);
        }

        return redirect(route('admin.post-types.index'))->with('success', 'created');
    }


    /**
     * Update resource
     */
    public function update(Request $request)
    {
        $post_type = PostType::find($request->id);
        if (!$post_type) return redirect(route('admin.post-types.index'));

        PostType::where('id', $request->id)->update([
            'admin_menu_icon' => $request->admin_menu_icon,
            'active' => $request->has('active') ? 1 : 0,
            'show_in_admin_menu' => $request->has('show_in_admin_menu') ? 1 : 0,
            'internal_only' => $request->has('internal_only') ? 1 : 0,
        ]);

        foreach (admin_languages() as $lang) {
            $original_slug = PostTypeContent::where(['post_type_id' => $request->id, 'lang_id' => $lang->id])->value('slug');

            $name_key = 'name_' . $lang->id;
            $slug_key = 'slug_' . $lang->id;
            $label_singular_key = 'label_singular_' . $lang->id;
            $label_plural_key = 'label_plural_' . $lang->id;
            $label_create_key = 'label_create_' . $lang->id;
            $label_update_key = 'label_update_' . $lang->id;
            $label_delete_key = 'label_delete_' . $lang->id;
            $label_all_key = 'label_all_' . $lang->id;
            $label_search_key = 'label_search_' . $lang->id;

            $labels = array(
                'singular' => $request->$label_singular_key ?? $request->$name_key ?? null,
                'plural' => $request->$label_plural_key ?? $request->$name_key ?? null,
                'create' => $request->$label_create_key ?? 'Create ' . $request->$name_key,
                'update' => $request->$label_update_key ?? 'Update ' . $request->$name_key,
                'delete' => $request->$label_delete_key ?? 'Delete ' . $request->$name_key,
                'all' => $request->$label_all_key ?? 'All ' . $request->$name_key,
                'search' => $request->$label_search_key ?? 'Search ' . $request->$name_key,
            );

            $slug = $request->$slug_key ?? Str::slug($request->$name_key, '-');
            // Post type slug must be unique (for same language). If slug exists, then add the post type ID in the slug
            if (PostTypeContent::where('slug', $slug)->where('lang_id', $lang->id)->where('post_type_id', '!=', $request->id)->exists()) $slug = $slug . '-' . $post_type->id;

            PostTypeContent::updateOrInsert(
                ['post_type_id' => $request->id, 'lang_id' => $lang->id],
                [
                    'name' => $request->$name_key,
                    'slug' => $slug,
                    'labels' => json_encode($labels),
                ]
            );     
            
            if ($original_slug != $slug) PostFunctions::regenerate_post_taxonomies_url_path_for_this_type($post_type_id = $request->id);
        }

        return redirect(route('admin.post-types.index'))->with('success', 'updated');
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {

        $post_type = PostType::find($request->id);
        if (!$post_type) return redirect(route('admin.post-types.index'));
        if ($post_type->core == 1) return redirect(route('admin.post-types.index'));

        Post::where('post_type_id', $post_type->id)->delete(); // soft delete
        $post_type->delete();

        return redirect(route('admin.post-types.index'))->with('success', 'deleted');
    }
}
