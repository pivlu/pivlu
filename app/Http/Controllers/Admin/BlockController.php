<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use DB;
use App\Models\Block;
use App\Models\Language;
use App\Models\ThemeStyle;
use App\Models\Form;
use App\Functions\ThemeFunctions;
use App\Functions\BlockFunctions;

class BlockController extends Controller
{


    /**
     * Show resource     
     */
    public function show(Request $request)
    {

        $block = Block::with('block_type')->find($request->id);
        if (!$block) return redirect(route('admin'));

        $content_langs = DB::table('pivlu_languages')
            ->select(
                'pivlu_languages.*',
                DB::raw('(SELECT content FROM pivlu_blocks_content WHERE pivlu_blocks_content.lang_id = pivlu_languages.id AND block_id = ' . $block->id . ') as block_content'),
                DB::raw('(SELECT header FROM pivlu_blocks_content WHERE pivlu_blocks_content.lang_id = pivlu_languages.id AND block_id = ' . $block->id . ') as block_header')
            )
            ->where('status', '!=', 'disabled')
            ->orderByDesc('is_default')
            ->orderBy('status')
            ->get();

        // forms (used in form block)
        //$forms = Form::where('active', 1)->orderBy('label')->get();

        if ($request->referer) $referer = $request->referer;
        else $referer = request()->headers->get('referer');

        if ($block->block_type->plugin ?? null) $view_file = 'forms::admin.blocks.' . $block->block_type->type;
        else $view_file = 'admin.blocks.block';

        return view('admin.index', [
            'view_file' => $view_file,
            'active_menu' => 'website',
            'active_submenu' => $block->module,
            'block' => $block,
            'content_langs' => $content_langs,
            'langs' => Language::get_languages(),
            'referer' => $referer,
            'font_sizes' => ThemeFunctions::font_sizes(),
            'styles' => ThemeStyle::orderBy('label')->get(),
            'forms' =>  Form::where('active', 1)->orderBy('label')->get(),
        ]);
    }


    /**
     * Update the specified resource     
     */
    public function update(Request $request)
    {

        $id = $request->id;
        $referer = $request->referer;

        $block = Block::find($request->id);
        if (!$block) return redirect(route('admin'));

        $block->update(['label' =>  $request->label ?? null, 'hidden' => $request->has('hidden') ? 1 : 0]);

        BlockFunctions::update_block($id, $block->type_id, $request);

        BlockFunctions::regenerate_post_blocks($block->post_id);

        if (($request->submit_return_to_block ?? null) == 'block') return redirect(route('admin.blocks.show', ['id' => $id, 'referer' => $referer ?? null]))->with('success', 'updated');
        elseif ($referer) return redirect($referer)->with('success', 'updated');
        else return redirect(route('admin.blocks'))->with('success', 'updated');
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {

        $block = Block::find($request->id);

        $block->delete();

        BlockFunctions::regenerate_post_blocks($block->post_id);

        return redirect(route('admin.blocks'))->with('success', 'deleted');
    }
}
