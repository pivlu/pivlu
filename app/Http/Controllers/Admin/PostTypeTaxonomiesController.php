<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\PostType;
use App\Models\TaxonomyTerm;
use Illuminate\Support\Str;

class PostTypeTaxonomiesController extends Controller
{

    /**
     * Display all resources
     */
    public function index(Request $request)
    {        
        
        if (! $request->type) return redirect(route('admin.post-types.index'));

        $post_type = PostType::where('type', $request->type)->first();
        if (! $post_type) return redirect(route('admin.post-types.index'));

        $taxonomies = TaxonomyTerm::where('post_type', $request->type)->orderBy('name')->paginate(20);

        return view('admin.index', [
            'view_file' => 'admin.config.post-type-taxonomies',
            'active_menu' => 'config',
            'active_submenu' => 'config.website',            
            'active_tab' => 'cpt',
            'post_type' => $post_type,
            'type' => $request->type,
            'taxonomies' => $taxonomies,
        ]);
    }


    /**
     * Create new resource
     */
    public function store(Request $request)
    {

        if (! $request->type) return redirect(route('admin.post-types.index'));

        $post_type = PostType::where('type', $request->type)->first();
        if (! $post_type) return redirect(route('admin.post-types.index'));

        if (! $request->name) return redirect(route('admin.post-type-taxonomies.index', ['type' => $request->type]));
        
        $taxonomy = Str::slug($request->name, '-');
        $taxonomy = $post_type->type.'-'.$taxonomy;

        if (TaxonomyTerm::where('taxonomy', $taxonomy)->exists()) return redirect(route('admin.post-type-taxonomies.index', ['type' => $request->type]))->with('error', 'duplicate');
       
        $labels = array(
            'singular' => $request->label_singular ?? $request->name,
            'plural' => $request->label_plural ?? $request->name,
            'create' => $request->label_create ?? 'Create '.$request->name,
            'update' => $request->label_update ?? 'Update '.$request->name,
            'delete' => $request->label_delete ?? 'Delete '.$request->name,
            'all' => $request->label_all ?? 'All '.$request->name,
            'search' => $request->label_search ?? 'Search '.$request->name,
        );

        TaxonomyTerm::create([
            'taxonomy' => $taxonomy,
            'post_type' => $post_type->type,
            'hierarchical' => $request->has('hierarchical') ? 1 : 0,
            'slug' => $request->slug ?? Str::slug($request->name, '-'),
            'name' => $request->name,
            'position' => $request->position ?? 1,
            'active' => $request->has('active') ? 1 : 0,
            'admin_filter' => $request->has('admin_filter') ? 1 : 0,
            'labels' => json_encode($labels),
        ]);

        return redirect(route('admin.post-type-taxonomies.index', ['type' => $request->type]))->with('success', 'created');
    }


    /**
     * Update resource
     */
    public function update(Request $request)
    {
        if (! $request->type) return redirect(route('admin.post-types.index'));

        $post_type = PostType::where('type', $request->type)->first();
        if (! $post_type) return redirect(route('admin.post-types.index'));

        if (! $request->name) return redirect(route('admin.post-type-taxonomies.index', ['type' => $request->type]));
                
        $labels = array(
            'singular' => $request->label_singular ?? $request->name,
            'plural' => $request->label_plural ?? $request->name,
            'create' => $request->label_create ?? 'Create '.$request->name,
            'update' => $request->label_update ?? 'Update '.$request->name,
            'delete' => $request->label_delete ?? 'Delete '.$request->name,
            'all' => $request->label_all ?? 'All '.$request->name,
            'search' => $request->label_search ?? 'Search '.$request->name,
        );
        
        TaxonomyTerm::where('id', $request->id)->update([        
            'name' => $request->name,
            'slug' => $request->slug ?? Str::slug($request->name, '-'),
            'hierarchical' => $request->has('hierarchical') ? 1 : 0,
            'position' => $request->position ?? 1,
            'active' => $request->has('active') ? 1 : 0,
            'admin_filter' => $request->has('admin_filter') ? 1 : 0,
            'labels' => json_encode($labels),
        ]);

        return redirect(route('admin.post-type-taxonomies.index', ['type' => $request->type]))->with('success', 'updated');
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {
        if (! $request->type) return redirect(route('admin.post-types.index'));
        
        $taxonomy = TaxonomyTerm::find($request->id);
        if (!$taxonomy) return redirect(route('admin.post-type-taxonomies.index', ['type' => $request->type]));       

        TaxonomyTerm::where('id', $request->id)->delete();

        return redirect(route('admin.post-type-taxonomies.index', ['type' => $request->type]))->with('success', 'deleted');
    }
}
