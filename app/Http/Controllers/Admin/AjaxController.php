<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Post;
use App\Models\PostType;
use DB;

class AjaxController extends Controller
{

    public function index(Request $request)
    {
        $source = $request->source;
        if (!$source) return null;

        $term = $request->input('term', '');
        if (empty($term)) {
            return array();
        }


        // Search in registered users accounts     
        if ($source == 'users') {
            $users = User::where('role', 'user')->whereNull('deleted_at')->where(function ($query) use ($term) {
                $query->where('name', 'like', "%$term%")
                    ->orwhere('email', 'like', "%$term%");
            })
                ->limit(25)->get(['id', DB::raw('CONCAT(`name`, " - ", `email`) AS text')]);
            return ['results' => $users];
        }


        // Search in internals
        if ($source == 'internals') {
            $users = User::where('role', 'internal')->whereNull('deleted_at')->where(function ($query) use ($term) {
                $query->where('name', 'like', "%$term%")
                    ->orwhere('email', 'like', "%$term%");
            })
                ->limit(25)->get(['id', DB::raw('CONCAT(`name`, " - ", `email`) AS text')]);
            return ['results' => $users];
        }


        // Search in admins
        if ($source == 'admins') {
            $users = User::where('role', 'admin')->whereNull('deleted_at')->where(function ($query) use ($term) {
                $query->where('name', 'like', "%$term%")
                    ->orwhere('email', 'like', "%$term%");
            })
                ->limit(25)->get(['id', DB::raw('CONCAT(`name`, " - ", `email`) AS text')]);
            return ['results' => $users];
        }


        // Search in internals and admins
        if ($source == 'internals_admins') {
            $users = User::whereNull('deleted_at')
                ->where(function ($query) {
                    $query->where('role', 'internal')
                        ->orwhere('role_id', 'admin');
                })
                ->where(function ($query) use ($term) {
                    $query->where('name', 'like', "%$term%")
                        ->orwhere('email', 'like', "%$term%");
                })
                ->limit(25)->get(['id', DB::raw('CONCAT(`name`, " - ", `email`) AS text')]);
            return ['results' => $users];
        }


        // Search in all accounts
        if ($source == 'accounts') {
            $users = User::whereNull('deleted_at')
                ->where(function ($query) use ($term) {
                    $query->where('name', 'like', "%$term%")
                        ->orwhere('email', 'like', "%$term%");
                })
                ->limit(25)->get(['id', DB::raw('CONCAT(`name`, " - ", `email`) AS text')]);
            return ['results' => $users];
        }

        // Search in active pages
        if ($source == 'pages') {
            // id for page type
            $page_post_type = PostType::where(['type' => 'page'])->first();

            $pages = Post::with('default_language_content')->where('post_type_id', $page_post_type->id)
                ->whereHas('default_language_content', function ($query) use ($term) {
                    $query->where('title', 'like', "%$term%");
                })
                //->select('pivlu_posts.id as id', 'pivlu_post_content.title as text')
                ->where('status', 'published')
                ->limit(50)
                ->get();

            $results = [];
            foreach ($pages as $page) {
                $results[] = ['id' => $page->id, 'text' => $page->default_language_content->title];
            }

            return ['results' => $results];
        } // end if

        // Search in active blocks
        if ($source == 'blocks') {
            $pages = Block::where('active', 1)->where('label', 'like', "%$term%")->limit(25)->get(['id', DB::raw('CONCAT(`label`) AS text')]);

            return ['results' => $pages];
        } // end if

    }
}
