<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use App\Models\UserInvitation;
use App\Models\User;
use Auth;
use App\Mail\NewAccountInvitation;
use Illuminate\Support\Facades\Mail;

class AccountInvitationController extends Controller
{

    /**
     * Show all resources
     */
    public function index(Request $request)
    {
        $search_terms = $request->search_terms;

        $invitations = UserInvitation::orderByDesc('id');

        if ($search_terms) $invitations = $invitations->where(function ($query) use ($search_terms) {
            $query->where('users_invitations.name', 'like', "%$search_terms%")
                ->orWhere('users_invitations.email', 'like', "%$search_terms%");
        });

        $invitations = $invitations->paginate(20);

        return view('admin.index', [
            'view_file' => 'admin.accounts.invitations',
            'active_menu' => 'users',
            'active_submenu' => 'invitations',
            'search_terms' => $search_terms,
            'invitations' => $invitations,
        ]);
    }


    /**
     * Send invitation
     */
    public function send(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $validator = Validator::make($request->all(), [
            'role' => 'required|in:admin,internal',
            'method' => 'required|in:email,link,bulk',
        ]);

        $counter = 0; // number of invitatins sent

        if ($validator->fails()) return redirect(route('admin.accounts.index', ['role' => $request->role]))->withErrors($validator)->withInput();

        if ($request->method == 'email') {
            $validator = Validator::make($request->all(), [
                'name' => 'required',
                'email' => 'required|email|unique:App\Models\User,email',
            ]);
            if ($validator->fails()) return redirect(route('admin.accounts.index', ['role' => $request->role]))->withErrors($validator)->withInput();
            $code = Str::random(36);
        }

        if ($request->method == 'link') {
            $validator = Validator::make($request->all(), [
                'inviteLink' => 'required',
            ]);
            if ($validator->fails()) return redirect(route('admin.accounts.index', ['role' => $request->role]))->withErrors($validator)->withInput();
            $code = $request->inviteCode;
        }


        $mail_lang = $request->mail_lang;
        if (in_array(strtolower($mail_lang), config('nura.langs'))) $mail_lang = $mail_lang;
        else $mail_lang = config('app.locale');
    
        if ($request->method != 'bulk') {
            if (UserInvitation::where('email', $request->email)->exists()) return redirect(route('admin.accounts.invitations'))->with('error', 'duplicate_email');
            if (UserInvitation::where('code', $code)->exists()) return redirect(route('admin.accounts.invitations'))->with('error', 'duplicate_code');

            UserInvitation::create([
                'method' => $request->method,
                'name' => $request->name ?? null,
                'email' => $request->email ?? null,
                'role' => $request->role,
                'notes' => $request->notes ?? null,
                'sent_at' => now(),
                'code' => $code,
                'sent_by_user_id' => Auth::user()->id,
                'mail_lang' => $mail_lang,
            ]);

            if ($request->method == 'email') {
                $inviteLink = route('home') . '/action/invite?token=' . $code . '&email=' . urlencode($request->email);
                Mail::to($request->email)->locale($mail_lang)->send(new NewAccountInvitation($request->name, $inviteLink, $request->notes));

                $counter++;
            }
        }


        // Bulk invitation:
        if ($request->method == 'bulk') {
            $emails = array();

            $lines = $request->persons;
            $lines = explode(PHP_EOL, $lines);
            foreach ($lines as $line) {
                $line = trim($line);
                if (empty($line)) continue;

                $line_emails = explode(',', $line); // if there are multiple emails in one line
                foreach ($line_emails as $line_email) {
                    $line_email = trim($line_email);
                    if (filter_var($line_email, FILTER_VALIDATE_EMAIL)) {
                        $emails[] = trim($line_email);
                    }
                }
            }
            $emails = array_unique($emails);

            foreach ($emails as $email) {
                if ($counter > 100) break;
                $code = Str::random(36);
                if (UserInvitation::where('email', $email)->exists()) continue;
                if (User::where('email', $email)->exists()) continue;
                UserInvitation::create(
                    [
                        'method' => 'email',
                        'name' => null,
                        'email' => $email,
                        'role' => $request->role,
                        'sent_at' => now(),
                        'code' => $code,
                        'sent_by_user_id' => Auth::user()->id,
                    ]
                );

                $inviteLink = route('home') . '/action/invite?token=' . $code . '&email=' . urlencode($email);
                Mail::to($email)->send(new NewAccountInvitation($name = null, $inviteLink, $request->notes));

                $counter++;
            }
        }


        return redirect(route('admin.accounts.invitations'))->with('success', 'created')->with('counter', $counter);
    }



    /**
     * Resend invitation
     */
    public function resend(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $invitation = UserInvitation::find($request->id);
        if ($invitation->user_id) return redirect(route('admin.accounts.invitations'));
        if (!$invitation) return redirect(route('admin.accounts.invitations'));

        UserInvitation::where('id', $request->id)->update([
            'sent_at' => now(),
        ]);

        UserInvitation::where('id', $request->id)->increment('resend_counter');

        $mail_lang = $invitation->mail_lang ?? config('app.locale');

        $inviteLink = route('home') . '/action/invite?token=' . $invitation->code . '&email=' . urlencode($invitation->email);
        Mail::to($invitation->email)->locale($mail_lang)->send(new NewAccountInvitation($invitation->name, $inviteLink, $invitation->notes));

        return redirect(route('admin.accounts.invitations'))->with('success', 'resent');
    }



    /**
     * Remove invitation
     */
    public function destroy(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $invitation = UserInvitation::find($request->id);
        if ($invitation->user_id) return redirect(route('admin.accounts.invitations'));
        if (!$invitation) return redirect(route('admin.accounts.invitations'));

        UserInvitation::where('id', $request->id)->delete();

        return redirect(route('admin.accounts.invitations'))->with('success', 'deleted');
    }
}
