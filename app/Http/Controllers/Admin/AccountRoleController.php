<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use App\Models\Role;
use App\Models\RolePermission;
use App\Models\Permission;
use App\Models\User;
use Auth;

class AccountRoleController extends Controller
{

    /**
     * Show all resources
     */
    public function index(Request $request)
    {
        // CHECK PERMISSION -Only admins have access to this section
        if (Auth::user()->role != 'admin') return redirect(route('admin'))->with('error', 'no_permission');

        $roles = Role::withCount('users', 'permissions')->orderBy('id')->get();

        return view('admin.index', [
            'view_file' => 'admin.accounts.roles',
            'active_menu' => 'accounts',
            'active_submenu' => 'roles',
            'roles' => $roles,
        ]);
    }


    /**
     * Show resource
     */
    public function show(Request $request)
    {
        // CHECK PERMISSION -Only admins have access to this section
        if (Auth::user()->role != 'admin') return redirect(route('admin'))->with('error', 'no_permission');

        $role = Role::where('role', $request->role)->first();
        if (! $role) return redirect(route('admin.roles.index'));
        if ($role->role == 'admin') return redirect(route('admin.roles.index'));

        $all_permissions = Permission::with('post_type', 'plugin')->get();

        $role_permissions_ids = RolePermission::with('permission_details')->where('role_id', $role->id)->pluck('permission_id')->toArray();

        return view('admin.index', [
            'view_file' => 'admin.accounts.role',
            'active_menu' => 'accounts',
            'active_submenu' => 'roles',
            'role' => $role,
            'role_permissions_ids' => $role_permissions_ids,
            'all_permissions' => $all_permissions,
        ]);
    }


    /**
     * Create resource
     */
    public function store(Request $request)
    {
        // CHECK PERMISSION -Only admins have access to this section
        if (Auth::user()->role != 'admin') return redirect(route('admin'))->with('error', 'no_permission');

        $validator = Validator::make($request->all(), [
            'label' => ['required', 'string', 'max:25'],
            'role' => ['required', 'string', 'max:25'],
        ]);

        if ($validator->fails()) return redirect(route('admin.roles.index'))->withErrors($validator)->withInput();

        $role = Str::slug($request->role, '_');

        if (Role::where('role', $role)->exists()) return redirect(route('admin.roles.index'))->with('error', 'duplicate');

        $item = Role::create([
            'role' => $role,
            'label' => $request->label,
            'description' => $request->description,
        ]);

        // By default, add "update_profile" permission
        $perm_update_profile = Permission::where('permission', 'update_profile')->first();
        if ($perm_update_profile) RolePermission::create(['role_id' => $item->id, 'permission_id' => $perm_update_profile->id ?? null]);

        return redirect(route('admin.roles.show', ['role' => $role]))->with('success', 'created');
    }


    /**
     * Update resource
     */
    public function update(Request $request)
    {
        // CHECK PERMISSION -Only admins have access to this section
        if (Auth::user()->role != 'admin') return redirect(route('admin'))->with('error', 'no_permission');

        $role = Role::where('role', $request->role)->first();
        if (! $role) return redirect(route('admin.roles.index'));

        $all_permissions = Permission::with('post_type', 'plugin')->get();

        foreach ($all_permissions as $perm) {
            if ($request->has('perm_' . $perm->id)) {
                RolePermission::firstOrCreate(
                    ['role_id' => $role->id, 'permission_id' => $perm->id]
                );
            } else {
                RolePermission::where(['role_id' => $role->id, 'permission_id' => $perm->id])->delete();
            }
        }

        return redirect(route('admin.roles.show', ['role' => $request->role]))->with('success', 'updated');
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {
        // CHECK PERMISSION -Only admins have access to this section
        if (Auth::user()->role != 'admin') return redirect(route('admin'))->with('error', 'no_permission');

        $role = Role::where('role', $request->role)->first();
        if (! $role) return redirect(route('admin.roles.index'));

        if (User::where('role', $role->role)->exists()) return redirect(route('admin.roles.index'))->with('error', 'exists_users');

        Role::find($role->id)->delete();

        return redirect(route('admin.roles.index'))->with('success', 'deleted');
    }
}
