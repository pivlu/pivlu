<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use App\Models\Config;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use App\Models\Plugin;
use Illuminate\Support\Facades\Process;

class PluginController extends Controller
{

    public function index(Request $request)
    {

        // featured plugins
        $featured_plugins_json = 'D:/GitHub/pivlu-plugins.json';
        if (!file_exists($featured_plugins_json)) exit('Plugins json file not found: ' . $featured_plugins_json);
        $featured_plugins_json_content = file_get_contents($featured_plugins_json);
        $featured_plugins_json_content = json_decode($featured_plugins_json_content, true);
        $featured_plugins = $featured_plugins_json_content['plugins'];

        // local plugins
        $local_plugins_json = base_path() . '/local-plugins.json';
        if (file_exists($local_plugins_json)) {
            $local_plugins_json_content = file_get_contents($local_plugins_json);
            $local_plugins_json_content = json_decode($local_plugins_json_content, true);
            $local_plugins = $local_plugins_json_content['plugins'];
        }

        // installed plugins
        $installed_plugins = Plugin::orderByDesc('active')->orderBy('name')->get();

        return view('admin.index', [
            'view_file' => 'admin.plugins.index',
            'active_menu' => 'extend',
            'active_submenu' => 'plugins',
            'installed_plugins' => $installed_plugins,
            'featured_plugins' => $featured_plugins ?? null,
            'local_plugins' => $local_plugins ?? null,
        ]);
    }


    /**
     * Install plugin
     */
    public function install(Request $request)
    {
        $plugin = $request->plugin;

        if (($request->type ?? null) == 'local') {
            $local_path = $request->path;
            $command1 = 'composer config repositories.' . $plugin . ' path "' . $local_path . '"';
        } else
            $command1 = 'composer config repositories.' . $plugin . ' $plugin';

        $command2 = "composer require " . $plugin;
        $command3 = "composer dump-autoload";
        $path = base_path();
        $result1 = Process::run("cd {$path} && {$command1}");
        $result2 = Process::run("cd {$path} && {$command2}");
        $result3 = Process::run("cd {$path} && {$command3}");

        return view('admin.index', [
            'view_file' => 'admin.plugins.install',
            'active_menu' => 'extend',
            'active_submenu' => 'plugins',
            'plugin' => $plugin,
            'result1_output' => $result1->output() ?? null,
            'result1_error_output' => $result1->errorOutput() ?? null,
            'result2_output' => $result2->output() ?? null,
            'result2_error_output' => $result2->errorOutput() ?? null,
            'result3_output' => $result3->output() ?? null,
            'result3_error_output' => $result3->errorOutput() ?? null,
        ]);
    }
}
