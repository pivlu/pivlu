<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use App\Models\ThemeMenu;
use App\Models\ThemeMenuItem;
use App\Models\ThemeMenuContent;
use App\Models\ThemeButton;
use App\Functions\ThemeFunctions;

class ThemeMenuDropdownController extends Controller
{

    public function index(Request $request)
    {
        $parent_item = ThemeMenuItem::with('default_language_content')->find($request->parent_id);
        if (!$parent_item) return redirect(route('admin.theme-menus.index'));

        $menu = ThemeMenu::find($parent_item->menu_id);
        if (!$menu) return redirect(route('admin.theme-menus.index'));

        $links = ThemeMenuItem::where(['menu_id' => $menu->id, 'parent_id' => $request->parent_id])->orderBy('position')->get();

        return view('admin.index', [
            'view_file' => 'admin.theme.menus.index-dropdown',
            'active_menu' => 'website',
            'active_submenu' => 'appearance',
            'nav_tab' => 'menus',
            'parent_item' => $parent_item,
            'is_dropdown' => 1,
            'links' => $links,
            'menu' => $menu,
            'buttons' => ThemeButton::orderByDesc('is_default')->orderBy('label')->paginate(25),
        ]);
    }


    public function store(Request $request)
    {

        $parent_item = ThemeMenuItem::find($request->parent_id);
        if (!$parent_item) return redirect(route('admin.theme-menus.index'));

        $menu = ThemeMenu::find($parent_item->menu_id);
        if (!$menu) return redirect(route('admin.theme-menus.index'));

        $validator = Validator::make($request->all(), [
            'type' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.theme-menu.dropdown', ['parent_id' => $parent_item->id]))->withErrors($validator)->withInput();

        $type = $request->type;

        if ($type == 'custom') {
            $value = $request->custom_url;
        }

        if ($type == 'page') {
            $value = $request->page_id;
        }

        $last_pos = ThemeMenuItem::where('menu_id', $menu->id)->orderByDesc('position')->value('position');
        $position = ($last_pos ?? 0) + 1;

        $dropdown_item = ThemeMenuItem::create([
            'menu_id' => $menu->id,
            'parent_id' => $parent_item->id,
            'type' => $type,
            'value' => $value ?? null,
            'position' => $position,
            'new_tab' => $request->has('new_tab') ? 1 : 0,
            'icon' => $request->icon
        ]);

        foreach (admin_languages() as $lang) {
            $label_key = 'label_' . $lang->id;

            ThemeMenuContent::create(['menu_id' => $menu->id, 'item_id' => $dropdown_item->id, 'lang_id' => $lang->id, 'label' => $request->$label_key]);
        }

        // regenerate menu links for each language and store in cache config
        ThemeFunctions::generate_menu_links($menu->id);

        return redirect(route('admin.theme-menu.dropdown', ['parent_id' => $parent_item->id]))->with('success', 'created');
    }


    public function update(Request $request)
    {
        $menu_item = ThemeMenuItem::find($request->item_id);
        if (!$menu_item) return redirect(route('admin.theme-menus.index'));

        $menu = ThemeMenu::find($menu_item->menu_id);
        if (!$menu) return redirect(route('admin.theme-menus.index'));

        $validator = Validator::make($request->all(), [
            'type' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.theme-menu.dropdown', ['parent_id' => $request->parent_id]))->withErrors($validator)->withInput();

        $type = $request->type;

        if ($type == 'custom') {
            $value = $request->custom_url;
        }

        if ($type == 'page') {
            $value = $request->page_id;
        }

        ThemeMenuItem::where('id', $menu_item->id)->update([
            'type' => $type,
            'value' => $value ?? null,
            'new_tab' => $request->has('new_tab') ? 1 : 0,
            'icon' => $request->icon
        ]);

        foreach (admin_languages() as $lang) {
            $label_key = 'label_' . $lang->id;

            ThemeMenuContent::UpdateOrCreate(
                ['menu_id' => $menu->id, 'item_id' => $menu_item->id, 'lang_id' => $lang->id],
                ['label' => $request->$label_key]
            );
        }


        // regenerate menu links for each language and store in cache config
        ThemeFunctions::generate_menu_links($menu->id);

        return redirect(route('admin.theme-menu.dropdown', ['parent_id' => $request->parent_id]))->with('success', 'updated');
    }


    public function destroy(Request $request)
    {
        $menu_item = ThemeMenuItem::find($request->item_id);
        if (!$menu_item) return redirect(route('admin.theme-menus.index'));

        $menu = ThemeMenu::find($menu_item->menu_id);
        if (!$menu) return redirect(route('admin.theme-menus.index'));

        ThemeMenuItem::where('id', $menu_item->id)->delete();

        // regenerate menu links for each language and store in cache config
        ThemeFunctions::generate_menu_links($menu->id);

        return redirect(route('admin.theme-menu.dropdown', ['parent_id' => $request->parent_id]))->with('success', 'deleted');
    }

    /**
     * Ajax sortable dropdown links
     */
    public function sortable(Request $request)
    {
        $parent_item = ThemeMenuItem::find($request->parent_id);
        if (!$parent_item) return;

        $menu = ThemeMenu::find($parent_item->menu_id);
        if (!$menu) return;

        $i = 1;

        $items = $request->all();

        foreach ($items['item'] as $key => $value) {

            ThemeMenuItem::where(['menu_id' => $menu->id, 'id' => $value])
                ->update([
                    'position' => $i,
                ]);

            $i++;
        }

        // regenerate menu links for each language and store in cache config
        ThemeFunctions::generate_menu_links($menu->id);
    }
}
