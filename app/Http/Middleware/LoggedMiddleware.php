<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;
use Illuminate\Support\Facades;
use Illuminate\View\View;
use App\Models\User;
use App\Models\Language;
use App\Models\Config;
use Auth;

class LoggedMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {

        if (Auth::user()) {
            // Check if account is deleted
            if (Auth::user()->deleted_at) exit('User deleted');

            // Check if account is blocked
            if (Auth::user()->blocked_at) {
                echo '<b>You are blocked</b>';
                $block_reason = UserMeta::get_meta(Auth::user()->id, 'block_reason');
                if ($block_reason) echo "<br>" . nl2br($block_reason);
                exit;
            }

            // Update last activity
            User::where('id', Auth::user()->id)->update(['last_activity_at' => now()]);


            Facades\View::composer('*', function (View $view) {
                $view->with('languages', Language::get_languages()); // active and inactive
                $view->with('active_languages', Language::get_active_languages()); // active languages
                $view->with('active_language', Language::get_active_language()); // active language

                // general config
                $config = Config::config();
                $view->with('config', $config);               
            });
        }

        return $next($request);
    }
}
