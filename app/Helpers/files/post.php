<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

use App\Models\Post;
use App\Models\PostTaxonomy;
use App\Models\PostTaxonomyRelation;
use App\Models\PostType;
use App\Models\Block;
use App\Models\BlockContent;
use App\Models\Language;
use App\Models\ThemeConfig;
use App\Functions\PostFunctions;

if (!function_exists('get_existing_taxonomies_list')) {
	function get_existing_taxonomies_list($post_id, $taxonomy_term_id)
	{
		$data = [];
		$items_array = PostTaxonomyRelation::with('taxonomy')->where('post_id', $post_id)->where('post_type_taxonomy_id', $taxonomy_term_id)->get()->toarray();
		if (count($items_array) == 0) return null;

		foreach ($items_array as $item) {
			$data[] = array('id' => $item['post_taxonomy_id'], 'value' => $item['taxonomy']['name']);
		}

		return json_encode($data);
	}
}


if (!function_exists('get_taxonomies_list')) {
	function get_taxonomies_list($post_type_taxonomy_id)
	{
		//$items = Taxonomy::with('default_language')->where('taxonomy', $taxonomy)->where('active', 1)->orderBy('name')->pluck('name', 'id')->toArray();
		$items = PostTaxonomy::with('default_language_content')->where('post_type_taxonomy_id', $post_type_taxonomy_id)->where('active', 1)->get();

		$items_array = [];
		foreach ($items as $item) {
			$items_array[] = ['id' => $item->id, 'name' => $item->default_language->name];
		}

		return $items_array;
	}
}


// Get blocks for a specific content (post, page, sidebar, global (top / bottom sections), ....)
if (!function_exists('content_blocks')) {
	function content_blocks($post_id, $show_hidden = null)
	{

		if (!$show_hidden) {
			$blocks = Post::where('id', $post_id)->value('blocks');
			if (!$blocks) return array();
			$blocks = unserialize($blocks);
		} else {
			$blocks = Block::where('post_id', $post_id);

			if (!$show_hidden) $blocks = $blocks->where('blocks.hide', 0);

			$blocks = $blocks->orderBy('position')->get();
			if (!$blocks) return array();
		}

		return $blocks ?? array();
	}
}



// Get blocks for homepage
if (!function_exists('homepage_blocks')) {
	function homepage_blocks($theme_id)
	{

		$blocks = Block::where(['theme_id' => $theme_id, 'is_homepage_block' => 1])->orderBy('position')->get();

		return $blocks ?? [];
	}
}



// show content block 
if (!function_exists('block')) {
	function block($id)
	{

		$data = ['content' => null];
		$block = Block::find($id);
		if (!$block) return (object)$data;
		if ($block->hidden == 1) return (object)$data;

		$block_content = BlockContent::where('block_id', $id)->where('lang_id', Language::get_active_language()->id ?? null)->first();

		$data = array('content' => $block_content->content ?? null, 'header' => $block_content->header ?? null);

		return (object)$data;
	}
}


// create breadcrumb for categories
if (!function_exists('breadcrumb_items')) {
	function breadcrumb_items($categ_id, $module = null)
	{
		if ($module == 'posts' || !$module) {
			$categ = PostCateg::where('id', $categ_id)->first();
			$title = $categ->title;
			$slug = $categ->slug;
		}

		if (!$categ) return array();

		$items[] = array('id' => $categ->id, 'title' => $title, 'slug' => $slug, 'url' => $categ->url, 'active' => $categ->active, 'icon' => $categ->icon, 'count_tree_posts' => $categ->count_tree_posts ?? null, 'count_tree_topics' => $categ->count_tree_topics ?? null, 'count_tree_posts' => $categ->count_tree_posts ?? null);

		$parent_id = $categ->parent_id;
		if ($parent_id) {
			$items = array_merge($items, breadcrumb_items($parent_id, $module));
		}

		$items = json_decode(json_encode($items)); // array to object;
		return ($items);
	}
}


if (!function_exists('breadcrumb')) {
	function breadcrumb($categ_id, $module = null)
	{
		if (!$categ_id)
			return array();
		if (!is_array(breadcrumb_items($categ_id, $module)))
			return array();

		return array_reverse(breadcrumb_items($categ_id, $module));
	}
}



if (!function_exists('posts')) {
	function posts($type = null)
	{
		if (!$type) $type = 'post';

		$post_type = PostType::where('type', $type)->first();
		if (! $post_type) return null;

		$items = Post::with('active_language_content', 'user')->where('post_type_id', $post_type->id)->where('status', 'published')->paginate(25);

		foreach ($items as $item) {
			$item->title = $item->active_language_content->title;
			$item->summary = $item->active_language_content->summary;
			$item->image = image($item->media_id, 'thumb');
			$item->author_name = $item->user->name;
			$item->author_avatar = $item->user->avatar_media_id;
			$item->url = PostFunctions::get_post_url($item->id, Language::get_active_language()->id);
		}

		return $items;
	}
}
