<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

use App\Models\Config;
use App\Models\ConfigLang;
use App\Models\Language;
use App\Models\ThemeConfig;
use App\Models\ThemeMenu;
use App\Models\ThemeStyle;
use App\Models\Theme;

if (!function_exists('theme_asset')) {
	function theme_asset($file = null)
	{
		$active_theme = Config::config()->active_theme ?? null;
		return asset('themes/' . $active_theme) . '/' . $file;
	}
}


if (!function_exists('theme_meta')) {
	function theme_meta($name = null)
	{
		if (! $name) return null;

		switch ($name) {
			case 'locale':
				return Language::get_active_language()->code;
				break;

			case 'dir':
				return Language::get_active_language()->dir;
				break;

			case 'label':
				return Config::get_config('site_label') ?? 'Pivlu website';
				break;

			case 'author':
				return Config::get_config('site_author') ?? 'Pivlu.com';
				break;

			default:
				return null;
		}
	}
}


if (!function_exists('theme_include')) {
	function theme_include($destination, $filename = null)
	{
		$active_theme = Config::config()->active_theme ?? null;

		$active_lang_code = Language::get_active_language()->code;
		$default_lang_code = Language::get_default_language()->code;

		if ($destination == 'menu')
			$what_to_include = 'menu';
		elseif ($destination == 'head')
			$what_to_include = 'head';
		elseif ($destination == 'footer')
			$what_to_include = 'footer';
		elseif ($destination == 'section')
			$what_to_include = $filename ?? null;
		else return;

		if ($active_lang_code == $default_lang_code)
			return ('themes/' . $active_theme . '/includes/' . $what_to_include);
		else
			return ('themes/' . $active_theme . '/includes/' . $what_to_include . '-' . $active_lang_code);
	}
}


if (!function_exists('theme_menu')) {
	function theme_menu()
	{
		return theme_include('menu');
	}
}

if (!function_exists('theme_head')) {
	function theme_head()
	{
		include(resource_path('views/web/include-plugins-head.blade.php'));
		return theme_include('head');
	}
}

if (!function_exists('theme_footer')) {
	function theme_footer()
	{
		include(resource_path('views/web/include-plugins-footer.blade.php'));
		return theme_include('footer');
	}
}

if (!function_exists('theme_section')) {
	function theme_section($filename)
	{
		return theme_include('section', $filename);
	}
}


if (!function_exists('get_active_theme_view')) {
	function get_active_theme_view()
	{
		$active_theme = Theme::where('is_active_theme', 1)->value('slug');

		if ($active_theme != 'builder')
			return 'themes.' . $active_theme . '.';
		else
			return 'web.builder.';
	}
}

if (!function_exists('get_active_theme')) {
	function get_active_theme()
	{
		$active_theme = Theme::where('is_active_theme', 1)->value('slug');

		return $active_theme;
	}
}


if (!function_exists('theme_menu_links')) {
	function theme_menu_links()
	{
		if ($_GET['preview_theme'] ?? null) {
			$theme = preg_replace('/[^-a-zA-Z0-9_]/', '', $_GET['preview_theme']);
		} else
			$theme = Config::config()->active_theme ?? null;

		$theme_menu_id = ThemeConfig::where(['theme' => $theme, 'name' => 'menu_id'])->value('value');
		if (! $theme_menu_id) $theme_menu_id = ThemeMenu::where(['is_default' => 1])->value('id');
		if (! $theme_menu_id) return [];

		$menu_links = ConfigLang::get_config(Language::get_active_language()->id, 'menu_links_' . $theme_menu_id);
		if ($menu_links) {
			$menu_links = unserialize($menu_links);
			$menu_links = json_decode(json_encode($menu_links)); // array to object
		}
		
		return $menu_links ?? [];
	}
}

if (!function_exists('get_default_style')) {
	function get_default_style()
	{
		$id = ThemeStyle::where('is_default', 1)->value('id');

		return 'style_' . $id;
	}
}


if (!function_exists('get_style')) {
	function get_style($style)
	{
		$id = ThemeStyle::where('style', $style)->value('id');

		return 'style_' . $id;
	}
}



// menu links
if (!function_exists('menu_links')) {
	function menu_links()
	{
		$active_theme_id = Theme::where('is_active_theme', 1)->value('id');
		$val = ConfigLang::where('lang_id', Language::get_active_language()->id)->where('name', 'menu_links_'.$active_theme_id)->value('value');
		$menu_links = unserialize($val);

		$menu_links = json_decode(json_encode($menu_links));
		
		return (object)($menu_links ?? []);
	}
}



// Get blocks for a specific footer column
if (!function_exists('footer_blocks')) {
	function footer_blocks($footer, $col)
	{
		/*
		// get footer layout (number of columns)
		if ($footer == 'primary') $layout = SysConfig::config()->footer_columns ?? 1;
		if ($footer == 'secondary') $layout = SysConfig::config()->footer2_columns ?? 1;

		$blocks = TemplateFooterBlock::where('footer', $footer)->where('layout', $layout)->where('col', $col)->orderBy('position')->get();
		*/
		return $blocks ?? [];
	}
}
