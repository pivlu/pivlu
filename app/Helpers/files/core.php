<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

use App\Models\UserPermission;
use App\Models\Config;
use App\Models\TemplateMenuLang;
use App\Models\PostTaxonomy;
use App\Models\Taxonomy;

if (!function_exists('check_access')) {
	function check_access($plugin, $permission = null)
	{
		if (!Auth::check()) return false;
		if (Auth::user()->role == 'admin') return true;

		if (!$plugin) return false;

		// check if plugin is not disabled
		if (Plugin::where('plugin', $plugin)->value('status') == 'disabled') return false;

		if ($permission) {
			if (UserPermission::where('plugin', $plugin)->where('permission', $permission)->where('user_id', Auth::user()->id)->exists())
				return true;
			else
				return false;
		} else {
			if (UserPermission::where('plugin', $plugin)->where('user_id', Auth::user()->id)->exists())
				return true;
			else
				return false;
		}
	}
}


if (!function_exists('get_template_value')) {
	function get_template_value($template_id, $variable)
	{
		$value = TemplateConfig::where('template_id', $template_id)->where('name', $variable)->value('value');
		return $value ?? null;
	}
}


if (!function_exists('recurseCopy')) {

	function recurseCopy($src, $dst, $childFolder = '')
	{

		$dir = opendir($src);
		//dd($dst);
		if (!is_dir($dst))
			mkdir($dst);
		if ($childFolder != '') {
			if (!is_dir($dst . '/' . $childFolder))
				mkdir($dst . '/' . $childFolder);

			while (false !== ($file = readdir($dir))) {
				if (($file != '.') && ($file != '..')) {
					if (is_dir($src . '/' . $file)) {
						recurseCopy($src . '/' . $file, $dst . '/' . $childFolder . '/' . $file);
					} else {
						copy($src . '/' . $file, $dst . '/' . $childFolder . '/' . $file);
					}
				}
			}
		} else {
			// return $cc; 
			while (false !== ($file = readdir($dir))) {
				if (($file != '.') && ($file != '..')) {
					if (is_dir($src . '/' . $file)) {
						recurseCopy($src . '/' . $file, $dst . '/' . $file);
					} else {
						copy($src . '/' . $file, $dst . '/' . $file);
					}
				}
			}
		}

		closedir($dir);
	}
}


if (!function_exists('rrmdir')) {
	function rrmdir($dir)
	{
		if (is_dir($dir)) {
			$objects = scandir($dir);
			foreach ($objects as $object) {
				if ($object != "." && $object != "..") {
					if (is_dir($dir . DIRECTORY_SEPARATOR . $object) && !is_link($dir . "/" . $object))
						rrmdir($dir . DIRECTORY_SEPARATOR . $object);
					else
						unlink($dir . DIRECTORY_SEPARATOR . $object);
				}
			}
			rmdir($dir);
		}
	}
}


if (!function_exists('get_menu_link_label')) {
	function get_menu_link_label($link_id, $lang_id = null)
	{
		if (!$lang_id)
			$lang_id = get_default_language()->id;

		$label = TemplateMenuLang::where('link_id', $link_id)->where('lang_id', $lang_id)->value('label');

		return $label ?? null;
	}
}


if (!function_exists('generateRandomInteger')) {
	function generateRandomInteger($length = 12)
	{
		if (! $length) $length = 12;

		$max_string = '9';
		$max_repeat = $length;
		$max = str_repeat($max_string, $max_repeat);

		$min_string = '1';
		$min_repeat = $length;
		$min = str_repeat($min_string, $min_repeat);

		$num = str_pad(mt_rand($min, $max), $length, '0', STR_PAD_LEFT);

		return $num;
	}
}


if (!function_exists('get_existing_taxonomies_list')) {
	function get_existing_taxonomies_list($post_id, $taxonomy_term_id)
	{
		$data = [];
		$items_array = PostTaxonomy::with('taxonomy')->where('post_id', $post_id)->where('taxonomy_term_id', $taxonomy_term_id)->get()->toarray();
		if (count($items_array) == 0) return null;

		foreach ($items_array as $item) {
			$data[] = array('id' => $item['taxonomy_id'], 'value' => $item['taxonomy']['name']);
		}

		return json_encode($data);
	}
}


if (!function_exists('get_taxonomies_list')) {
	function get_taxonomies_list($taxonomy)
	{
		//$items = Taxonomy::with('default_language')->where('taxonomy', $taxonomy)->where('active', 1)->orderBy('name')->pluck('name', 'id')->toArray();
		$items = Taxonomy::with('default_language')->where('taxonomy', $taxonomy)->where('active', 1)->get();

		$items_array = [];
		foreach ($items as $item) {
			$items_array[] = ['id' => $item->id, 'name' => $item->default_language->name];
		}

		return $items_array;
	}
}



// format date
if (!function_exists('date_locale')) {
	function date_locale($date, $format = null)
	{

		$date_format = Config::config()->date_format ?? '%B %e, %Y';


		if (!$format || $format == 'date') {
			return strftime($date_format, strtotime($date));
		}

		if ($format == 'datetime') {
			return strftime($date_format . ', %H:%M', strtotime($date));
		}

		if ($format == 'datetimefull') {
			return date_format(new DateTime($date), $date_format . ', H:i:s');
		}

		if ($format == 'daymonth') {
			return date_format(new DateTime($date), 'j M');
		}

		if ($format == 'time') {
			return date_format(new DateTime($date), 'H:i');
		}

		if ($format == 'timefull') {
			return date_format(new DateTime($date), 'H:i:s');
		}

		return;
	}
}
