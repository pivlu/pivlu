<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Pivlu;

use App\Models\Post;
use App\Models\PostContent;
use App\Models\User;
use App\Models\PostType;
use App\Models\PostTypeContent;
use App\Models\PostTypeTaxonomy;
use App\Models\PostTypeTaxonomyContent;
use App\Models\Language;
use App\Models\BlockType;
use App\Models\Config;

class Setup
{

    // Add default post types, if not exists
    public static function check_default_post_types()
    {
        $default_language = Language::get_default_language();
        if (! $default_language) exit('Error. Default language not set.');

        if (PostType::where('type', 'page')->doesntExist()) {
            $post_type_page = PostType::create([
                'type' => 'page',
                'show_in_admin_menu' => 1,
                'admin_menu_icon' => '<i class="bi-files"></i>',
                'core' => 1,
                'active' => 1,
            ]);

            PostTypeContent::create([
                'lang_id' => $default_language->id,
                'post_type_id' => $post_type_page->id,
                'name' => 'Page',
                'labels' => '{"singular":"Page","plural":"Pages","create":"Create new page","update":"Update page","delete":"Delete page","all":"All pages","search":"Search in pages"}',
            ]);
        }

        if (PostType::where('type', 'post')->doesntExist()) {
            $post_type_post = PostType::create([
                'type' => 'post',
                'show_in_admin_menu' => 1,
                'admin_menu_icon' => '<i class="bi-file-text"></i>',
                'core' => 1,
                'active' => 1,
            ]);

            PostTypeContent::create([
                'lang_id' => $default_language->id,
                'post_type_id' => $post_type_post->id,
                'name' => 'Post',
                'slug' => 'posts',
                'labels' => '{"singular":"Post","plural":"Posts","create":"Create new post","update":"Update post","delete":"Delete post","all":"All posts","search":"Search in posts"}',
            ]);


            $post_type_taxonomy_categ = PostTypeTaxonomy::create([
                'hierarchical' => 1,
                'post_type_id' => $post_type_post->id,
                'active' => 1,
                'position' => 1,
                'admin_filter' => 1,
            ]);

            PostTypeTaxonomyContent::create([
                'lang_id' => $default_language->id,
                'post_type_taxonomy_id' => $post_type_taxonomy_categ->id,
                'name' => 'Categories',
                'slug' => 'category',
                'labels' => '{"singular":"Category","plural":"Categories","create":"Create category","update":"Update category","delete":"Delete category","all":"All categories","search":"Search category"}',
            ]);


            $post_type_taxonomy_tag = PostTypeTaxonomy::create([
                'hierarchical' => 0,
                'post_type_id' => $post_type_post->id,
                'active' => 1,
                'position' => 2,
                'admin_filter' => 1,
            ]);

            PostTypeTaxonomyContent::create([
                'lang_id' => $default_language->id,
                'post_type_taxonomy_id' => $post_type_taxonomy_tag->id,
                'name' => 'Tags',
                'slug' => 'tag',
                'labels' => '{"singular":"Tag","plural":"Tags","create":"Create tag","update":"Update tag","delete":"Delete tag","all":"All tags","search":"Search tag"}',
            ]);
        }
        return;
    }


    // Add a default language, if not exists        
    public static function check_default_language()
    {
        if (Language::where('is_default', 1)->doesntExist()) {
            Language::updateOrCreate(['code' => 'en'], [
                'is_default' => 1,
                'name' => 'English',
                'locale' => 'en_US',
                'status' => 'active',
                'timezone' => 'Europe/London',
                'dir' => 'ltr',
            ]);
        }
    }


    public static function check_default_website_settings()
    {
        // Add homepage, if not exists
        if (Post::where(['is_homepage' => 1])->doesntExist()) {

            // first admin user_id
            $admin_user_id = User::where(['role' => 'admin'])->orderByDesc('id')->value('id');

            // id for page type
            $page_post_type_id = PostType::where(['type' => 'page'])->value('id');

            $homepage_post = Post::create([
                'poat_type_id' => $page_post_type_id,
                'is_homepage' => 1,
                'status' => 'published',
                'user_id' => $admin_user_id
            ]);

            PostContent::create([
                'lang_id' => Language::get_default_language()->id,
                'post_id' => $homepage_post->id,
                'title' => 'Homepage'
            ]);
        }
    }


    public static function check_default_block_types()
    {
        if (BlockType::where(['type' => 'editor', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'editor',
                'label' => 'Editor',
                'description' => 'Text editor',
                'core' => 1,
                'position' => 1,
                'icon' => '<i class="bi bi-textarea-t"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'image', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'image',
                'label' => 'Image',
                'description' => 'Image / banner',
                'core' => 1,
                'position' => 2,
                'icon' => '<i class="bi bi-image"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'gallery', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'gallery',
                'label' => 'Images gallery',
                'description' => 'Images gallery',
                'core' => 1,
                'position' => 3,
                'icon' => '<i class="bi bi-images"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'hero', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'hero',
                'label' => 'Hero',
                'description' => "A hero section is a prominent, visually striking area at the top of a webpage, designed to immediately capture a visitor's attention.",
                'core' => 1,
                'position' => 4,
                'icon' => '<i class="bi bi-card-heading"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'card', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'card',
                'label' => 'Card',
                'description' => 'A card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options.',
                'core' => 1,
                'position' => 5,
                'icon' => '<i class="bi bi-file-richtext"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'slider', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'slider',
                'label' => 'Slider',
                'description' => 'A slider, also known as a carousel or slideshow, is a design element that displays a sequence of images, videos, text or other content, allowing users to navigate through them.',
                'core' => 1,
                'position' => 6,
                'icon' => '<i class="bi bi-collection"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'video', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'video',
                'label' => 'Video',
                'description' => 'Add embed video.',
                'core' => 1,
                'position' => 8,
                'icon' => '<i class="bi bi-play-btn"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'map', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'map',
                'label' => 'Map',
                'description' => 'Google map.',
                'core' => 1,
                'position' => 9,
                'icon' => '<i class="bi bi-geo-alt"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'alert', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'alert',
                'label' => 'Alert',
                'description' => 'Alert (info, warning, error, success)',
                'core' => 1,
                'position' => 10,
                'icon' => '<i class="bi bi-exclamation-square"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'blockquote', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'blockquote',
                'label' => 'Blockquote',
                'description' => 'Blockquote',
                'core' => 1,
                'position' => 11,
                'icon' => '<i class="bi bi-chat-left-quote"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'include', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'include',
                'label' => 'Include file',
                'description' => 'Include file content',
                'core' => 1,
                'position' => 12,
                'icon' => '<i class="bi bi-file-earmark-plus"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'custom', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'custom',
                'label' => 'Custom',
                'description' => 'Custom code',
                'core' => 1,
                'position' => 13,
                'icon' => '<i class="bi bi-code"></i>'
            ]);
        }
    }


    // Add default theme, if not exists        
    public static function check_default_theme()
    {
        $active_theme = Config::get_config('active_theme');
        if (!$active_theme || (($active_theme ?? null) == '')) Config::update_config('active_theme', 'pivlu_default_one');
    }
}
