<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Functions;

use App\Models\Block;
use App\Models\BlockContent;
use App\Models\BlockType;
use App\Models\Post;
use App\Models\Language;

class PostBlockFunctions
{

    /**
     * Regenerate post blocks
     *
     * @return null
     */
    public static function regenerate_post_blocks($post_id)
    {
        $post = Post::find($post_id);
        if (!$post) return null;

        $blocks = Block::with('block_type')->where('post_id', $post_id)
            ->where('hidden', 0)
            ->orderBy('position')
            ->get();

        $blocks_array = [];
        foreach ($blocks as $block) {
            $blocks_array[] = ['id' => $block->id, 'type_id' => $block->type_id, 'type' => $block->block_type->type, 'settings' => $block->settings];
        }

        $post->update(['blocks' => serialize($blocks_array)]);

        return;
    }



    public static function update_block($id, $type_id, $request)
    {
        $block = Block::find($id);
        if (!$block) return;

        $block_type = BlockType::find($type_id);
        if (!$block_type) return;

        $inputs = $request->except('_token');

        // Extra content HERO            
        if ($block_type->type == 'hero') {
            $block_settings = array('image_position' => $request->image_position, 'media_id' => $request->existing_image, 'cover_fixed' => null, 'cover_dark' => null, 'img_container_width' => $request->img_container_width, 'img_col' => $request->img_col, 'img_click' => null, 'text_align' => $request->text_align ?? 'left', 'padding_y' => $request->padding_y ?? null);

            if ($request->use_image) $block_settings['use_image'] = $request->use_image;
            if ($request->shadow) $block_settings['shadow'] = $request->shadow;
            if ($request->shadow_title) $block_settings['shadow_title'] = $request->shadow_title;
            if ($request->shadow_content) $block_settings['shadow_content'] = $request->shadow_content;
            if ($request->cover_fixed) $block_settings['cover_fixed'] = $request->cover_fixed;
            if ($request->cover_dark) $block_settings['cover_dark'] = $request->cover_dark;
            if ($request->img_click) $block_settings['img_click'] = $request->img_click;

            if ($request->hasFile('image')) {
                $media = FileFunctions::store_image($request->file('image'), $old_media_id = $request->existing_image);
                if ($media) {
                    $block_settings['media_id'] = $media->id;
                    $media->update(['post_id' => $block->post_id ?? null]);
                }
            }

            $block->update(['settings' => serialize($block_settings)]);
        }


        // Extra content SLIDER
        if ($block_type->type == 'slider') {
            $block_settings = array('bg_style' => $request->bg_style, 'bg_media_id' => $request->existing_bg_media_id ?? null, 'cover_fixed' => null, 'cover_dark' => null, 'delay_seconds' => $request->delay_seconds);
            if ($request->cover_fixed ?? null) $block_settings['cover_fixed'] = $request->cover_fixed;
            if ($request->cover_dark ?? null) $block_settings['cover_dark'] = $request->cover_dark;
            if ($request->shadow_title ?? null) $block_settings['shadow_title'] = $request->shadow_title;
            if ($request->shadow_content ?? null) $block_settings['shadow_content'] = $request->shadow_content;
            if ($request->link_btn_id ?? null) $block_settings['link_btn_id'] = $request->link_btn_id;

            $image = null;
            $media = null;

            // delete image (if checkbox is checked)
            if ($request->has('delete_bg_image')) {
                $media_id_to_delete = $request->delete_bg_media_id;
                FileFunctions::delete_media($media_id_to_delete);
                $block_settings['bg_media_id'] = null;
            }

            if ($request->hasFile('bg_image')) {
                $media = FileFunctions::store_image($request->file('bg_image'), $old_media_id = $request->existing_bg_media_id);
                if ($media) {
                    $block_settings['bg_media_id'] = $media->id;
                    $media->update(['post_id' => $block->post_id ?? null]);
                }
            }

            $block->update(['settings' => serialize($block_settings)]);
        }


        // Extra content ALERT            
        if ($block_type->type == 'alert') {
            $block_settings = array('type' => null);
            if ($request->alert_type) $block_settings['type'] = $request->alert_type;
            $block->update(['settings' => serialize($block_settings)]);
        }


        // Extra content VIDEO               
        if ($block_type->type == 'video') {
            $block_settings = array('full_width_responsive' => null);
            if ($request->full_width_responsive) $block_settings['full_width_responsive'] = $request->full_width_responsive;
            $block->update(['settings' => serialize($block_settings)]);
        }

        // Extra content IMAGE      
        if ($block_type->type == 'image') {
            $block_settings = array('shadow' => null, 'rounded' => null);
            if ($request->shadow) $block_settings['shadow'] = $request->shadow;
            if ($request->rounded) $block_settings['rounded'] = $request->rounded;
            $block->update(['settings' => serialize($block_settings)]);
        }

        // Extra content GALLERY        
        if ($block_type->type == 'gallery') {
            $block_settings = array('shadow' => null, 'rounded' => null, 'cols' => null, 'masonry_layout' => null, 'masonry_cols' => null, 'masonry_gutter' => null);
            if ($request->shadow) $block_settings['shadow'] = $request->shadow;
            if ($request->rounded) $block_settings['rounded'] = $request->rounded;
            if ($request->cols) $block_settings['cols'] = $request->cols ?? 4;
            if ($request->masonry_layout) $block_settings['masonry_layout'] = $request->masonry_layout;
            if ($request->masonry_cols) $block_settings['masonry_cols'] = $request->masonry_cols ?? 4;
            if ($request->masonry_gutter) $block_settings['masonry_gutter'] = $request->masonry_gutter ?? 0;
            $block->update(['settings' => serialize($block_settings)]);
        }

        // Extra content CARDS        
        if ($block_type->type == 'card') {
            $block_settings = array('border_color' => null, 'no_border_radius' => null, 'bg_color' => null, 'bg_color_hover' => null, 'same_height' => null, 'horizontal' => null, 'img_full_width' => null, 'shadow' => null, 'cols' => null);
            if ($request->shadow) $block_settings['shadow'] = $request->shadow;
            if ($request->no_border_radius) $block_settings['no_border_radius'] = $request->no_border_radius;
            if ($request->same_height) $block_settings['same_height'] = $request->same_height;
            if ($request->horizontal) $block_settings['horizontal'] = $request->horizontal;
            if ($request->img_full_width) $block_settings['img_full_width'] = $request->img_full_width;
            if ($request->use_border) $block_settings['border_color'] = $request->border_color;
            if ($request->use_bg_color_hover) $block_settings['bg_color_hover'] = $request->bg_color_hover;
            if ($request->bg_color) $block_settings['bg_color'] = $request->bg_color;
            if ($request->cols) $block_settings['cols'] = $request->cols ?? 4;
            if ($request->icon_size) $block_settings['icon_size'] = $request->icon_size ?? '2em';
            if ($request->link_location) $block_settings['link_location'] = $request->link_location;
            if ($request->link_btn_id) $block_settings['link_btn_id'] = $request->link_btn_id;
            if ($request->link_btn_size) $block_settings['link_btn_size'] = $request->link_btn_size;
            if ($request->link_btn_width) $block_settings['link_btn_width'] = $request->link_btn_width;
            $block->update(['settings' => serialize($block_settings)]);
        }


        // Extra content MAPS       
        if ($block_type->type == 'map') {
            $block_settings = array('height' => $request->height ?? 400, 'zoom' => $request->zoom ?? 16, 'address' => $request->address);
            $block->update(['settings' => serialize($block_settings)]);
        }

        // Extra content BLOCKQUOTE       
        if ($block_type->type == 'blockquote') {
            $block_settings = array('shadow' => null, 'use_avatar' => null, 'avatar' => $request->existing_avatar);

            if ($request->use_avatar) {
                if ($request->hasFile('avatar')) {
                    $validator = Validator::make($request->all(), ['avatar' => 'file|image|max:5120']); // image mime, max 5 MB
                    if (!$validator->fails()) {
                        $image = Upload::storeImage($request->file('avatar'), $oldImageCode = $inputs["existing_avatar"] ?? null, $data = array('module' => $block_module, 'item_id' => null, 'extra_item_id' => null));
                        $block_settings['avatar'] = $image->code;
                    }
                }
            }
            if ($request->shadow) $block_settings['shadow'] = $request->shadow;
            if ($request->use_avatar) $block_settings['use_avatar'] = $request->use_avatar;
            $block->update(['settings' => serialize($block_settings)]);
        }

        // CUSTOM
        if ($block_type->type == 'custom') {
            $block_settings = array('bg_color' => null);
            if ($request->use_custom_bg) $block_settings['bg_color'] = $request->bg_color;
            $block->update(['settings' => serialize($block_settings)]);
        }

        // INCLUDE
        if ($block_type->type == 'include') {
            $block_settings = array('bg_color' => null);
            if ($request->use_custom_bg) $block_settings['bg_color'] = $request->bg_color;
            $block->update(['settings' => serialize($block_settings)]);
        }


        // ***************************************************
        // Block CONTENT
        // ***************************************************
        $langs = Language::get_languages();

        // UPDATE CONTENT
        foreach ($langs as $lang) {
            $content = null;

            $key_content = 'content_' . $lang->id;
            $key_add_header = 'add_header_' . $lang->id;
            $key_header_title = 'header_title_' . $lang->id;
            $key_header_content = 'header_content_' . $lang->id;
            $key_caption = 'caption_' . $lang->id;
            $key_title = 'title_' . $lang->id;
            $key_url = 'url_' . $lang->id;
            $key_existing_image = 'existing_image_' . $lang->id;
            $key_embed = 'embed_' . $lang->id;
            $key_btn1_label = 'btn1_label_' . $lang->id;
            $key_btn1_url = 'btn1_url_' . $lang->id;
            $key_btn1_id = 'btn1_id_' . $lang->id;
            $key_btn1_icon = 'btn1_icon_' . $lang->id;
            $key_btn2_label = 'btn2_label_' . $lang->id;
            $key_btn2_url = 'btn2_url_' . $lang->id;
            $key_btn2_id = 'btn2_id_' . $lang->id;
            $key_btn2_icon = 'btn2_icon_' . $lang->id;

            // EDITOR 
            if ($block_type->type == 'editor') {
                $content = $request->$key_content;                
                $content = trim($content);
                
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['content' => $content]);

                // header data
                $header_array = array();
                $header_array = array('add_header' => $request->$key_add_header, 'title' => $request->$key_header_title, 'content' => $request->$key_header_content);
                $header_content = serialize($header_array);
                BlockContent::where(['block_id' => $id, 'lang_id' => $lang->id])->update(['header' => $header_content]);
            }

            // HERO
            if ($block_type->type == 'hero') {
                $content = array('title' => $request->$key_title, 'content' => $request->$key_content, 'btn1_label' => $request->$key_btn1_label, 'btn1_url' => $request->$key_btn1_url, 'btn1_id' => $request->$key_btn1_id, 'btn1_icon' => $request->$key_btn1_icon, 'btn2_label' => $request->$key_btn2_label, 'btn2_id' => $request->$key_btn2_id, 'btn2_url' => $request->$key_btn2_url, 'btn2_icon' => $request->$key_btn2_icon);
                $content = serialize($content);
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['content' => $content]);
            }

            // CUSTOM
            if ($block_type->type == 'custom') {
                $content = $request->$key_header_content;
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['content' => $content]);
            }

            // VIDEO
            if ($block_type->type == 'video') {
                $content = array('embed' => $request->$key_embed, 'caption' => $request->$key_caption);
                $content = serialize($content);
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['content' => $content]);

                // header data
                $header_array = array();
                $header_array = array('add_header' => $request->$key_add_header, 'title' => $request->$key_header_title, 'content' => $request->$key_header_content);
                $header_content = serialize($header_array);
                BlockContent::where(['block_id' => $id, 'lang_id' => $lang->id])->update(['header' => $header_content]);
            }

            // IMAGE
            if ($block_type->type == 'image') {
                $image = null;

                if ($request->hasFile('image_' . $lang->id)) {
                    $media = FileFunctions::store_image($request->file('image_' . $lang->id), $old_media_id = $request->$key_existing_image);
                    if ($media) $media->update(['post_id' => $block->post_id]);
                }
                $content = array('media_id' => $media->id ?? $request->$key_existing_image, 'title' => $request->$key_title, 'caption' => $request->$key_caption, 'url' => $request->$key_url);
                $content = serialize($content);
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['content' => $content]);

                // header data
                $header_array = array();
                $header_array = array('add_header' => $request->$key_add_header, 'title' =>  $inputs["header_title_$lang->id"] ?? null, 'content' =>  $inputs["header_content_$lang->id"] ?? null);
                $header_content = serialize($header_array);
                BlockContent::where(['block_id' => $id, 'lang_id' => $lang->id])->update(['header' => $header_content]);
            }


            // GALLERY                      
            if ($block_type->type == 'gallery') {
                $post_key_title = 'title_' . $lang->id;
                $post_key_image = 'image_' . $lang->id;
                $post_key_caption = 'caption_' . $lang->id;
                $post_key_position = 'position_' . $lang->id;
                $post_key_url = 'url_' . $lang->id;
                $post_key_existing_image = 'existing_image_' . $lang->id;
                $post_key_delete_image = 'delete_image_' . $lang->id;
                $images_array_key = array();

                //$counter_key = count(array_filter($_POST[$post_key_title]));
                $counter_key_images = count(array_filter($_FILES[$post_key_image]['name']));
                $counter_key_existing = count($request->$post_key_existing_image ?? []);
                $counter_key = $counter_key_images + $counter_key_existing;


                $image = null;
                $media = null;

                for ($i = 0; $i < $counter_key; $i++) {
                    $image = null;
                    $media = null;

                    // delete image (if checkbox is checked)
                    if ($request->has($post_key_delete_image . '_' . $i)) {
                        $file_media_id_to_delete = $inputs['delete_image_media_id_' . $lang->id . '_' . $i];
                        FileFunctions::delete_media($file_media_id_to_delete);
                        $inputs["$post_key_existing_image"][$i] = null;
                    }

                    if ($request->hasFile($post_key_image)) {
                        if ($file = $request->file($post_key_image)[$i] ?? null) {
                            $media = FileFunctions::store_image($file, $old_media_id = $inputs["$post_key_existing_image"][$i] ?? null);
                            if ($media) $media->update(['post_id' => $block->post_id]);
                        }
                    }

                    $images_array_key[$i] = array('title' => $inputs["$post_key_title"][$i], 'media_id' => $media->id ?? $inputs["$post_key_existing_image"][$i] ?? null,  'caption' => $inputs["$post_key_caption"][$i], 'position' => $inputs["$post_key_position"][$i] ?? 0, 'url' => $inputs["$post_key_url"][$i] ?? null);

                    // regenerate array and sort by position (asc)
                    if (count($images_array_key) > 1) {
                        $position = array_column($images_array_key, 'position');
                        array_multisort($position, SORT_ASC, $images_array_key);
                    }
                }

                $content = serialize($images_array_key);
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['content' => $content]);

                // header data
                $header_array = array();
                $header_array = array('add_header' => $inputs['add_header_' . $lang->id] ?? null, 'title' =>  $inputs["header_title_$lang->id"] ?? null, 'content' =>  $inputs["header_content_$lang->id"] ?? null);
                $header_content = serialize($header_array);
                BlockContent::where(['block_id' => $id, 'lang_id' => $lang->id])->update(['header' => $header_content]);
            }


            // SLIDER
            if ($block_type->type == 'slider') {
                $post_key_title = 'title_' . $lang->id;
                $post_key_content = 'content_' . $lang->id;
                $post_key_image = 'image_' . $lang->id;
                $post_key_existing_image = 'existing_image_' . $lang->id;
                $post_key_url = 'url_' . $lang->id;
                $post_key_position = 'position_' . $lang->id;
                $post_key_delete_image = 'delete_image_' . $lang->id;
                $slides_array_key = array();
                $counter_key = count(array_filter($_POST[$post_key_title]));

                $image = null;
                $media = null;

                for ($i = 0; $i < $counter_key; $i++) {

                    $image = null;
                    $media = null;

                    // delete image (if checkbox is checked)
                    if ($request->has($post_key_delete_image . '_' . $i)) {
                        $file_media_id_to_delete = $inputs['delete_image_media_id_' . $lang->id . '_' . $i];
                        FileFunctions::delete_media($file_media_id_to_delete);
                        $inputs["$post_key_existing_image"][$i] = null;
                    }

                    if ($request->hasFile($post_key_image)) {
                        if ($file = $request->file($post_key_image)[$i] ?? null) {
                            $media = FileFunctions::store_image($file, $old_media_id = $inputs["$post_key_existing_image"][$i] ?? null);
                            if ($media) $media->update(['post_id' => $block->post_id]);
                        }
                    }

                    $slides_array_key[$i] = array('title' => $inputs["$post_key_title"][$i], 'content' => $inputs["$post_key_content"][$i], 'media_id' => $media->id ?? $inputs["$post_key_existing_image"][$i] ?? null, 'url' => $inputs["$post_key_url"][$i], 'position' => $inputs["$post_key_position"][$i] ?? 0);

                    // regenerate array and sort by position (asc)
                    if (count($slides_array_key) > 1) {
                        $position = array_column($slides_array_key, 'position');
                        array_multisort($position, SORT_ASC, $slides_array_key);
                    }
                }

                $content = serialize($slides_array_key);
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['content' => $content]);
            }



            // CARDS           
            if ($block_type->type == 'card') {
                $post_key_title = 'title_' . $lang->id;
                $post_key_url = 'url_' . $lang->id;
                $post_key_image = 'image_' . $lang->id;
                $post_key_content = 'content_' . $lang->id;
                $post_key_position = 'position_' . $lang->id;
                $post_key_icon = 'icon_' . $lang->id;
                $post_key_existing_image = 'existing_image_' . $lang->id;
                $post_key_delete_image = 'delete_image_' . $lang->id;
                $cards_array_key = array();
                $counter_key = count(array_filter($_POST[$post_key_title]));

                $image = null;
                $media = null;

                for ($i = 0; $i < $counter_key; $i++) {
                    $image = null;
                    $media = null;

                    // delete image (if checkbox is checked)
                    if ($request->has($post_key_delete_image . '_' . $i)) {
                        $file_media_id_to_delete = $inputs['delete_image_media_id_' . $lang->id . '_' . $i];
                        FileFunctions::delete_media($file_media_id_to_delete);
                        $inputs["$post_key_existing_image"][$i] = null;
                    }

                    if ($request->hasFile($post_key_image)) {
                        if ($file = $request->file($post_key_image)[$i] ?? null) {
                            $media = FileFunctions::store_image($file, $old_media_id = $inputs["$post_key_existing_image"][$i] ?? null);
                            if ($media) $media->update(['post_id' => $block->post_id]);
                        }
                    }

                    $cards_array_key[$i] = array('title' => $inputs["$post_key_title"][$i], 'url' => $inputs["$post_key_url"][$i], 'icon' => $inputs["$post_key_icon"][$i], 'media_id' => $media->id ?? $inputs["$post_key_existing_image"][$i] ?? null, 'content' => $inputs["$post_key_content"][$i], 'position' => $inputs["$post_key_position"][$i] ?? 0);

                    // regenerate array and sort by position (asc)
                    if (count($cards_array_key) > 1) {
                        $position = array_column($cards_array_key, 'position');
                        array_multisort($position, SORT_ASC, $cards_array_key);
                    }
                }

                $content = serialize($cards_array_key);
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['content' => $content]);

                // header data
                $header_array = array();
                $header_array = array('add_header' => $inputs['add_header_' . $lang->id] ?? null, 'title' =>  $inputs["header_title_$lang->id"] ?? null, 'content' =>  $inputs["header_content_$lang->id"] ?? null);
                $header_content = serialize($header_array);
                BlockContent::where(['block_id' => $id, 'lang_id' => $lang->id])->update(['header' => $header_content]);
            }

            // ALERT
            if ($block_type->type == 'alert') {
                $post_key_title = 'title_' . $lang->id;
                $post_key_content = 'content_' . $lang->id;
                $content_array = array('title' => $inputs["$post_key_title"], 'content' => $inputs["$post_key_content"]);
                $content = serialize($content_array);
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['content' => $content]);
            }

            // BLOCKQUOTE
            if ($block_type->type == 'blockquote') {
                $post_key_source = 'source_' . $lang->id;
                $post_key_content = 'content_' . $lang->id;
                $content_array = array('source' => $inputs["$post_key_source"], 'content' => $inputs["$post_key_content"]);
                $content = serialize($content_array);
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['content' => $content]);
            }

            // MAP
            if ($block_type->type == 'map') {
                // Header data
                $header_array = array();
                $header_array = array('add_header' => $inputs['add_header_' . $lang->id] ?? null, 'title' =>  $inputs["header_title_$lang->id"] ?? null, 'content' =>  $inputs["header_content_$lang->id"] ?? null);
                $header_content = serialize($header_array);
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['header' => $header_content]);
            }

            // INCLUDE
            if ($block_type->type == 'include') {
                $key_tpl_file = 'tpl_file_' . $lang->id;

                $content = array('tpl_file' => $request->$key_tpl_file);
                $content = serialize($content);
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['content' => $content]);
            }
        }
    }
}
