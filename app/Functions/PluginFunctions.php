<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Functions;

use App\Models\PostType;
use App\Models\PostTypeContent;
use App\Models\PostTypeTaxonomy;
use App\Models\PostTypeTaxonomyContent;
use App\Models\Language;
use Illuminate\Support\Str;

class PluginFunctions
{
    public static function create_post_type(string $type, array $args = array())
    {

        $type =  Str::slug($type, '-');
        $type = substr($type, 0, 20);

        if (PostType::where('type', $type)->exists()) {
            return response()->json([
                'status' => 'error',
                'error' => 'exists',
            ]);
        }

        $show_in_admin_menu = $args['show_in_admin_menu'] ?? 1;
        $admin_menu_icon = $args['admin_icon'] ?? '<i class="bi bi-file-text"></i>';
        $name = $args['name'] ?? $type;
        $slug = $args['slug'] ?? $type;
        $labels = $args['labels'] ?? [];

        $post_type = PostType::create([
            'type' => $type,
            'show_in_admin_menu' => $show_in_admin_menu,
            'admin_menu_icon' => $admin_menu_icon,
            'core' => 0,
            'active' => 1,
        ]);

        $labels = [
            "singular" => $labels['singular'] ?? $type,
            "plural" => $labels['plural'] ?? $type,
            "create"  => $labels['create'] ?? "Create item",
            "update"  => $labels['update'] ?? "Update item",
            "delete" => $labels['delete'] ?? "Delete item",
            "all" => $labels['all'] ?? "All item",
            "search" => $labels['search'] ?? "Search items",
        ];

        PostTypeContent::create([
            'post_type_id' => $post_type->id,
            'lang_id' => Language::get_default_language()->id,
            'name' => $name,
            'slug' => $slug,
            'labels' => json_encode($docs_labels, JSON_UNESCAPED_UNICODE),
        ]);

        return response()->json([
            'status' => 'ok',
        ]);
    }



    public static function create_post_type_taxonomy(string $post_type, string $name, array $args = array())
    {

        if (! $name)
            return response()->json([
                'status' => 'error',
                'error' => 'no_name',
            ]);

        $postTypeObj = PostType::where('type', $post_type)->first();

        $name = substr($name, 0, 25);

        if (! $post_type || $name)
            return response()->json([
                'status' => 'error',
                'error' => 'no_post_type',
            ]);

        $hierarchical = $args['hierarchical'] ?? 0;
        $position = $args['position'] ?? 1;
        $admin_filter = $args['admin_filter'] ?? 1;
        $slug = Str::slug($args['slug'] ?? $name, '-');
        $labels = $args['labels'] ?? [];

        $post_type_taxonomy = PostTypeTaxonomy::create([
            'post_type_id' => $postTypeObj->id,
            'hierarchical' => $hierarchical,
            'active' => 1,
            'position' => $position,
            'admin_filter' => $admin_filter
        ]);
        
        $labels = [
            "singular" => $labels['singular'] ?? $name,
            "plural" => $labels['plural'] ?? (($hierarchical == 1) ? 'All categories' : 'All tags'),
            "create" => $labels['create'] ?? (($hierarchical == 1) ? 'Create category' : 'Create tag'),
            "update" => $labels['update'] ?? (($hierarchical == 1) ? 'Update category' : 'Update tag'),
            "delete" => $labels['delete'] ?? (($hierarchical == 1) ? 'Delete category' : 'Delete tag'),
            "all" => $labels['all'] ?? (($hierarchical == 1) ? 'All categories' : 'All tags'),
            "search" => $labels['search'] ?? (($hierarchical == 1) ? 'Search categories' : 'Search tags'),
            "popular" => $labels['popular'] ?? (($hierarchical == 1) ? 'Popular categories' : 'Popular tags'),
        ];

        PostTypeTaxonomyContent::create([
            'post_type_taxonomy_id' => $post_type_taxonomy->id,
            'lang_id' => Language::get_default_language()->id,
            'name' => $name,
            'slug' => $slug,
            'labels' => json_encode($taxonomy_labels, JSON_UNESCAPED_UNICODE),
        ]);

        return response()->json([
            'status' => 'ok',
        ]);
    }
}
