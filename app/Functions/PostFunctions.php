<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Functions;

use App\Models\Post;
use App\Models\PostContent;
use App\Models\PostType;
use App\Models\PostTypeTaxonomy;
use App\Models\PostTypeContent;
use App\Models\PostTaxonomyRelation;
use App\Models\PostTaxonomyContent;
use App\Models\PostTaxonomy;
use App\Models\PostTypeTaxonomyContent;
use App\Models\Language;

class PostFunctions
{

    public static function get_post_type_taxonomies($post_type_id)
    {
        $taxonomy_terms = PostTypeTaxonomy::with('default_language_content', 'taxonomies')->where(['post_type_id' => $post_type_id, 'active' => 1, 'admin_filter' => 1])->orderBy('position')->get();

        return $taxonomy_terms;
    }

    public static function post_taxonomy_recount_posts($post_type_id)
    {
        $post_type_taxonomies = PostTypeTaxonomy::where('post_type_id', $post_type_id)->where('active', 1)->get();
        foreach ($post_type_taxonomies as $post_type_taxonomy) {

            $taxonomies = PostTaxonomy::where('post_type_taxonomy_id', $post_type_taxonomy->id)->get();
            foreach ($taxonomies as $taxonomy) {
                $count_posts = PostTaxonomyRelation::where('post_taxonomy_id', $taxonomy->id)->whereHas('post', function ($query) {
                    $query->where('status', 'like', 'published');
                })->count();

                PostTaxonomy::where('id', $taxonomy->id)->update(
                    ['count_posts' => $count_posts]
                );
            }
        }
    }


    public static function get_post_url($post_id, $lang_id)
    {
        $post = Post::with('post_type')->find($post_id);
        if (!$post) return null;

        $post_content = PostContent::where(['post_id' => $post_id, 'lang_id' => $lang_id])->first();

        // PAGE TYPE
        if ($post->post_type->type == 'page') {
            // check if page is child of another page
            $parent_id = Post::where('id', $post_id)->value('parent_id');

            if ($parent_id) {
                $parent_slug = PostContent::where(['post_id' => $parent_id, 'lang_id' => $lang_id])->value('slug');
                $url = $parent_slug . '/' . $post_content->slug;
            } else {
                $slug = PostContent::where(['post_id' => $post_id, 'lang_id' => $lang_id])->value('slug');
                $url = $slug;
            }
        } else {
            $type_slug = PostTypeContent::where(['post_type_id' => $post->post_type->id, 'lang_id' => $lang_id])->value('slug');
            $url = $type_slug . '/' . $post_content->slug;
        }

        $lang = Language::find($lang_id);
        if ($lang->is_default == 0) $url = $lang->code . '/' . $url;

        return route('home') . '/' . $url ?? null;
    }


    public static function get_post_taxonomy_url_path($post_taxonomy_id, $lang_id)
    {
        $post_taxonomy_content = PostTaxonomyContent::with('post_taxonomy')->where('lang_id', $lang_id)->where('post_taxonomy_id', $post_taxonomy_id)->first();

        $post_type_taxonomy = PostTypeTaxonomy::find($post_taxonomy_content->post_taxonomy->post_type_taxonomy_id);

        $post_type_taxonomy_slug = PostTypeTaxonomyContent::where('post_type_taxonomy_id', $post_type_taxonomy->id)->where('lang_id', $lang_id)->value('slug');

        $post_type_slug = PostTypeContent::where('post_type_id', $post_taxonomy_content->post_taxonomy->post_type->id)->where('lang_id', $lang_id)->value('slug');

        return $post_type_slug . '/' . $post_type_taxonomy_slug . '/' . $post_taxonomy_content->slug;
    }


    // Regenerate 'url_path' column (from "pivlu_post_taxonomy_content" table) for all post type taxonomies with this post_type_taxonomy_id
    // This function is called when a post taxonomy changes the slug
    public static function regenerate_post_taxonomies_url_path($post_type_taxonomy_id)
    {
        $post_taxonomies = PostTaxonomy::where('post_type_taxonomy_id', $post_type_taxonomy_id)->get();

        foreach ($post_taxonomies as $post_taxonomy) {
            $post_taxonomy_contents = PostTaxonomyContent::where('post_taxonomy_id', $post_taxonomy->id)->get();

            foreach ($post_taxonomy_contents as $post_taxonomy_content) {
                $url_path = PostFunctions::get_post_taxonomy_url_path($post_taxonomy->id, $post_taxonomy_content->lang_id);
                $post_taxonomy_content->update(['url_path' => $url_path]);
            }
        }
    }


    // Regenerate 'url_path' column (from "pivlu_post_taxonomy_content" table) for all post types with this post_type_id
    // This function is called when a post type changes the slug
    public static function regenerate_post_taxonomies_url_path_for_this_type($post_type_id)
    {

        $post_taxonomies = PostTaxonomy::where('post_type_id', $post_type_id)->get();

        foreach ($post_taxonomies as $post_taxonomy) {
            $post_taxonomy_contents = PostTaxonomyContent::where('post_taxonomy_id', $post_taxonomy->id)->get();

            foreach ($post_taxonomy_contents as $post_taxonomy_content) {
                $url_path = PostFunctions::get_post_taxonomy_url_path($post_taxonomy->id, $post_taxonomy_content->lang_id);
                $post_taxonomy_content->update(['url_path' => $url_path]);
            }
        }
    }
}
