<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Functions;

use App\Models\Post;
use App\Models\PostContent;
use App\Models\User;
use App\Models\PostType;
use App\Models\PostTypeContent;
use App\Models\PostTypeTaxonomy;
use App\Models\PostTypeTaxonomyContent;
use App\Models\Language;
use App\Models\Block;
use App\Models\BlockType;
use App\Models\Theme;
use App\Models\ThemeButton;
use App\Models\ThemeStyle;
use App\Models\ThemeMenu;
use App\Models\ThemeMenuItem;
use App\Models\ThemeMenuContent;
use App\Models\Form;
use App\Models\FormDataStatus;
use App\Models\FormField;
use App\Models\FormFieldContent;
use App\Models\Role;
use App\Models\Permission;
use App\Models\RolePermission;

class SetupFunctions
{

    // Add default post types, if not exists
    public static function check_default_post_types()
    {
        $default_language = Language::get_default_language();
        if (! $default_language) exit('Error. Default language not set.');

        if (PostType::where('type', 'page')->doesntExist()) {
            $post_type_page = PostType::create([
                'type' => 'page',
                'show_in_admin_menu' => 1,
                'admin_menu_icon' => '<i class="bi-files"></i>',
                'core' => 1,
                'active' => 1,
            ]);

            PostTypeContent::create([
                'lang_id' => $default_language->id,
                'post_type_id' => $post_type_page->id,
                'name' => 'Page',
                'labels' => '{"singular":"Page","plural":"Pages","create":"Create new page","update":"Update page","delete":"Delete page","all":"All pages","search":"Search in pages"}',
            ]);
        }

        if (PostType::where('type', 'post')->doesntExist()) {
            $post_type_post = PostType::create([
                'type' => 'post',
                'show_in_admin_menu' => 1,
                'admin_menu_icon' => '<i class="bi-file-text"></i>',
                'core' => 1,
                'active' => 1,
            ]);

            PostTypeContent::create([
                'lang_id' => $default_language->id,
                'post_type_id' => $post_type_post->id,
                'name' => 'Posts',
                'slug' => 'posts',
                'labels' => '{"singular":"Post","plural":"Posts","create":"Create new post","update":"Update post","delete":"Delete post","all":"All posts","search":"Search in posts"}',
            ]);


            $post_type_taxonomy_categ = PostTypeTaxonomy::create([
                'hierarchical' => 1,
                'post_type_id' => $post_type_post->id,
                'active' => 1,
                'position' => 1,
                'admin_filter' => 1,
            ]);

            PostTypeTaxonomyContent::create([
                'lang_id' => $default_language->id,
                'post_type_taxonomy_id' => $post_type_taxonomy_categ->id,
                'name' => 'Categories',
                'slug' => 'category',
                'labels' => '{"singular":"Category","plural":"Categories","create":"Create category","update":"Update category","delete":"Delete category","all":"All categories","search":"Search category"}',
            ]);


            $post_type_taxonomy_tag = PostTypeTaxonomy::create([
                'hierarchical' => 0,
                'post_type_id' => $post_type_post->id,
                'active' => 1,
                'position' => 2,
                'admin_filter' => 1,
            ]);

            PostTypeTaxonomyContent::create([
                'lang_id' => $default_language->id,
                'post_type_taxonomy_id' => $post_type_taxonomy_tag->id,
                'name' => 'Tags',
                'slug' => 'tag',
                'labels' => '{"singular":"Tag","plural":"Tags","create":"Create tag","update":"Update tag","delete":"Delete tag","all":"All tags","search":"Search tag"}',
            ]);
        }
        return;
    }


    // Add a default language, if not exists        
    public static function check_default_language()
    {
        if (Language::where('is_default', 1)->doesntExist()) {
            Language::updateOrCreate(['code' => 'en'], [
                'is_default' => 1,
                'name' => 'English',
                'locale' => 'en_US',
                'status' => 'active',
                'timezone' => 'Europe/London',
                'dir' => 'ltr',
            ]);
        }
    }


    public static function check_default_website_settings()
    {
        // first admin user_id
        $admin_user_id = User::where(['role' => 'admin'])->orderByDesc('id')->value('id');

        // id for page type
        $page_post_type = PostType::where(['type' => 'page'])->first();

        // id for forms block   
        $form_block_type = BlockType::where(['type' => 'form'])->first();

        // Add homepage, if not exists
        if (Post::where(['is_homepage' => 1])->doesntExist()) {
            $homepage_post = Post::create([
                'post_type_id' => $page_post_type->id,
                'is_homepage' => 1,
                'status' => 'published',
                'user_id' => $admin_user_id
            ]);

            PostContent::create([
                'lang_id' => Language::get_default_language()->id,
                'post_id' => $homepage_post->id,
                'title' => 'Homepage'
            ]);
        }


        // Add contact page, if not exists
        if (Post::where(['is_contactpage' => 1])->doesntExist()) {
            $contactpage_post = Post::create([
                'post_type_id' => $page_post_type->id,
                'is_contactpage' => 1,
                'status' => 'published',
                'user_id' => $admin_user_id
            ]);

            PostContent::create([
                'lang_id' => Language::get_default_language()->id,
                'post_id' => $contactpage_post->id,
                'title' => 'Contact',
                'slug' => 'contact'
            ]);

            $contact_block_form = Block::create([
                'type_id' => $form_block_type->id,
                'post_id' => $contactpage_post->id,
                'label' => 'Contact form',
                'position' => 1,
                'user_id' => $admin_user_id
            ]);

            $block_settings = array('form_id' => $contact_form->id);
            $contact_block_form->update(['settings' => serialize($block_settings)]);

            $contactpage_post->update(['blocks' => serialize(['id' => $contact_block_form->id, 'type_id' =>  $form_block_type->id, 'type' => 'form'])]);
        }
    }


    public static function check_form()
    {
        // add default dorms messages statuses (new and closed)
        FormDataStatus::firstOrCreate(
            ['is_new' => 1],
            ['label' => 'New', 'description' => 'This is the default status for new messages.', 'color' => '#14a151']
        );
        FormDataStatus::firstOrCreate(
            ['is_closed' => 1],
            ['label' => 'Closed', 'description' => 'This message is mark as closed. No future action is needed.', 'color' => '#1a1a1a']
        );



        // Add a contact form, if no form exists
        if (Form::doesntExist()) {
            $contact_form = Form::create([
                'label' => 'Contact form',
                'active' => 1,
            ]);

            // insert NAME field
            $field_name = FormField::create([
                'form_id' => $contact_form->id,
                'type' => 'text',
                'required' => 1,
                'col_md' => 6,
                'active' => 1,
                'position' => 0,
                'protected' => 1,
                'is_default_name' => 1
            ]);
            foreach (admin_languages() as $lang) {
                FormFieldContent::create(['form_id' => $contact_form->id, 'field_id' => $field_name->id, 'lang_id' => $lang->id, 'label' => 'Name']);
            }

            // insert EMAIL field
            $field_email = FormField::create([
                'form_id' => $contact_form->id,
                'type' => 'email',
                'required' => 1,
                'col_md' => 6,
                'active' => 1,
                'position' => 1,
                'protected' => 1,
                'is_default_email' => 1
            ]);
            foreach (admin_languages() as $lang) {
                FormFieldContent::create(['form_id' => $contact_form->id, 'field_id' => $field_email->id, 'lang_id' => $lang->id, 'label' => 'Email']);
            }

            // insert SUBJECT field
            $field_subject = FormField::create([
                'form_id' => $contact_form->id,
                'type' => 'text',
                'required' => 1,
                'col_md' => 12,
                'active' => 1,
                'position' => 2,
                'protected' => 1,
                'is_default_subject' => 1
            ]);
            foreach (admin_languages() as $lang) {
                FormFieldContent::create(['form_id' => $contact_form->id, 'field_id' => $field_subject->id, 'lang_id' => $lang->id, 'label' => 'Subject']);
            }

            // insert MESSAGE field
            $field_message = FormField::create([
                'form_id' => $contact_form->id,
                'type' => 'textarea',
                'required' => 1,
                'col_md' => 12,
                'active' => 1,
                'position' => 3,
                'protected' => 1,
                'is_default_message' => 1
            ]);
            foreach (admin_languages() as $lang) {
                FormFieldContent::create(['form_id' => $contact_form->id, 'field_id' => $field_message->id, 'lang_id' => $lang->id, 'label' => 'Message']);
            }
        }
    }


    public static function check_default_block_types()
    {
        if (BlockType::where(['type' => 'editor', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'editor',
                'label' => 'Editor',
                'description' => 'Text editor',
                'core' => 1,
                'position' => 1,
                'icon' => '<i class="bi bi-textarea-t"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'image', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'image',
                'label' => 'Image',
                'description' => 'Image / banner',
                'core' => 1,
                'position' => 2,
                'icon' => '<i class="bi bi-image"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'gallery', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'gallery',
                'label' => 'Images gallery',
                'description' => 'Images gallery',
                'core' => 1,
                'position' => 3,
                'icon' => '<i class="bi bi-images"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'hero', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'hero',
                'label' => 'Hero',
                'description' => "A hero section is a prominent, visually striking area at the top of a webpage, designed to immediately capture a visitor's attention.",
                'core' => 1,
                'position' => 4,
                'icon' => '<i class="bi bi-card-heading"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'card', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'card',
                'label' => 'Card',
                'description' => 'A card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options.',
                'core' => 1,
                'position' => 5,
                'icon' => '<i class="bi bi-file-richtext"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'slider', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'slider',
                'label' => 'Slider',
                'description' => 'A slider, also known as a carousel or slideshow, is a design element that displays a sequence of images, videos, text or other content, allowing users to navigate through them.',
                'core' => 1,
                'position' => 6,
                'icon' => '<i class="bi bi-collection"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'video', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'video',
                'label' => 'Video',
                'description' => 'Add embed video.',
                'core' => 1,
                'position' => 8,
                'icon' => '<i class="bi bi-play-btn"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'map', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'map',
                'label' => 'Map',
                'description' => 'Google map.',
                'core' => 1,
                'position' => 9,
                'icon' => '<i class="bi bi-geo-alt"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'alert', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'alert',
                'label' => 'Alert',
                'description' => 'Alert (info, warning, error, success)',
                'core' => 1,
                'position' => 10,
                'icon' => '<i class="bi bi-exclamation-square"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'blockquote', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'blockquote',
                'label' => 'Blockquote',
                'description' => 'Blockquote',
                'core' => 1,
                'position' => 11,
                'icon' => '<i class="bi bi-chat-left-quote"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'include', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'include',
                'label' => 'Include file',
                'description' => 'Include file content',
                'core' => 1,
                'position' => 12,
                'icon' => '<i class="bi bi-file-earmark-plus"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'custom', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'custom',
                'label' => 'Custom',
                'description' => 'Custom code',
                'core' => 1,
                'position' => 13,
                'icon' => '<i class="bi bi-code"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'posts', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'posts',
                'label' => 'Posts content',
                'description' => 'Posts content',
                'core' => 1,
                'position' => 14,
                'icon' => '<i class="bi bi-card-text"></i>'
            ]);
        }

        if (BlockType::where(['type' => 'form', 'core' => 1])->doesntExist()) {
            BlockType::create([
                'type' => 'form',
                'label' => 'Form',
                'description' => 'Form',
                'core' => 1,
                'position' => 15,
                'icon' => '<i class="bi bi-textarea-resize"></i>'
            ]);
        }
    }


    // Add default theme, if not exists        
    public static function check_default_theme()
    {

        if (Theme::where('is_active', 1)->doesntExist()) {
            Theme::create([
                'is_active' => 1,
                'label' => 'Default theme',
                'slug' => 'pivlu_default',
                'menu_id' => ThemeMenu::where('is_default', 1)->value('id'),
            ]);
        }
    }



    // Add a default button, if not exists        
    public static function check_default_button()
    {
        if (ThemeButton::where('is_default', 1)->doesntExist()) {
            $data = [
                'bg_color' => config('pivlu.defaults.button_bg_color'),
                'font_color' => config('pivlu.defaults.button_font_color'),
                'border_color' => config('pivlu.defaults.button_border_color'),
                'bg_color_hover' => config('pivlu.defaults.button_bg_color_hover'),
                'font_color_hover' => config('pivlu.defaults.button_font_color_hover'),
                'border_color_hover' => config('pivlu.defaults.button_border_color_hover'),
                'shadow' => null,
                'rounded' => null,
                "font_weight" => 'normal',
                "size" => null,
            ];

            ThemeButton::create([
                'is_default' => 1,
                'label' => 'Default button',
                'data' => json_encode($data)
            ]);
        }
    }


    // Add a default style, if not exists        
    public static function check_default_style()
    {
        if (ThemeStyle::where('is_default', 1)->doesntExist()) {
            $data = [
                'text_color' => config('pivlu.defaults.font_color'),
                'text_size' => config('pivlu.defaults.font_size'),
                'h1_size' => config('pivlu.defaults.h1_size'),
                'h2_size' => config('pivlu.defaults.h2_size'),
                'h3_size' => config('pivlu.defaults.h3_size'),

                "link_color" => config('pivlu.defaults.link_color'),
                "link_color_hover" => config('pivlu.defaults.link_color_hover'),
                "link_color_underline" => config('pivlu.defaults.link_color_underline'),
                "link_color_underline_hover" => config('pivlu.defaults.link_color_underline_hover'),
                "link_decoration" => config('pivlu.defaults.link_decoration'),
                "link_hover_decoration" => config('pivlu.defaults.link_hover_decoration'),

                "nav_bg_color" => config('pivlu.defaults.nav_bg_color'),
                "nav_font_color" => config('pivlu.defaults.nav_font_color'),
                "nav_font_size" => config('pivlu.defaults.nav_font_size'),
                "nav_link_color" => config('pivlu.defaults.nav_link_color'),
                "nav_link_color_hover" => config('pivlu.defaults.nav_link_color_hover'),
                "nav_link_color_underline" => config('pivlu.defaults.nav_link_color_underline'),
                "nav_link_hover_decoration" => config('pivlu.defaults.nav_link_hover_decoration'),

                "dropdown_font_color" => config('pivlu.defaults.dropdown_font_color'),
                "dropdown_bg_color" => config('pivlu.defaults.dropdown_bg_color'),
                "dropdown_link_color" => config('pivlu.defaults.dropdown_link_color'),
                "dropdown_link_color_hover" => config('pivlu.defaults.dropdown_link_color_hover'),
                "dropdown_link_color_underline" => config('pivlu.defaults.dropdown_link_color_underline'),
                "dropdown_bg_color_hover" => config('pivlu.defaults.dropdown_bg_color_hover'),
                "dropdown_link_hover_decoration" => config('pivlu.defaults.dropdown_link_hover_decoration'),
            ];

            ThemeStyle::create([
                'is_default' => 1,
                'label' => 'Default style',
                'data' => json_encode($data)
            ]);
        }
    }


    public static function check_default_menu()
    {
        // Add default menu, if not exists
        if (ThemeMenu::where(['is_default' => 1])->doesntExist()) {
            $menu = ThemeMenu::create([
                'label' => 'Default menu',
                'is_default' => 1,
            ]);

            $menu_item = ThemeMenuItem::create([
                'menu_id' => $menu->id,
                'type' => 'homepage',
                'position' => 1
            ]);

            ThemeMenuContent::create([
                'lang_id' => Language::get_default_language()->id,
                'menu_id' => $menu->id,
                'item_id' => $menu_item->id,
                'label' => 'Home'
            ]);
        }
    }


    // Add default roles and permissions, if not exists
    public static function check_default_roles_and_permissions()
    {
        $post_types = PostType::all();

        // DEFAULT ROLES
        Role::firstOrCreate(
            ['role' => 'admin'],
            ['is_core' => 1, 'label' => 'Administrator', 'description' => 'Administrator: Has complete control over the entire Pivlu site, including access to all features, settings, and the ability to manage any account.']
        );

        Role::firstOrCreate(
            ['role' => 'editor'],
            ['is_core' => 1, 'label' => 'Editor', 'description' => 'Editor: By dfault, editor can manage and publish all posts and pages, manage post types, moderate comments, but cannot access settings.']
        );

        Role::firstOrCreate(
            ['role' => 'author'],
            ['is_core' => 1, 'label' => 'Author', 'description' => 'Author: By default, author has the ability to create, edit, and publish their own items, but not those created by others.']
        );

        Role::firstOrCreate(
            ['role' => 'contributor'],
            ['is_core' => 1, 'label' => 'Contributor', 'description' => 'Contributor: By default, contributor can create and edit their own items but must submit them for approval by an Editor or Administrator to be published.']
        );

        Role::firstOrCreate(
            ['role' => 'registered'],
            ['is_core' => 1, 'label' => 'Registered user',  'description' => 'Registered: Registered user. Has the permissions set by plugins (for example, using the e-commerce plugin allows registered users to purchase products and make payments)...']
        );



        // DEFAULT PERMISSIONS - POSTS TYPES            
        foreach ($post_types as $post_type) {
            $perm_index = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'index'],
                [
                    'is_core' => 1,
                    'description' => 'Access to this section.',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name,
                ]
            );

            $perm_view = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'view'],
                [
                    'is_core' => 1,
                    'description' => 'Permission to view their own content.',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name,
                ]
            );

            $perm_viewAny =  Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'viewAny'],
                [
                    'is_core' => 1,
                    'description' => 'Permissio to view any content, including those created by others.',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_create = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'create'],
                [
                    'is_core' => 1,
                    'description' => 'Create articles.',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_update = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'update'],
                [
                    'is_core' => 1,
                    'description' => 'Update their own content.',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_updateAny = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'updateAny'],
                [
                    'is_core' => 1,
                    'description' => 'Update any content, including those created by others.',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_delete = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'delete'],
                [
                    'is_core' => 1,
                    'description' => 'Delete their own content.',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_deleteAny = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'deleteAny'],
                [
                    'is_core' => 1,
                    'description' => 'Delete any content, including those created by others.',
                    'attention' => 1,
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_publish = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'publish'],
                [
                    'is_core' => 1,
                    'description' => 'Publish their own articles.',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_publishAny = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'publishAny'],
                [
                    'is_core' => 1,
                    'description' => 'Publish any articles, including those created by others.',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_update_published = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'update_published'],
                [
                    'is_core' => 1,
                    'description' => 'Edit or unpublish own articles after they are published.',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_updateAny_published = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'updateAny_published'],
                [
                    'is_core' => 1,
                    'description' => 'Edit or unpublish any articles from any author after they are published.',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_create_taxonomies = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'create_taxonomies'],
                [
                    'is_core' => 1,
                    'description' => 'The user can create taxonomies (categories, tags...)',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_update_taxonomies = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'update_taxonomies'],
                [
                    'is_core' => 1,
                    'description' => 'The user can update any taxononomy (categories, tags...).',
                    'attention' => 1,
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_delete_taxonomies = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'delete_taxonomies'],
                [
                    'is_core' => 1,
                    'description' => 'The user can delete any taxononomy (categories, tags...).',
                    'attention' => 1,
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_view_comments = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'view_comments'],
                [
                    'is_core' => 1,
                    'description' => 'View comments and reactions.',
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_update_comments = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'update_comments'],
                [
                    'is_core' => 1,
                    'description' => 'Edit comments and reactions.',
                    'attention' => 1,
                    'group_type' => 'posts',
                    'group_name' => $post_type->default_language_content->name
                ]
            );

            $perm_delete_comments = Permission::firstOrCreate(
                ['post_type_id' => $post_type->id ?? null, 'permission' => 'delete_comments'],
                [
                    'is_core' => 1,
                    'description' => 'Delete comments and reactions.',
                    'group_type' => 'posts',
                    'attention' => 1,
                    'group_name' => $post_type->default_language_content->name
                ]
            );


            $perm_index->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [
                            'switchCheck-' . $perm_view->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_viewAny->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_create->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_update->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_updateAny->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_delete->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_deleteAny->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_publish->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_publishAny->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_update_published->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_updateAny_published->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_create_taxonomies->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_update_taxonomies->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_delete_taxonomies->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_view_comments->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_update_comments->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_delete_comments->id ?? null  => 'disabled',
                        ],
                        'checked' => []
                    ]
                )
            ]);


            $perm_view->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                            'switchCheck-' . $perm_viewAny->id ?? null  => 'disabled',
                        ]
                    ]
                )
            ]);

            $perm_viewAny->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                            'switchCheck-' . $perm_view->id ?? null  => 'enabled',
                        ]
                    ]
                )
            ]);

            $perm_create->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                        ]
                    ]
                )
            ]);

            $perm_update->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                            'switchCheck-' . $perm_updateAny->id ?? null  => 'disabled',
                        ]
                    ]
                )
            ]);

            $perm_updateAny->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                            'switchCheck-' . $perm_update->id ?? null  => 'enabled',
                        ]
                    ]
                )
            ]);

            $perm_delete->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                            'switchCheck-' . $perm_deleteAny->id ?? null  => 'disabled',
                        ]
                    ]
                )
            ]);

            $perm_deleteAny->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                            'switchCheck-' . $perm_delete->id ?? null  => 'enabled',
                        ]
                    ]
                )
            ]);

            $perm_publish->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                            'switchCheck-' . $perm_publishAny->id ?? null  => 'disabled',
                        ]
                    ]
                )
            ]);

            $perm_publishAny->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                            'switchCheck-' . $perm_publish->id ?? null  => 'enabled',
                        ]
                    ]
                )
            ]);

            $perm_update_published->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                            'switchCheck-' . $perm_updateAny_published->id ?? null  => 'disabled',
                        ]
                    ]
                )
            ]);

            $perm_updateAny_published->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                            'switchCheck-' . $perm_update_published->id ?? null  => 'enabled',
                        ]
                    ]
                )
            ]);

            $perm_create_taxonomies->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                        ]
                    ]
                )
            ]);

            $perm_update_taxonomies->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                        ]
                    ]
                )
            ]);

            $perm_delete_taxonomies->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                        ]
                    ]
                )
            ]);

            $perm_view_comments->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [
                            'switchCheck-' . $perm_update_comments->id ?? null  => 'disabled',
                            'switchCheck-' . $perm_delete_comments->id ?? null  => 'disabled',
                        ],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                        ]
                    ]
                )
            ]);

            $perm_update_comments->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                            'switchCheck-' . $perm_view_comments->id ?? null  => 'enabled',
                        ]
                    ]
                )
            ]);

            $perm_delete_comments->update([
                'actions' => json_encode(
                    [
                        'unchecked' => [],
                        'checked' => [
                            'switchCheck-' . $perm_index->id ?? null  => 'enabled',
                            'switchCheck-' . $perm_view_comments->id ?? null  => 'enabled',
                        ]
                    ]
                )
            ]);
        }


        // DEFAULT PERMISSIONS - POST TYPES ACCESS
        Permission::firstOrCreate(
            ['permission' => 'create_custom_post_type'],
            ['is_core' => 1, 'description' => 'Create custom post type.', 'attention' => 1]
        );

        Permission::firstOrCreate(
            ['permission' => 'update_custom_post_type'],
            ['is_core' => 1, 'description' => 'Update custom post type.', 'attention' => 1]
        );

        Permission::firstOrCreate(
            ['permission' => 'delete_custom_post_type'],
            ['is_core' => 1, 'description' => 'Delete custom post type.', 'attention' => 1]
        );


        // DEFAULT PERMISSIONS - PLUGINS
        $perm_view_plugins = Permission::firstOrCreate(
            ['permission' => 'view_plugins'],
            ['is_core' => 1, 'description' => 'View plugins list and details']
        );

        $perm_install_plugins = Permission::firstOrCreate(
            ['permission' => 'install_plugins'],
            ['is_core' => 1, 'description' => 'Install plugins.', 'attention' => 1]
        );

        $perm_update_plugins = Permission::firstOrCreate(
            ['permission' => 'update_plugins'],
            ['is_core' => 1, 'description' => 'Edit plugins details.', 'attention' => 1]
        );

        $perm_activate_plugins = Permission::firstOrCreate(
            ['permission' => 'activate_plugins'],
            ['is_core' => 1, 'description' => 'Activate plugins.', 'attention' => 1]
        );

        $perm_view_plugins->update([
            'actions' => json_encode(
                [
                    'unchecked' => [
                        'switchCheck-' . $perm_install_plugins->id ?? null  => 'disabled',
                        'switchCheck-' . $perm_update_plugins->id ?? null  => 'disabled',
                        'switchCheck-' . $perm_activate_plugins->id ?? null  => 'disabled',
                    ],
                    'checked' => []
                ]
            )
        ]);


        // DEFAULT PERMISSIONS - FORMS
        $perm_view_forms_messages = Permission::firstOrCreate(
            ['permission' => 'view_forms_messages'],
            ['is_core' => 1, 'description' => 'View messages from forms']
        );

        $perm_delete_forms_messages = Permission::firstOrCreate(
            ['permission' => 'delete_forms_messages'],
            ['is_core' => 1, 'description' => 'Delete forms messages.', 'attention' => 1]
        );

        $perm_reply_forms_messages = Permission::firstOrCreate(
            ['permission' => 'reply_forms_messages'],
            ['is_core' => 1, 'description' => 'Reply to forms messages.', 'attention' => 1]
        );

        $perm_view_forms_messages->update([
            'actions' => json_encode(
                [
                    'unchecked' => [
                        'switchCheck-' . $perm_delete_forms_messages->id ?? null  => 'disabled',
                        'switchCheck-' . $perm_reply_forms_messages->id ?? null  => 'disabled',
                    ],
                    'checked' => []
                ]
            )
        ]);


        // DEFAULT PERMISSIONS - THEMES
        $perm_view_themes = Permission::firstOrCreate(
            ['permission' => 'view_themes'],
            ['is_core' => 1, 'description' => 'View themes and theme builder components (menus, styles, buttons, custom code...)']
        );

        $perm_install_themes = Permission::firstOrCreate(
            ['permission' => 'install_themes'],
            ['is_core' => 1, 'description' => 'Create or install new themes.']
        );

        $perm_update_themes = Permission::firstOrCreate(
            ['permission' => 'update_themes'],
            ['is_core' => 1, 'description' => 'Modify themes and manage theme builder components (menus, styles, buttons, custom code...)', 'attention' => 1]
        );

        $perm_delete_themes = Permission::firstOrCreate(
            ['permission' => 'delete_themes'],
            ['is_core' => 1, 'description' => 'Delete themes.']
        );

        $perm_switch_themes = Permission::firstOrCreate(
            ['permission' => 'switch_themes'],
            ['is_core' => 1, 'description' => 'Switch themes (activate themes).', 'attention' => 1]
        );

        $perm_view_themes->update([
            'actions' => json_encode(
                [
                    'unchecked' => [
                        'switchCheck-' . $perm_install_themes->id ?? null  => 'disabled',
                        'switchCheck-' . $perm_update_themes->id ?? null  => 'disabled',
                        'switchCheck-' . $perm_delete_themes->id ?? null  => 'disabled',
                        'switchCheck-' . $perm_switch_themes->id ?? null  => 'disabled',
                    ],
                    'checked' => []
                ]
            )
        ]);


        // DEFAULT PERMISSIONS - ACCOUNTS
        $perm_view_users = Permission::firstOrCreate(
            ['permission' => 'view_users'],
            ['is_core' => 1, 'description' => 'View all users.']
        );

        $perm_create_users = Permission::firstOrCreate(
            ['permission' => 'create_users'],
            ['is_core' => 1, 'description' => 'Create users accounts.']
        );

        $perm_update_users = Permission::firstOrCreate(
            ['permission' => 'update_users'],
            ['is_core' => 1, 'description' => 'Update users details.', 'attention' => 1]
        );

        $perm_delete_users = Permission::firstOrCreate(
            ['permission' => 'delete_users'],
            ['is_core' => 1, 'description' => 'Delete users accounts.', 'attention' => 1]
        );

        $perm_view_users->update([
            'actions' => json_encode(
                [
                    'unchecked' => [
                        'switchCheck-' . $perm_create_users->id ?? null  => 'disabled',
                        'switchCheck-' . $perm_update_users->id ?? null  => 'disabled',
                        'switchCheck-' . $perm_delete_users->id ?? null  => 'disabled',
                    ],
                    'checked' => []
                ]
            )
        ]);


        Permission::firstOrCreate(
            ['permission' => 'update_profile'],
            ['is_core' => 1, 'description' => 'User have acces to profile page, to update profile details.']
        );

        // ADD DEFAULT PERMISSIONS TO ROLES
        $role_editor = Role::where('role', 'editor')->first();
        $role_author = Role::where('role', 'author')->first();
        $role_contributor = Role::where('role', 'contributor')->first();
        $role_registered = Role::where('role', 'registered')->first();
        $permissions = Permission::all();

        // Editor permissions
        $editor_perms = [
            'index',
            'viewAny',
            'create',
            'updateAny',
            'deleteAny',
            'publishAny',
            'updateAny_published',
            'create_taxonomies',
            'update_taxonomies',
            'view_comments',
            'update_comments',
            'delete_comments',
            'update_profile',
            'create_custom_post_type',
            'update_custom_post_type',
            'delete_custom_post_type',
        ];
        foreach ($permissions as $permission) {
            if (in_array($permission->permission, $editor_perms)) RolePermission::firstOrCreate(['role_id' => $role_editor->id, 'permission_id' => $permission->id]);
        }

        // Author permissions
        $author_perms = [
            'index',
            'view',
            'create',
            'update',
            'publish',
            'update_profile',
        ];
        foreach ($permissions as $permission) {
            if (in_array($permission->permission, $author_perms)) RolePermission::firstOrCreate(['role_id' => $role_author->id, 'permission_id' => $permission->id]);
        }

        // Contributor permissions
        $contributor_perms = [
            'index',
            'view',
            'create',
            'update',
            'update_profile',
        ];
        foreach ($permissions as $permission) {
            if (in_array($permission->permission, $contributor_perms)) RolePermission::firstOrCreate(['role_id' => $role_contributor->id, 'permission_id' => $permission->id]);
        }

        // Registered permissions
        $registered_perms = [
            'update_profile',
        ];
        foreach ($permissions as $permission) {
            if (in_array($permission->permission, $registered_perms)) RolePermission::firstOrCreate(['role_id' => $role_registered->id, 'permission_id' => $permission->id]);
        }
    }

}
