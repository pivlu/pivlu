<?php

/**
 * Pivlu - Open source CMS (Content Management System).
 * Pivlu comes with the complete suite of tools that any business, team, or website owner needs.
 * https://pivlu.com
 *
 * Copyright (c) Chimilevschi Iosif-Gabriel
 * LICENSE:
 * Permissions of this strongest copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. 
 * When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.
 *    
 * @copyright   Copyright (c) Chimilevschi Iosif-Gabriel
 * @license     https://opensource.org/license/agpl-v3  AGPL-3.0 License.
 * @author      Chimilevschi Iosif-Gabriel <office@pivlu.com>
 * 
 *  DO NOT edit this file manually. All changes will be lost after software update. For custom changes, use templates ans plugins system.
 */

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Artisan;
use App\Models\Config;
use App\Models\User;
use App\Functions\SetupFunctions;
use App\Functions\HelperFunctions;

class UpdateCommand extends Command
{

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'pivlu:update';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Allows to update the app directly through CLI';

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {

        if (!Schema::hasTable('pivlu_config')) {
            $this->error('Pivlu is not installed!');
            $this->line('You can install Pivlu using "pivlu:install" command.');
            return;
        }

        if (!Config::get_config('installed_at')) {
            $this->error('Pivlu is not installed!');
            $this->line('You can install Pivlu using "pivlu:install" command.');
            return;
        }

        $this->line('Update database tables');
        Artisan::call('migrate');

        $this->line('Check default language');
        SetupFunctions::check_default_language();

        $this->line('Check default post types');
        SetupFunctions::check_default_post_types();

        $this->line('Check default block types');
        SetupFunctions::check_default_block_types();

        $this->line('Check default apps');
        SetupFunctions::check_default_apps();

        $this->line('Check default button');
        SetupFunctions::check_default_button();

        $this->line('Check default style');
        SetupFunctions::check_default_style();

        $this->line('Check default menu');
        SetupFunctions::check_default_menu();

        $this->line('Check default theme');
        SetupFunctions::check_default_theme();

        $this->line('Check website settings');
        SetupFunctions::check_default_website_settings();

        $this->line('Check website settings');
        SetupFunctions::check_default_website_settings();

        $this->line('Check default roles and permissions');
        SetupFunctions::check_default_roles_and_permissions();

        // Create the symbolic link 
        Artisan::call('storage:link');

        // Check if at least one admin account exists
        if (User::where('role', 'admin')->doesntExist()) {
            $this->line('Adding administrator account');
            $admin_name = $this->askValid('Input administrator full name: ', 'admin_name', ['required', 'min:3']);
            $admin_email = $this->askValid('Input administrator email: ', 'admin_email', ['required', 'email']);
            $admin_pass = $this->askValid('Input administrator password: ', 'admin_pass', ['required', 'min:5']);
            $admin_code = HelperFunctions::generateRandomInteger(12);
            User::updateOrInsert(['email' => $admin_email], [
                'name' => $admin_name ?? 'Admin',
                'email' => $admin_email,
                'role' => 'admin',
                'code' => $admin_code,
                'username' => $admin_code,
                'password' => Hash::make($admin_pass),
                'email_verified_at' => now(),
                'created_at' => now(),
            ]);
        }

        Config::update_config('updated_at', now());
        $this->info('The update was successful!');
    }

    protected function askValid($question, $field, $rules)
    {
        $value = $this->ask($question);

        if ($message = $this->validateInput($rules, $field, $value)) {
            $this->error($message);

            return $this->askValid($question, $field, $rules);
        }

        return $value;
    }


    protected function validateInput($rules, $fieldName, $value)
    {
        $validator = Validator::make([
            $fieldName => $value
        ], [
            $fieldName => $rules
        ]);

        return $validator->fails()
            ? $validator->errors()->first($fieldName)
            : null;
    }
}
